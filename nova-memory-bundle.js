var ua=Object.defineProperty;var u=(T,e)=>ua(T,"name",{value:e,configurable:!0});var g=(T,e)=>()=>(e||T((e={exports:{}}).exports,e),e.exports);var Ee=g((El,ji)=>{var ge=require("sqlite3").verbose(),pa=require("fs-extra"),ya=require("path"),_e=class _e{constructor(e){this.db=null,this.dbPath=e,this.preparedStatements={}}addMissingColumnsSync(){process.env.NOVA_MCP_MODE||console.error("\u{1F527} Running auto-recovery: Checking and updating database schema..."),this.db.serialize(()=>{this.db.all("PRAGMA table_info(entities)",(e,t)=>{if(!e&&t&&t.length>0){let s=t.map(n=>n.name),i=0;s.includes("last_updated")||(i++,this.db.run("ALTER TABLE entities ADD COLUMN last_updated TEXT DEFAULT (datetime('now'))",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding last_updated column:",n):n||console.error("\u2705 Added missing column: entities.last_updated")})),s.includes("updated_at")||(i++,this.db.run("ALTER TABLE entities ADD COLUMN updated_at TEXT DEFAULT (datetime('now'))",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding updated_at column:",n):n||console.error("\u2705 Added missing column: entities.updated_at")})),s.includes("mention_count")||(i++,this.db.run("ALTER TABLE entities ADD COLUMN mention_count INTEGER DEFAULT 1",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding mention_count column:",n):n||console.error("\u2705 Added missing column: entities.mention_count")})),s.includes("metadata")||(i++,this.db.run("ALTER TABLE entities ADD COLUMN metadata TEXT DEFAULT '{}'",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding metadata column:",n):n||console.error("\u2705 Added missing column: entities.metadata")})),i===0&&(process.env.NOVA_MCP_MODE||console.error("\u2705 Entities table schema is up to date"))}}),this.db.all("PRAGMA table_info(relationships)",(e,t)=>{if(!e&&t&&t.length>0){let s=t.map(n=>n.name),i=0;s.includes("timestamp")||(i++,this.db.run("ALTER TABLE relationships ADD COLUMN timestamp TEXT DEFAULT (datetime('now'))",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding timestamp column:",n):n||console.error("\u2705 Added missing column: relationships.timestamp")})),s.includes("metadata")||(i++,this.db.run("ALTER TABLE relationships ADD COLUMN metadata TEXT DEFAULT '{}'",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding metadata column:",n):n||console.error("\u2705 Added missing column: relationships.metadata")})),i===0&&(process.env.NOVA_MCP_MODE||console.error("\u2705 Relationships table schema is up to date"))}}),this.db.all("PRAGMA table_info(memory_entity_links)",(e,t)=>{if(!e&&t&&t.length>0){let s=t.map(n=>n.name),i=0;s.includes("confidence")||(i++,this.db.run("ALTER TABLE memory_entity_links ADD COLUMN confidence FLOAT DEFAULT 1.0",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding confidence column to memory_entity_links:",n):n||console.error("\u2705 Added missing column: memory_entity_links.confidence")})),s.includes("timestamp")||(i++,this.db.run("ALTER TABLE memory_entity_links ADD COLUMN timestamp DATETIME DEFAULT CURRENT_TIMESTAMP",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding timestamp column to memory_entity_links:",n):n||console.error("\u2705 Added missing column: memory_entity_links.timestamp")})),i===0&&(process.env.NOVA_MCP_MODE||console.error("\u2705 Memory_entity_links table schema is up to date"))}}),this.db.all("PRAGMA table_info(memory_entries)",(e,t)=>{if(!e&&t&&t.length>0){let s=t.map(n=>n.name),i=0;s.includes("entity_key")||(i++,this.db.run("ALTER TABLE memory_entries ADD COLUMN entity_key TEXT",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding entity_key column:",n):n||console.error("\u2705 Added missing column: memory_entries.entity_key")})),s.includes("version")||(i++,this.db.run("ALTER TABLE memory_entries ADD COLUMN version INTEGER DEFAULT 1",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding version column:",n):n||console.error("\u2705 Added missing column: memory_entries.version")})),s.includes("previous_id")||(i++,this.db.run("ALTER TABLE memory_entries ADD COLUMN previous_id INTEGER",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding previous_id column:",n):n||console.error("\u2705 Added missing column: memory_entries.previous_id")})),s.includes("is_latest")||(i++,this.db.run("ALTER TABLE memory_entries ADD COLUMN is_latest INTEGER DEFAULT 1",n=>{n&&!n.message.includes("duplicate column")?console.error("Error adding is_latest column:",n):n||console.error("\u2705 Added missing column: memory_entries.is_latest")})),i===0&&(process.env.NOVA_MCP_MODE||console.error("\u2705 Memory entries table schema is up to date"))}})})}initDatabase(){try{pa.ensureDirSync(ya.dirname(this.dbPath)),this.db=new ge.Database(this.dbPath,ge.OPEN_READWRITE|ge.OPEN_CREATE),this.setupAutoRecovery(),this.db.run("PRAGMA journal_mode = WAL"),this.db.run("PRAGMA synchronous = NORMAL"),this.db.run("PRAGMA cache_size = 50000"),this.db.run("PRAGMA temp_store = MEMORY"),this.db.run("PRAGMA mmap_size = 268435456"),this.db.run("PRAGMA page_size = 4096"),this.db.run("PRAGMA locking_mode = NORMAL"),this.db.run("PRAGMA busy_timeout = 30000"),this.db.run("PRAGMA wal_autocheckpoint = 1000"),this.createSchemaBlocking(),this.prepareStatements(),process.env.NOVA_MCP_MODE||console.error("\u2705 Database schema initialized with performance optimizations and auto-recovery")}catch(e){throw console.error(`\u274C Failed to initialize database: ${e.message}`),e}}dbRun(e,t=[],s=3){return new Promise((i,n)=>{let r=u(o=>{this.db.run(e,t,function(a){a?a.code==="SQLITE_BUSY"&&o>0?setTimeout(()=>r(o-1),100*(4-o)):n(a):i({lastID:this.lastID,changes:this.changes})})},"attempt");r(s)})}dbGet(e,t=[],s=3){return new Promise((i,n)=>{let r=u(o=>{this.db.get(e,t,(a,c)=>{a?a.code==="SQLITE_BUSY"&&o>0?setTimeout(()=>r(o-1),100*(4-o)):n(a):i(c)})},"attempt");r(s)})}dbAll(e,t=[],s=3){return new Promise((i,n)=>{let r=u(o=>{this.db.all(e,t,(a,c)=>{a?a.code==="SQLITE_BUSY"&&o>0?setTimeout(()=>r(o-1),100*(4-o)):n(a):i(c)})},"attempt");r(s)})}createSchemaBlocking(){this.db.serialize(()=>{this.db.run("SELECT 1",e=>{e||this.addMissingColumnsSync()}),this.db.run(`
        CREATE TABLE IF NOT EXISTS memory_entries (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          content TEXT NOT NULL,
          memory_type TEXT DEFAULT 'general',
          session_id TEXT,
          timestamp TEXT DEFAULT (datetime('now')),
          tags TEXT DEFAULT '[]',
          tool_used TEXT,
          confidence_score REAL DEFAULT 1.0,
          metadata TEXT DEFAULT '{}',
          embedding TEXT
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS entities (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL UNIQUE,
          type TEXT DEFAULT 'unknown',
          confidence REAL DEFAULT 1.0,
          created_at TEXT DEFAULT (datetime('now')),
          updated_at TEXT DEFAULT (datetime('now')),
          last_updated TEXT DEFAULT (datetime('now')),
          mention_count INTEGER DEFAULT 1,
          metadata TEXT DEFAULT '{}'
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS relationships (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          entity1 TEXT NOT NULL,
          entity2 TEXT NOT NULL,
          relation TEXT NOT NULL,
          confidence REAL DEFAULT 1.0,
          entity1_type TEXT DEFAULT 'unknown',
          entity2_type TEXT DEFAULT 'unknown',
          relation_type TEXT DEFAULT 'general',
          created_at TEXT DEFAULT (datetime('now')),
          updated_at TEXT DEFAULT (datetime('now')),
          timestamp TEXT DEFAULT (datetime('now')),
          metadata TEXT DEFAULT '{}'
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS memory_entity_links (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          memory_id INTEGER,
          entity_id INTEGER,
          confidence FLOAT DEFAULT 1.0,
          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
          created_at TEXT DEFAULT (datetime('now')),
          FOREIGN KEY(memory_id) REFERENCES memory_entries(id),
          FOREIGN KEY(entity_id) REFERENCES entities(id),
          UNIQUE(memory_id, entity_id)
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS analysis_cache (
          memory_id TEXT PRIMARY KEY,
          analysis_version TEXT,
          analyzed_at INTEGER,
          cluster_id TEXT,
          cluster_theme TEXT,
          features_extracted INTEGER DEFAULT 0,
          last_modified INTEGER,
          metadata TEXT
        )
      `),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_timestamp ON memory_entries(timestamp)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_type ON memory_entries(memory_type)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_session ON memory_entries(session_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_content ON memory_entries(content)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entities_name ON entities(name)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entities_type ON entities(type)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entities_last_updated ON entities(last_updated)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_relationships_entity1 ON relationships(entity1)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_relationships_entity2 ON relationships(entity2)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_relationships_relation ON relationships(relation)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_relationships_timestamp ON relationships(timestamp)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_entity_links_memory ON memory_entity_links(memory_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_entity_links_entity ON memory_entity_links(entity_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_analysis_cache_cluster ON analysis_cache(cluster_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_analysis_cache_version ON analysis_cache(analysis_version)"),this.db.run(`
        CREATE VIRTUAL TABLE IF NOT EXISTS memory_fts USING fts5(
          content, 
          tags, 
          memory_type,
          content='memory_entries',
          content_rowid='id'
        )
      `),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_insert AFTER INSERT ON memory_entries BEGIN
          INSERT INTO memory_fts(rowid, content, tags, memory_type) 
          VALUES (new.id, new.content, new.tags, new.memory_type);
        END
      `),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_delete AFTER DELETE ON memory_entries BEGIN
          INSERT INTO memory_fts(memory_fts, rowid, content, tags, memory_type) 
          VALUES('delete', old.id, old.content, old.tags, old.memory_type);
        END
      `),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_update AFTER UPDATE ON memory_entries BEGIN
          INSERT INTO memory_fts(memory_fts, rowid, content, tags, memory_type) 
          VALUES('delete', old.id, old.content, old.tags, old.memory_type);
          INSERT INTO memory_fts(rowid, content, tags, memory_type) 
          VALUES (new.id, new.content, new.tags, new.memory_type);
        END
      `)})}prepareStatements(){process.env.NOVA_MCP_MODE||console.error("\u2705 Prepared statements initialized for performance optimization")}setupAutoRecovery(){let e=this.dbRun.bind(this);this.dbRun=async(t,s=[],i=3)=>{try{return await e(t,s,i)}catch(n){if(n.message&&n.message.includes("no such column"))return console.error(`\u{1F527} Auto-recovery triggered: ${n.message}`),await new Promise(r=>{this.addMissingColumnsSync(),setTimeout(r,100)}),console.error("\u{1F504} Retrying operation after auto-recovery..."),await e(t,s,i);if(n.message&&n.message.includes("no such table"))return console.error(`\u{1F527} Auto-recovery triggered for missing table: ${n.message}`),await new Promise(r=>{this.createSchemaBlocking(),setTimeout(r,100)}),console.error("\u{1F504} Retrying operation after table creation..."),await e(t,s,i);throw n}}}async close(){return new Promise((e,t)=>{this.db?this.db.close(s=>{s?t(s):(console.error("\u2705 Memory system database closed"),e())}):e()})}};u(_e,"DatabaseOperations");var fe=_e;ji.exports={DatabaseOperations:fe}});var Wi=g((wl,Bi)=>{var W=require("fs-extra"),P=require("path"),Ui=require("yaml"),we=class we{constructor(){this.defaultConfig=this._getDefaultConfig()}loadConfig(e=null){if(!e)return this.defaultConfig;if(typeof e=="string")return this._loadConfigFile(e);if(typeof e=="object")return this._mergeConfigs(this.defaultConfig,e);throw new Error("Invalid config type. Expected object, string, or null")}expandPath(e){if(!e)throw new Error("File path is required");if(e.startsWith("~")&&(e=P.join(require("os").homedir(),e.slice(2))),process.env.NODE_ENV==="test"||process.env.NOVA_UNIQUE_DB){let t=P.parse(e),s=Date.now(),i=process.pid,n=Math.random().toString(36).substring(2,8);e=P.join(t.dir,`${t.name}-${i}-${s}-${n}${t.ext}`)}return e}validateConfig(e){if(!e||typeof e!="object")throw new Error("Configuration must be an object");if(!e.storage||!e.storage.path)throw new Error("Configuration must include storage.path");if(e.search){let t=["tfidf","bm25","hybrid"];if(e.search.algorithm&&!t.includes(e.search.algorithm))throw new Error(`Invalid search algorithm. Must be one of: ${t.join(", ")}`)}if(e.performance){let t=e.performance;if(t.batch_size&&(typeof t.batch_size!="number"||t.batch_size<1))throw new Error("performance.batch_size must be a positive number");if(t.cache_timeout&&(typeof t.cache_timeout!="number"||t.cache_timeout<0))throw new Error("performance.cache_timeout must be a non-negative number")}return!0}getSystemInfo(){return{nodeVersion:process.version,platform:process.platform,arch:process.arch,pid:process.pid,env:process.env.NODE_ENV||"development",memory:process.memoryUsage(),uptime:process.uptime()}}_getDefaultConfig(){return{storage:{type:"sqlite",path:"~/data/nova-memory/memory.db",backup_enabled:!0,backup_interval:86400,max_backups:7},search:{algorithm:"hybrid",max_results:100,similarity_threshold:.1,optimizations:{enable_caching:!0,enable_indexing:!0,enable_parallel_search:!1,enable_result_reranking:!0}},performance:{batch_size:50,cache_timeout:3e5,max_cache_size:100,connection_timeout:3e4,retry_attempts:3,enable_wal_mode:!0,enable_memory_mapping:!0},entity_extraction:{enabled:!0,confidence_threshold:.8,max_entities_per_memory:20,entity_types:["PERSON","ORG","GPE","TECHNOLOGY","CONCEPT"]},clustering:{algorithm:"dbscan",min_samples:3,eps:.3,max_clusters:50,enable_quality_metrics:!0},query:{default_limit:20,max_limit:1e3,timeout:5e3},retention:{archive_old:!0,days:30,max_entries:1e4,cleanup_enabled:!0},logging:{level:"info",file_enabled:!1,file_path:"~/data/nova-memory/logs/memory.log",console_enabled:!0}}}_loadConfigFile(e){try{let t=this.expandPath(e);if(!W.existsSync(t))return console.warn(`Configuration file not found: ${t}, using defaults`),this.defaultConfig;let s=W.readFileSync(t,"utf8"),i=P.extname(t).toLowerCase(),n;if(i===".yaml"||i===".yml")n=Ui.parse(s);else if(i===".json")n=JSON.parse(s);else throw new Error(`Unsupported configuration file format: ${i}`);return this._mergeConfigs(this.defaultConfig,n)}catch(t){return console.error(`Failed to load configuration from ${e}: ${t.message}`),console.warn("Using default configuration"),this.defaultConfig}}_mergeConfigs(e,t){let s={...e};for(let[i,n]of Object.entries(t))n!=null&&(typeof n=="object"&&!Array.isArray(n)&&typeof s[i]=="object"&&!Array.isArray(s[i])?s[i]=this._mergeConfigs(s[i],n):s[i]=n);return s}saveConfig(e,t,s="yaml"){try{this.validateConfig(e);let i=this.expandPath(t);W.ensureDirSync(P.dirname(i));let n;if(s==="yaml"||s==="yml")n=Ui.stringify(e,{indent:2});else if(s==="json")n=JSON.stringify(e,null,2);else throw new Error(`Unsupported format: ${s}`);W.writeFileSync(i,n,"utf8"),console.log(`Configuration saved to: ${i}`)}catch(i){throw console.error(`Failed to save configuration: ${i.message}`),i}}loadConfigFromLoader(e){try{let t=e.memoryConfig||{},s={storage:{path:e.databasePath,type:"sqlite",backup_enabled:!0,backup_interval:86400,max_backups:7},project:{path:e.projectPath,name:e.projectName||P.basename(e.projectPath)},memory:{globalMaxMemories:t.globalMaxMemories||this.defaultConfig.retention.max_entries,typeRetention:t.typeRetention||{},versioning:t.versioning||{enabled:!1}}};return this._mergeConfigs(this.defaultConfig,s)}catch(t){return console.warn(`Failed to load ConfigLoader format: ${t.message}, using defaults`),this.defaultConfig}}createTemplate(e,t="yaml"){try{let s=this.expandPath(e);if(W.existsSync(s))throw new Error(`Template file already exists: ${s}`);this.saveConfig(this.defaultConfig,s,t),console.log(`Configuration template created: ${s}`)}catch(s){throw console.error(`Failed to create configuration template: ${s.message}`),s}}};u(we,"ConfigurationManager");var be=we;Bi.exports={ConfigurationManager:be}});var K=g((Sl,Te)=>{var{ConfigurationManager:Hi}=Wi();Te.exports={ConfigurationManager:Hi};Te.exports.ConfigurationManager=Hi});var G=g((Cl,Gi)=>{var{v4:ga}=require("uuid"),Ce=class Ce{constructor({id:e=null,content:t="",memory_type:s="general",session_id:i=null,timestamp:n=null,tags:r=[],tool_used:o=null,confidence_score:a=1,metadata:c={},embedding:l=null,structured:h=null}={}){this.id=e,this.content=t,this.memory_type=s,this.session_id=i,this.timestamp=n||new Date,this.tags=Array.isArray(r)?r:[],this.tool_used=o,this.confidence_score=a,this.metadata=c||{},this.embedding=l,this.structured=h}toJSON(){return{id:this.id,content:this.content,memory_type:this.memory_type,session_id:this.session_id,timestamp:this.timestamp.toISOString(),tags:this.tags,tool_used:this.tool_used,confidence_score:this.confidence_score,metadata:this.metadata,embedding:this.embedding}}};u(Ce,"MemoryEntry");var H=Ce,ve=class ve{constructor(e,t){var s,i,n;this.db=e,this.config=t,this.stats={total_entries:0,last_cleanup:null,cleanup_count:0,cache_hits:0,cache_misses:0},this.queryCache=new Map,this.maxCacheSize=((s=t.performance)==null?void 0:s.max_cache_size)||100,this.cacheTimeout=((i=t.performance)==null?void 0:i.cache_timeout)||3e5,this.batchQueue=[],this.batchSize=((n=t.performance)==null?void 0:n.batch_size)||50,this.batchTimeout=null}async store(e){try{let t=process.hrtime.bigint();e instanceof H||(e=new H(e)),e.id||(e.id=ga()),this._validateEntry(e);let i=(await this.db.dbRun(`
        INSERT INTO memory_entries (
          content, memory_type, session_id, timestamp, tags,
          tool_used, confidence_score, metadata, embedding
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,[e.content,e.memory_type,e.session_id,e.timestamp.toISOString(),JSON.stringify(e.tags),e.tool_used,e.confidence_score,JSON.stringify(e.metadata),e.embedding?JSON.stringify(e.embedding):null])).lastID;this.stats.total_entries++,this._clearCache();let n=process.hrtime.bigint(),r=Number(n-t)/1e6;return console.log(`\u2705 Memory entry stored with ID: ${i} (${r.toFixed(2)}ms)`),i}catch(t){throw console.error(`\u274C Failed to store memory entry: ${t.message}`),t}}async query(e={},t=null){var s;try{let i=process.hrtime.bigint();t=t||((s=this.config.search)==null?void 0:s.max_results)||100;let n=`query_${JSON.stringify(e)}_${t}`,r=this._getFromCache(n);if(r){this.stats.cache_hits++;let m=process.hrtime.bigint(),p=Number(m-i)/1e6;return console.log(`\u{1F680} Query served from cache (${p.toFixed(2)}ms)`),r}this.stats.cache_misses++;let o="SELECT * FROM memory_entries WHERE 1=1",a=[];e.memory_type&&(o+=" AND memory_type = ?",a.push(e.memory_type)),e.session_id&&(o+=" AND session_id = ?",a.push(e.session_id)),e.tool_used&&(o+=" AND tool_used = ?",a.push(e.tool_used)),e.min_confidence&&(o+=" AND confidence_score >= ?",a.push(e.min_confidence)),e.tags&&e.tags.length>0&&(o+=" AND tags LIKE ?",a.push(`%${e.tags[0]}%`)),e.content_search&&(o+=" AND content LIKE ?",a.push(`%${e.content_search}%`)),e.start_date&&(o+=" AND timestamp >= ?",a.push(e.start_date)),e.end_date&&(o+=" AND timestamp <= ?",a.push(e.end_date)),o+=" ORDER BY timestamp DESC",t&&(o+=" LIMIT ?",a.push(t));let l=(await this.db.dbAll(o,a)).map(m=>({...m,timestamp:new Date(m.timestamp),tags:JSON.parse(m.tags||"[]"),metadata:JSON.parse(m.metadata||"{}"),embedding:m.embedding?JSON.parse(m.embedding):null}));this._setCache(n,l);let h=process.hrtime.bigint(),d=Number(h-i)/1e6;return d>10&&console.warn(`\u26A0\uFE0F Slow query operation: ${d.toFixed(2)}ms (target: <10ms)`),console.log(`\u2705 Query executed (${d.toFixed(2)}ms) - ${l.length} results`),l}catch(i){throw console.error(`\u274C Failed to query memories: ${i.message}`),i}}async update(e,t){try{let s=process.hrtime.bigint(),i=[],n=[];for(let[l,h]of Object.entries(t))l==="tags"||l==="metadata"?(i.push(`${l} = ?`),n.push(JSON.stringify(h))):l==="embedding"?(i.push(`${l} = ?`),n.push(h?JSON.stringify(h):null)):l==="timestamp"?(i.push(`${l} = ?`),n.push(h instanceof Date?h.toISOString():h)):(i.push(`${l} = ?`),n.push(h));if(i.length===0)throw new Error("No valid fields to update");n.push(e);let r=`UPDATE memory_entries SET ${i.join(", ")} WHERE id = ?`;if((await this.db.dbRun(r,n)).changes===0)throw new Error(`Memory entry not found: ${e}`);this._clearCache();let a=process.hrtime.bigint(),c=Number(a-s)/1e6;return console.log(`\u2705 Memory entry updated: ${e} (${c.toFixed(2)}ms)`),!0}catch(s){throw console.error(`\u274C Failed to update memory entry: ${s.message}`),s}}async delete(e){try{let t=process.hrtime.bigint();if((await this.db.dbRun("DELETE FROM memory_entries WHERE id = ?",[e])).changes===0)throw new Error(`Memory entry not found: ${e}`);await this.db.dbRun("DELETE FROM memory_entity_links WHERE memory_id = ?",[e]),this.stats.total_entries--,this._clearCache();let i=process.hrtime.bigint(),n=Number(i-t)/1e6;return console.log(`\u2705 Memory entry deleted: ${e} (${n.toFixed(2)}ms)`),!0}catch(t){throw console.error(`\u274C Failed to delete memory entry: ${t.message}`),t}}async getStats(){try{let e=await this.db.dbGet("SELECT COUNT(*) as count FROM memory_entries");this.stats.total_entries=e.count;let t=await this.db.dbAll(`
        SELECT memory_type, COUNT(*) as count 
        FROM memory_entries 
        GROUP BY memory_type
      `),s=await this.db.dbAll(`
        SELECT session_id, COUNT(*) as count 
        FROM memory_entries 
        WHERE session_id IS NOT NULL
        GROUP BY session_id
        ORDER BY count DESC
        LIMIT 10
      `);return{...this.stats,type_distribution:t,top_sessions:s,cache_hit_rate:this.stats.cache_hits/(this.stats.cache_hits+this.stats.cache_misses)||0}}catch(e){throw console.error(`\u274C Failed to get memory statistics: ${e.message}`),e}}_validateEntry(e){if(!e.content||typeof e.content!="string")throw new Error("Memory entry must have non-empty content");if(e.content.length>1e4)throw new Error("Memory content too long (max 10000 characters)");if(e.confidence_score<0||e.confidence_score>1)throw new Error("Confidence score must be between 0 and 1");if(!Array.isArray(e.tags))throw new Error("Tags must be an array");if(typeof e.metadata!="object")throw new Error("Metadata must be an object")}_getFromCache(e){let t=this.queryCache.get(e);return t&&Date.now()-t.timestamp<this.cacheTimeout?t.data:(t&&this.queryCache.delete(e),null)}_setCache(e,t){if(this.queryCache.size>=this.maxCacheSize){let s=this.queryCache.keys().next().value;this.queryCache.delete(s)}this.queryCache.set(e,{data:t,timestamp:Date.now()})}_clearCache(){this.queryCache.clear()}};u(ve,"MemoryStorage");var Se=ve;Gi.exports={MemoryEntry:H,MemoryStorage:Se}});var Ne=g((Al,Vi)=>{var Me=class Me{constructor(e={}){this.maxFeatures=e.maxFeatures||1e3,this.minTermFreq=e.minTermFreq||1,this.stopWords=new Set(["the","a","an","and","or","but","in","on","at","to","for","of","with","by","from","up","about","into","through","during","before","after","above","below","is","are","was","were","be","been","being","have","has","had","do","does","did","will","would","could","should","may","might","must","can","shall","this","that"])}extractFeatures(e){let t=process.hrtime.bigint(),s=this.buildVocabulary(e),i=e.map(o=>this.memoryToVector(o,s)),n=process.hrtime.bigint(),r=Number(n-t)/1e6;return{vectors:i,vocabulary:s,dimensions:s.size,duration:r}}buildVocabulary(e){let t=new Map;e.forEach(n=>{let r=this.tokenize(n.content);new Set(r).forEach(a=>{t.set(a,(t.get(a)||0)+1)})});let s=new Map,i=0;return Array.from(t.entries()).filter(([n,r])=>r>=this.minTermFreq).sort((n,r)=>r[1]-n[1]).slice(0,this.maxFeatures).forEach(([n,r])=>{s.set(n,i++)}),s}memoryToVector(e,t){let s=new Array(t.size).fill(0),i=this.tokenize(e.content),n=new Map;i.forEach(o=>{t.has(o)&&n.set(o,(n.get(o)||0)+1)}),n.forEach((o,a)=>{let c=t.get(a);s[c]=o/i.length});let r=this.extractMetadataFeatures(e);return{id:e.id,features:s,metadata:r,content:e.content,memory_type:e.memory_type,tags:e.tags||[],timestamp:e.timestamp,confidence_score:e.confidence_score||1}}extractMetadataFeatures(e){return{contentLength:e.content.length,tagCount:(e.tags||[]).length,confidenceScore:e.confidence_score||1,memoryType:e.memory_type,dayOfWeek:new Date(e.timestamp).getDay(),hourOfDay:new Date(e.timestamp).getHours()}}tokenize(e){return!e||typeof e!="string"?[]:e.toLowerCase().replace(/[^\w\s]/g," ").split(/\s+/).filter(t=>t.length>2&&!this.stopWords.has(t)).filter(Boolean)}cosineDistance(e,t){if(e.length!==t.length)throw new Error("Vectors must have same dimensions");let s=0,i=0,n=0;for(let a=0;a<e.length;a++)s+=e[a]*t[a],i+=e[a]*e[a],n+=t[a]*t[a];let r=Math.sqrt(i)*Math.sqrt(n);return r===0?1:1-s/r}euclideanDistance(e,t){if(e.length!==t.length)throw new Error("Vectors must have same dimensions");let s=0;for(let i=0;i<e.length;i++){let n=e[i]-t[i];s+=n*n}return Math.sqrt(s)}};u(Me,"MemoryFeatureExtractor");var N=Me,Re=class Re{constructor(e=.5,t=3,s="cosine",i=null){this.epsilon=e,this.minPoints=t,this.distanceMetric=s,this.featureExtractor=i||new N}cluster(e){let t=process.hrtime.bigint(),s=e.map((c,l)=>({index:l,features:c.features,memory:c,cluster:null,visited:!1,isNoise:!1})),i=0,n=[];for(let c of s){if(c.visited)continue;c.visited=!0;let l=this.regionQuery(c,s);if(l.length<this.minPoints)c.isNoise=!0;else{let h=this.expandCluster(c,l,i,s);h.length>0&&(n.push({id:i,size:h.length,members:h,centroid:this.calculateCentroid(h)}),i++)}}let r=s.filter(c=>c.isNoise).map(c=>c.memory),o=process.hrtime.bigint(),a=Number(o-t)/1e6;return{clusters:n,noise:r,stats:{clusterCount:n.length,noiseCount:r.length,totalPoints:s.length,avgClusterSize:n.length>0?n.reduce((c,l)=>c+l.size,0)/n.length:0},parameters:{epsilon:this.epsilon,minPoints:this.minPoints,distanceMetric:this.distanceMetric},duration:a}}regionQuery(e,t){let s=[];if(e._processedNeighbors)return e._processedNeighbors;for(let i of t){if(e===i)continue;this.calculateDistance(e.features,i.features)<=this.epsilon&&s.push(i)}return e._processedNeighbors=s,s}expandCluster(e,t,s,i){let n=[e.memory];e.cluster=s;let r=0;for(;r<t.length;){let o=t[r];if(!o.visited){o.visited=!0;let a=this.regionQuery(o,i);a.length>=this.minPoints&&t.push(...a)}o.cluster===null&&(o.cluster=s,n.push(o.memory)),r++}return n}calculateDistance(e,t){if(this.distanceMetric==="cosine")return this.featureExtractor.cosineDistance(e,t);if(this.distanceMetric==="euclidean")return this.featureExtractor.euclideanDistance(e,t);throw new Error(`Unknown distance metric: ${this.distanceMetric}`)}calculateCentroid(e){if(e.length===0)return null;let t=e[0].features.length,s=new Array(t).fill(0);e.forEach(i=>{for(let n=0;n<t;n++)s[n]+=i.features[n]});for(let i=0;i<t;i++)s[i]/=e.length;return s}};u(Re,"DBSCANClusterer");var Z=Re,ke=class ke{constructor(e=3,t=100,s=1e-4,i="euclidean",n=null){this.k=e,this.maxIterations=t,this.tolerance=s,this.distanceMetric=i,this.featureExtractor=n||new N}cluster(e){let t=process.hrtime.bigint();if(e.length<this.k)throw new Error(`Cannot create ${this.k} clusters from ${e.length} data points`);let s=e.map(l=>({features:l.features,memory:l,cluster:null})),i=this.initializeCentroids(s),n=0,r=!1;for(;n<this.maxIterations&&!r;){this.assignPointsToClusters(s,i);let l=this.updateCentroids(s);r=this.hasConverged(i,l),i=l,n++}let o=this.createClusters(s,i),a=process.hrtime.bigint(),c=Number(a-t)/1e6;return{clusters:o,stats:{clusterCount:o.length,totalPoints:s.length,avgClusterSize:o.reduce((l,h)=>l+h.size,0)/o.length,inertia:this.calculateInertia(s,i)},parameters:{k:this.k,iterations:n,converged:r,distanceMetric:this.distanceMetric},duration:c}}initializeCentroids(e){let t=[],s=e[0].features.length,i=e[Math.floor(Math.random()*e.length)].features.slice();t.push(i);for(let n=1;n<this.k;n++){let r=e.map(l=>{let h=1/0;for(let d of t){let m=this.calculateDistance(l.features,d);h=Math.min(h,m)}return h*h}),o=r.reduce((l,h)=>l+h,0),a=Math.random()*o,c=0;for(let l=0;l<e.length;l++)if(c+=r[l],c>=a){t.push(e[l].features.slice());break}}return t}assignPointsToClusters(e,t){e.forEach(s=>{let i=1/0,n=0;t.forEach((r,o)=>{let a=this.calculateDistance(s.features,r);a<i&&(i=a,n=o)}),s.cluster=n})}updateCentroids(e){let t=e[0].features.length,s=[];for(let i=0;i<this.k;i++){let n=e.filter(o=>o.cluster===i);if(n.length===0){s.push(new Array(t).fill(0));continue}let r=new Array(t).fill(0);n.forEach(o=>{for(let a=0;a<t;a++)r[a]+=o.features[a]});for(let o=0;o<t;o++)r[o]/=n.length;s.push(r)}return s}hasConverged(e,t){for(let s=0;s<e.length;s++)if(this.calculateDistance(e[s],t[s])>this.tolerance)return!1;return!0}createClusters(e,t){let s=[];for(let i=0;i<this.k;i++){let n=e.filter(r=>r.cluster===i);n.length>0&&s.push({id:i,size:n.length,members:n.map(r=>r.memory),centroid:t[i]})}return s}calculateInertia(e,t){let s=0;return e.forEach(i=>{let n=t[i.cluster],r=this.calculateDistance(i.features,n);s+=r*r}),s}calculateDistance(e,t){if(this.distanceMetric==="cosine")return this.featureExtractor.cosineDistance(e,t);if(this.distanceMetric==="euclidean")return this.featureExtractor.euclideanDistance(e,t);throw new Error(`Unknown distance metric: ${this.distanceMetric}`)}};u(ke,"KMeansClusterer");var ee=ke,xe=class xe{static calculateSilhouetteScore(e,t,s=null){if(t.length<2)return 0;let i=s||new N,n=new Map;t.forEach((a,c)=>{a.members.forEach(l=>{n.set(l.id,c)})});let r=0,o=0;return e.forEach(a=>{let c=n.get(a.id);if(c===void 0)return;let l=t[c];if(l.size<2)return;let h=0,d=0;l.members.forEach(_=>{if(_.id!==a.id){let E=e.find(b=>b.id===_.id);E&&(h+=i.euclideanDistance(a.features,E.features),d++)}});let m=d>0?h/d:0,p=1/0;t.forEach((_,E)=>{if(E===c)return;let b=0,w=0;if(_.members.forEach(S=>{let v=e.find(C=>C.id===S.id);v&&(b+=i.euclideanDistance(a.features,v.features),w++)}),w>0){let S=b/w;p=Math.min(p,S)}});let y=p===1/0?0:p,f=Math.max(m,y)===0?0:(y-m)/Math.max(m,y);r+=f,o++}),o>0?r/o:0}static calculateDaviesBouldinIndex(e,t,s=null){if(t.length<2)return 0;let i=s||new N,n=t.map(a=>a.centroid),r=t.map((a,c)=>{let l=0;return a.members.forEach(h=>{let d=e.find(m=>m.id===h.id);d&&(l+=i.euclideanDistance(d.features,n[c]))}),a.size>0?l/a.size:0}),o=0;return t.forEach((a,c)=>{let l=0;t.forEach((h,d)=>{if(c===d)return;let m=i.euclideanDistance(n[c],n[d]);if(m>0){let p=(r[c]+r[d])/m;l=Math.max(l,p)}}),o+=l}),o/t.length}};u(xe,"ClusteringEvaluator");var L=xe,Oe=class Oe{constructor(e={}){this.featureExtractor=new N(e.features)}async clusterWithDBSCAN(e,t={}){if(e.length===0)return{clusters:[],noise:[],stats:{clusterCount:0,noiseCount:0,totalPoints:0,avgClusterSize:0},parameters:{epsilon:t.epsilon||.3,minPoints:t.minPoints||3,distanceMetric:t.distanceMetric||"cosine"},quality:{silhouetteScore:0,daviesBouldinIndex:0},algorithm:"DBSCAN",duration:0};let s=e.length,i=300;console.log(`\u{1F527} MCP SERVER DEBUG: DBSCAN analyzing ${s} memories - OPTIMIZATION ACTIVE!`);let n=e;if(s>i){console.log(`\u{1F4CA} DBSCAN optimization: ${s} \u2192 ${i} memories (avoiding ${Math.pow(s,2).toLocaleString()} distance calculations)`);let h=Math.floor(i*.5),d=i-h,m=e.slice(0,h),y=e.slice(h).sort(()=>.5-Math.random()).slice(0,d);n=[...m,...y],console.log(`\u{1F680} Complexity reduced: O(${Math.pow(n.length,2).toLocaleString()}) vs O(${Math.pow(s,2).toLocaleString()}) operations`)}let{vectors:r}=this.featureExtractor.extractFeatures(n),a=new Z(t.epsilon||.3,t.minPoints||3,t.distanceMetric||"cosine",this.featureExtractor).cluster(r),c=L.calculateSilhouetteScore(r,a.clusters,this.featureExtractor),l=L.calculateDaviesBouldinIndex(r,a.clusters,this.featureExtractor);return{...a,quality:{silhouetteScore:c,daviesBouldinIndex:l},algorithm:"DBSCAN"}}async clusterWithKMeans(e,t={}){if(e.length===0)return{clusters:[],stats:{clusterCount:0,totalPoints:0,avgClusterSize:0,inertia:0},parameters:{k:t.k||0,iterations:0,converged:!0,distanceMetric:t.distanceMetric||"euclidean"},quality:{silhouetteScore:0,daviesBouldinIndex:0},algorithm:"K-Means",duration:0};let{vectors:s}=this.featureExtractor.extractFeatures(e),i=t.k||Math.min(Math.ceil(Math.sqrt(e.length/2)),10),r=new ee(i,t.maxIterations||100,t.tolerance||1e-4,t.distanceMetric||"euclidean",this.featureExtractor).cluster(s),o=L.calculateSilhouetteScore(s,r.clusters,this.featureExtractor),a=L.calculateDaviesBouldinIndex(s,r.clusters,this.featureExtractor);return{...r,quality:{silhouetteScore:o,daviesBouldinIndex:a},algorithm:"K-Means"}}async autoClustering(e,t={}){let s=process.hrtime.bigint();if(e.length===0){let c={clusters:[],noise:[],stats:{clusterCount:0,noiseCount:0,totalPoints:0,avgClusterSize:0,inertia:0},parameters:{epsilon:t.epsilon||.3,minPoints:t.minPoints||3,k:t.k||0,iterations:0,converged:!0,distanceMetric:"euclidean"},quality:{silhouetteScore:0,daviesBouldinIndex:0},algorithm:"None",duration:0};return{bestResult:c,dbscanResult:c,kmeansResult:c,comparison:{dbscanSilhouette:0,kmeansSilhouette:0,selectedAlgorithm:"None",totalDuration:0}}}let i=await this.clusterWithDBSCAN(e,{epsilon:t.epsilon||.3,minPoints:t.minPoints||3,distanceMetric:"cosine"}),n=await this.clusterWithKMeans(e,{k:t.k||Math.min(Math.ceil(Math.sqrt(e.length/2)),8),distanceMetric:"euclidean"}),r=i.quality.silhouetteScore>n.quality.silhouetteScore?i:n,o=process.hrtime.bigint(),a=Number(o-s)/1e6;return{bestResult:r,dbscanResult:i,kmeansResult:n,comparison:{dbscanSilhouette:i.quality.silhouetteScore,kmeansSilhouette:n.quality.silhouetteScore,selectedAlgorithm:r.algorithm,totalDuration:a}}}};u(Oe,"ClusteringEngine");var Ae=Oe;Vi.exports={MemoryFeatureExtractor:N,DBSCANClusterer:Z,KMeansClusterer:ee,ClusteringEvaluator:L,ClusteringEngine:Ae}});var Yi=g((Rl,Xi)=>{var De=class De{constructor(e={}){this.batchSize=e.batchSize||20,this.maxTokensPerBatch=e.maxTokensPerBatch||15e3,this.progressCallback=e.progressCallback||null,this.analysisCache=e.analysisCache||null}async analyzeBatches(e,t={}){let s=Date.now(),i={batches:[],summary:{totalMemories:e.length,processedMemories:0,cachedMemories:0,batchesProcessed:0,clusters:new Map,errors:[]},progress:[]},n=e;if(this.analysisCache){let a=await this.analysisCache.filterUnanalyzedMemories(e);n=a.unanalyzed,i.summary.cachedMemories=a.alreadyAnalyzed,this.reportProgress({phase:"cache_check",cached:a.alreadyAnalyzed,toProcess:n.length,total:e.length})}let r=this.createTokenSafeBatches(n);for(let a=0;a<r.length;a++){let c=r[a];try{this.reportProgress({phase:"batch_start",batchNumber:a+1,totalBatches:r.length,batchSize:c.length,estimatedTokens:c.estimatedTokens});let l=await this.analyzeSingleBatch(c.memories,{...t,batchId:`batch_${a+1}`});i.batches.push({batchId:`batch_${a+1}`,size:c.length,result:l,duration:l.duration}),i.summary.processedMemories+=c.length,i.summary.batchesProcessed++,this.analysisCache&&l.clusterAssignments&&await this.analysisCache.markAsAnalyzed(c.memories,l.clusterAssignments,t.analysisVersion||"1.0"),this.reportProgress({phase:"batch_complete",batchNumber:a+1,processedSoFar:i.summary.processedMemories,totalToProcess:n.length,percentComplete:Math.round(i.summary.processedMemories/n.length*100)})}catch(l){i.summary.errors.push({batch:a+1,error:l.message}),this.reportProgress({phase:"batch_error",batchNumber:a+1,error:l.message})}a<r.length-1&&await this.delay(100)}let o=this.mergeBatchResults(i.batches);return i.finalAnalysis={...o,summary:{...i.summary,duration:Date.now()-s,averageBatchTime:i.batches.reduce((a,c)=>a+(c.duration||0),0)/i.batches.length}},this.reportProgress({phase:"complete",totalProcessed:i.summary.processedMemories,totalCached:i.summary.cachedMemories,totalBatches:i.summary.batchesProcessed,duration:Date.now()-s}),i}createTokenSafeBatches(e){let t=[],s=[],i=0;for(let n of e){let r=this.estimateTokens(n);s.length>0&&(i+r>this.maxTokensPerBatch||s.length>=this.batchSize)?(t.push({memories:s,estimatedTokens:i,length:s.length}),s=[n],i=r):(s.push(n),i+=r)}return s.length>0&&t.push({memories:s,estimatedTokens:i,length:s.length}),t}async analyzeSingleBatch(e,t={}){let{ClusteringEngine:s}=Ne(),i=new s,n=Date.now(),r=await i.clusterWithDBSCAN(e,{epsilon:t.epsilon||.3,minPoints:Math.min(3,Math.floor(e.length/4)),...t}),o=new Map;return r.clusters&&r.clusters.forEach((a,c)=>{let l=`${t.batchId}_cluster_${c}`,h=a.theme||`Cluster ${c+1}`;a.memories&&Array.isArray(a.memories)&&a.memories.forEach(d=>{o.set(d.id,{id:l,theme:h})})}),{...r,clusterAssignments:o,batchId:t.batchId,duration:Date.now()-n}}mergeBatchResults(e){let t={totalClusters:0,clusters:[],noise:[],stats:{totalMemories:0,clusteredMemories:0,noiseMemories:0}};for(let s of e)s.result.clusters&&t.clusters.push(...s.result.clusters.map(i=>({...i,batchId:s.batchId}))),s.result.noise&&t.noise.push(...s.result.noise),t.stats.totalMemories+=s.size;return t.totalClusters=t.clusters.length,t.stats.clusteredMemories=t.stats.totalMemories-t.noise.length,t.stats.noiseMemories=t.noise.length,t}estimateTokens(e){let t=0;return e.content&&(t+=e.content.length),e.tags&&(t+=JSON.stringify(e.tags).length),e.metadata&&(t+=JSON.stringify(e.metadata).length),Math.ceil(t/4)}reportProgress(e){this.progressCallback&&this.progressCallback(e)}delay(e){return new Promise(t=>setTimeout(t,e))}async*analyzeIncremental(e,t={}){var n,r;let s=this.createTokenSafeBatches(e),i={processedBatches:0,totalBatches:s.length,clusters:[],summary:{}};for(let o=0;o<s.length;o++){let a=s[o];yield{type:"progress",batchNumber:o+1,totalBatches:s.length,processing:a.length};let c=await this.analyzeSingleBatch(a.memories,{...t,batchId:`batch_${o+1}`});i.processedBatches++,i.clusters.push(...c.clusters||[]),yield{type:"batch_complete",batchNumber:o+1,result:{clusters:((n=c.clusters)==null?void 0:n.length)||0,noise:((r=c.noise)==null?void 0:r.length)||0,duration:c.duration},cumulativeProgress:{processedBatches:i.processedBatches,totalClusters:i.clusters.length}}}yield{type:"complete",finalResults:i}}};u(De,"BatchAnalysisEngine");var Ie=De;Xi.exports={BatchAnalysisEngine:Ie}});var Qi=g((xl,Ji)=>{var Fe=class Fe{constructor(){this.nodes=new Map,this.edges=new Map,this.edgeWeights=new Map}addNode(e,t){this.nodes.set(e,{id:e,...t,pagerank:1,community:null,degree:0}),this.edges.has(e)||this.edges.set(e,new Set)}addEdge(e,t,s=1){if(!this.nodes.has(e)||!this.nodes.has(t))throw new Error(`Both nodes must exist before adding edge: ${e} -> ${t}`);this.edges.get(e).add(t),this.edges.get(t).add(e),this.edgeWeights.set(`${e}-${t}`,s),this.edgeWeights.set(`${t}-${e}`,s),this.nodes.get(e).degree++,this.nodes.get(t).degree++}getNeighbors(e){return Array.from(this.edges.get(e)||new Set)}getEdgeWeight(e,t){return this.edgeWeights.get(`${e}-${t}`)||0}getAllNodes(){return Array.from(this.nodes.values())}getNode(e){return this.nodes.get(e)}getStats(){let e=this.nodes.size,t=Array.from(this.edges.values()).reduce((r,o)=>r+o.size,0)/2,s=Array.from(this.nodes.values()).map(r=>r.degree),i=s.reduce((r,o)=>r+o,0)/e||0,n=Math.max(...s,0);return{nodes:e,edges:t,averageDegree:i,maxDegree:n,density:e>1?2*t/(e*(e-1)):0}}};u(Fe,"MemoryGraph");var te=Fe,$e=class $e{constructor(e=.85,t=100,s=1e-6){this.dampingFactor=e,this.maxIterations=t,this.tolerance=s}calculatePageRank(e){let t=process.hrtime.bigint(),s=e.getAllNodes();if(s.length===0)return{rankings:[],iterations:0,converged:!0,duration:0};let n=new Map,r=new Map;s.forEach(d=>{n.set(d.id,1),r.set(d.id,0)});let o=0,a=!1;for(;o<this.maxIterations&&!a;){s.forEach(p=>r.set(p.id,0)),s.forEach(p=>{let y=e.getNeighbors(p.id),f=y.length;if(f>0){let _=n.get(p.id)/f;y.forEach(E=>{let b=e.getEdgeWeight(p.id,E),w=_*b;r.set(E,r.get(E)+w)})}});let d=1-this.dampingFactor;s.forEach(p=>{let y=this.dampingFactor*r.get(p.id)+d;r.set(p.id,y)});let m=0;s.forEach(p=>{let y=Math.abs(r.get(p.id)-n.get(p.id));m=Math.max(m,y)}),a=m<this.tolerance,s.forEach(p=>{n.set(p.id,r.get(p.id)),e.getNode(p.id).pagerank=r.get(p.id)}),o++}let c=s.map(d=>({id:d.id,pagerank:n.get(d.id),content:d.content,memory_type:d.memory_type,degree:d.degree})).sort((d,m)=>m.pagerank-d.pagerank),l=process.hrtime.bigint(),h=Number(l-t)/1e6;return{rankings:c,iterations:o,converged:a,duration:h,dampingFactor:this.dampingFactor,tolerance:this.tolerance}}};u($e,"PageRankAnalyzer");var se=$e,Pe=class Pe{constructor(e=100,t=null){this.maxIterations=e,this.randomSeed=t}detectCommunities(e){let t=process.hrtime.bigint(),s=e.getAllNodes();if(s.length===0)return{communities:[],stats:{communityCount:0,modularity:0},iterations:0,duration:0};let n=new Map;s.forEach((m,p)=>{n.set(m.id,p),m.community=p});let r=0,o=!0;for(;r<this.maxIterations&&o;)o=!1,[...s].sort(()=>Math.random()-.5).forEach(p=>{let y=e.getNeighbors(p.id);if(y.length===0)return;let f=new Map;y.forEach(b=>{let w=n.get(b),S=e.getEdgeWeight(p.id,b);f.set(w,(f.get(w)||0)+S)});let _=0,E=n.get(p.id);f.forEach((b,w)=>{b>_&&(_=b,E=w)}),E!==n.get(p.id)&&(n.set(p.id,E),p.community=E,o=!0)}),r++;let a=new Map;s.forEach(m=>{let p=n.get(m.id);a.has(p)||a.set(p,[]),a.get(p).push({id:m.id,content:m.content,memory_type:m.memory_type,pagerank:m.pagerank})});let c=Array.from(a.entries()).map(([m,p])=>({id:m,size:p.length,members:p,avgPageRank:p.reduce((y,f)=>y+f.pagerank,0)/p.length})).sort((m,p)=>p.size-m.size),l=this.calculateModularity(e,n),h=process.hrtime.bigint(),d=Number(h-t)/1e6;return{communities:c,stats:{communityCount:c.length,modularity:l,largestCommunitySize:c.length>0?c[0].size:0,smallestCommunitySize:c.length>0?c[c.length-1].size:0},iterations:r,duration:d}}calculateModularity(e,t){let s=e.getAllNodes(),i=e.getStats().edges*2;if(i===0)return 0;let n=0;return s.forEach(r=>{s.forEach(o=>{if(r.id<=o.id)return;let a=e.getEdgeWeight(r.id,o.id),c=r.degree*o.degree/i,l=t.get(r.id)===t.get(o.id)?1:0;n+=(a-c)*l})}),n/i}};u(Pe,"CommunityDetector");var ie=Pe,ze=class ze{constructor(e={}){this.similarityThreshold=e.similarityThreshold||.1,this.temporalWindowHours=e.temporalWindowHours||24,this.tagWeightMultiplier=e.tagWeightMultiplier||2,this.typeWeightMultiplier=e.typeWeightMultiplier||1.5}buildGraph(e){let t=process.hrtime.bigint(),s=new te;e.forEach(a=>{s.addNode(a.id,{content:a.content,memory_type:a.memory_type,timestamp:new Date(a.timestamp),tags:a.tags||[],confidence_score:a.confidence_score||1})});let n=e.sort((a,c)=>new Date(c.timestamp)-new Date(a.timestamp)).slice(0,200);for(let a=0;a<n.length;a++){let c=Math.min(20,n.length-a-1);for(let l=a+1;l<=a+c&&!(l>=n.length);l++){let h=n[a],d=n[l],m=this.calculateSimilarity(h,d);m>this.similarityThreshold&&s.addEdge(h.id,d.id,m)}}let r=process.hrtime.bigint(),o=Number(r-t)/1e6;return{graph:s,buildStats:{nodeCount:s.nodes.size,edgeCount:s.getStats().edges,duration:o,similarityThreshold:this.similarityThreshold}}}calculateSimilarity(e,t){let s=0,i=this.calculateContentSimilarity(e.content,t.content);s+=i*.4;let n=this.calculateTagSimilarity(e.tags||[],t.tags||[]);s+=n*.3*this.tagWeightMultiplier;let r=e.memory_type===t.memory_type?1:0;s+=r*.2*this.typeWeightMultiplier;let o=this.calculateTemporalSimilarity(new Date(e.timestamp),new Date(t.timestamp));return s+=o*.1,Math.min(s,1)}calculateContentSimilarity(e,t){let s=new Set(e.toLowerCase().split(/\s+/).filter(o=>o.length>2)),i=new Set(t.toLowerCase().split(/\s+/).filter(o=>o.length>2)),n=new Set([...s].filter(o=>i.has(o))),r=new Set([...s,...i]);return r.size>0?n.size/r.size:0}calculateTagSimilarity(e,t){let s=new Set(e),i=new Set(t),n=new Set([...s].filter(o=>i.has(o))),r=new Set([...s,...i]);return r.size>0?n.size/r.size:0}calculateTemporalSimilarity(e,t){let s=Math.abs(e-t)/36e5;return s>this.temporalWindowHours?0:1-s/this.temporalWindowHours}};u(ze,"MemoryRelationshipAnalyzer");var ne=ze,qe=class qe{constructor(e={}){var t,s,i,n,r;this.relationshipAnalyzer=new ne(e.relationship||{}),this.pageRankAnalyzer=new se((t=e.pagerank)==null?void 0:t.dampingFactor,(s=e.pagerank)==null?void 0:s.maxIterations,(i=e.pagerank)==null?void 0:i.tolerance),this.communityDetector=new ie((n=e.community)==null?void 0:n.maxIterations,(r=e.community)==null?void 0:r.randomSeed)}async analyzeMemories(e,t={}){let s=process.hrtime.bigint(),i=e.length,n=1e4;console.log(`\u{1F527} MCP SERVER DEBUG: Graph analysis analyzing ${i} memories - OPTIMIZATION ACTIVE!`);let r=e;if(i>n){console.log(`\u{1F4CA} Graph analysis optimization: ${i} \u2192 ${n} memories (avoiding ${Math.pow(i,2).toLocaleString()} graph operations)`);let p=Math.floor(n*.4),y=Math.floor(n*.3),f=n-p-y,_=e.slice(0,p),E=e.filter(S=>S.confidence_score>.8).slice(0,y),w=e.slice(p).sort(()=>.5-Math.random()).slice(0,f);r=[..._,...E,...w],console.log(`\u{1F680} Graph complexity reduced: O(${Math.pow(r.length,2).toLocaleString()}) vs O(${Math.pow(i,2).toLocaleString()}) operations`)}let{graph:o,buildStats:a}=this.relationshipAnalyzer.buildGraph(r),c=this.pageRankAnalyzer.calculatePageRank(o),l=this.communityDetector.detectCommunities(o),h=o.getStats(),d=process.hrtime.bigint(),m=Number(d-s)/1e6;return{graph:{nodes:o.getAllNodes(),stats:h,buildStats:a},pagerank:c,communities:l,analysis:{totalDuration:m,memoryCount:e.length,relationshipCount:h.edges,communityCount:l.stats.communityCount,topMemoriesByImportance:c.rankings.slice(0,10),largestCommunities:l.communities.slice(0,5)}}}};u(qe,"GraphAnalysisEngine");var Le=qe;Ji.exports={MemoryGraph:te,PageRankAnalyzer:se,CommunityDetector:ie,MemoryRelationshipAnalyzer:ne,GraphAnalysisEngine:Le}});var z=g((Nl,Ki)=>{var Ue=class Ue{constructor(){this.stopWords=new Set(["the","a","an","and","or","but","in","on","at","to","for","of","with","by","from","up","about","into","through","during","before","after","above","below","is","are","was","were","be","been","being","have","has","had","do","does","did","will","would","could","should","may","might","must","can","shall","this","that","these","those","i","me","my","myself","we","our","ours","ourselves","you","your","yours","yourself","yourselves","he","him","his","himself","she","her","hers","herself","it","its","itself","they","them","their","theirs","themselves"])}tokenize(e){return!e||typeof e!="string"?[]:e.toLowerCase().replace(/[^\w\s]/g," ").split(/\s+/).filter(t=>t.length>2&&!this.stopWords.has(t)).filter(Boolean)}calculateTermFrequency(e){let t={},s=e.length;for(let i of e)t[i]=(t[i]||0)+1;for(let i in t)t[i]=t[i]/s;return t}getAllTerms(e){let t=new Set;for(let s of e){let i=this.tokenize(s.content);for(let n of i)t.add(n)}return Array.from(t)}};u(Ue,"TextProcessor");var I=Ue,Be=class Be{constructor(){this.textProcessor=new I,this.idfCache=new Map}calculateIDF(e,t){let s=`${e}_${t.length}`;if(this.idfCache.has(s))return this.idfCache.get(s);let i=t.filter(r=>this.textProcessor.tokenize(r.content).includes(e)).length;if(i===0)return this.idfCache.set(s,0),0;let n=Math.log((t.length+1)/(i+1));return this.idfCache.set(s,n),n}calculateTFIDF(e,t,s){let i=this.textProcessor.tokenize(e),n=this.textProcessor.tokenize(t.content),r=this.textProcessor.calculateTermFrequency(n),o=0,a=0;for(let c of i){let l=r[c]||0;if(l>0){a++;let h=this.calculateIDF(c,s),d=h>0?l*h:l*.1;o+=d}}return a>0?o/Math.sqrt(i.length):0}rank(e,t){let s=process.hrtime.bigint();if(!e||e.trim()==="")return{results:[],algorithm:"precise",duration:0,totalDocuments:t.length,rankedDocuments:0};let i=t,n=!1;if(t.length>1e3){let h=Math.min(500,Math.floor(t.length*.1)),d=[],m=Math.floor(t.length/h);for(let y=0;y<t.length;y+=m)d.push(t[y]);let p=this.textProcessor.tokenize(e);for(let y of p)this.calculateIDF(y,d);n=!0,console.log(`\u26A1 TF-IDF: Using sampling strategy (${h} samples from ${t.length} docs)`)}let r=[],o=this.textProcessor.tokenize(e);for(let h=0;h<t.length;h++){let d=t[h],m=d.content.toLowerCase();if(!o.some(f=>m.includes(f)))continue;let y=this.calculateTFIDF(e,d,n?[]:t);if(y>0&&r.push({...d,tfidf_score:y}),r.length>100&&h>t.length*.3){console.log(`\u26A1 TF-IDF: Early termination at ${h}/${t.length} docs`);break}}let a=r.sort((h,d)=>d.tfidf_score-h.tfidf_score),c=process.hrtime.bigint(),l=Number(c-s)/1e6;return{results:a,algorithm:"precise",duration:l,totalDocuments:t.length,rankedDocuments:a.length,sampled:n}}};u(Be,"TFIDFRanker");var V=Be,We=class We{constructor(e=1.2,t=.75){this.k1=e,this.b=t,this.textProcessor=new I,this.avgDocLength=0,this.documentLengths=new Map,this.termDocumentFrequency=new Map}preprocessDocuments(e,t=null){let s=t&&e.length>1e3?e.filter(n=>{let r=n.content.toLowerCase();return t.some(o=>r.includes(o))}):e;s.length<e.length&&console.log(`\u26A1 BM25: Processing ${s.length}/${e.length} relevant docs`),this.documentLengths.clear(),this.termDocumentFrequency.clear();let i=0;for(let n of s){let r=this.textProcessor.tokenize(n.content),o=r.length;this.documentLengths.set(n.id,o),i+=o;let a=t&&e.length>1e3?r.filter(l=>t.includes(l)):r,c=new Set(a);for(let l of c)this.termDocumentFrequency.set(l,(this.termDocumentFrequency.get(l)||0)+1)}this.avgDocLength=i/Math.max(s.length,1),this.totalDocCount=e.length}calculateBM25(e,t,s){let i=this.textProcessor.tokenize(e),n=this.textProcessor.tokenize(t.content),r=this.documentLengths.get(t.id)||n.length,o={};for(let c of n)o[c]=(o[c]||0)+1;let a=0;for(let c of i){let l=o[c]||0;if(l===0)continue;let h=this.termDocumentFrequency.get(c)||0;if(h===0)continue;let d=Math.max(.1,Math.log((s.length-h+.5)/(h+.5))),m=l*(this.k1+1),p=l+this.k1*(1-this.b+this.b*(r/this.avgDocLength));a+=d*(m/p)}return Math.max(0,a)}rank(e,t){let s=process.hrtime.bigint();if(!e||e.trim()==="")return{results:[],algorithm:"fast",duration:0,totalDocuments:t.length,rankedDocuments:0};let i=this.textProcessor.tokenize(e);this.preprocessDocuments(t,i);let n=t.length>1e3?t.filter(l=>{let h=l.content.toLowerCase();return i.some(d=>h.includes(d))}):t;n.length<t.length&&console.log(`\u26A1 BM25: Scoring ${n.length}/${t.length} relevant docs`);let r=[];for(let l of n){let h=this.calculateBM25(e,l,t);if(h>0&&r.push({...l,bm25_score:h}),r.length>200&&n.length>500){console.log(`\u26A1 BM25: Early termination with ${r.length} results`);break}}let o=r.sort((l,h)=>h.bm25_score-l.bm25_score),a=process.hrtime.bigint(),c=Number(a-s)/1e6;return{results:o,algorithm:"fast",duration:c,totalDocuments:t.length,rankedDocuments:o.length}}};u(We,"BM25Ranker");var X=We,He=class He{constructor(){this.tfidfRanker=new V,this.bm25Ranker=new X}rank(e,t,s={}){let{tfidfWeight:i=.3,bm25Weight:n=.7,confidenceWeight:r=.2,recencyWeight:o=.1,pagerankWeight:a=.15,pagerankScores:c=new Map}=s,l=process.hrtime.bigint();if(!e||e.trim()==="")return{results:[],algorithm:"smart",duration:0,totalDocuments:t.length,rankedDocuments:0,performance:{tfidf_duration:0,bm25_duration:0,total_duration:0}};let h=t;if(t.length>1e3){let C=this.tfidfRanker.textProcessor.tokenize(e);h=t.filter(O=>{let $=O.content.toLowerCase();return C.some(B=>$.includes(B))}),console.log(`\u26A1 Hybrid: Pre-filtered to ${h.length}/${t.length} relevant docs`),h.length>2e3&&(h=h.slice(0,2e3),console.log("\u26A1 Hybrid: Limited to 2000 most recent relevant docs"))}let d=this.tfidfRanker.rank(e,h),m=this.bm25Ranker.rank(e,h),p=new Map,y=new Map;for(let C of d.results)p.set(C.id,C.tfidf_score);for(let C of m.results)y.set(C.id,C.bm25_score);let f=Math.max(...d.results.map(C=>C.tfidf_score),0),_=Math.max(...m.results.map(C=>C.bm25_score),0),E=new Set([...p.keys(),...y.keys()]),w=t.filter(C=>E.has(C.id)).map(C=>{let O=(p.get(C.id)||0)/(f||1),$=(y.get(C.id)||0)/(_||1),B=C.confidence_score||1,ye=(Date.now()-new Date(C.timestamp).getTime())/(1e3*60*60*24),zi=Math.exp(-ye/30),qi=c.get(C.id)||0,ma=O*i+$*n+B*r+zi*o+qi*a;return{...C,hybrid_score:ma,component_scores:{tfidf:O,bm25:$,confidence:B,recency:zi,pagerank:qi}}}).filter(C=>{if(p.has(C.id)||y.has(C.id))return!0;let O=new I().tokenize(e),$=new I().tokenize(C.content);return O.some(ye=>$.includes(ye))}).sort((C,O)=>O.hybrid_score-C.hybrid_score),S=process.hrtime.bigint(),v=Number(S-l)/1e6;return{results:w,algorithm:"Hybrid (TF-IDF + BM25 + Confidence + Recency)",duration:v,totalDocuments:t.length,rankedDocuments:w.length,performance:{tfidf_duration:d.duration,bm25_duration:m.duration,total_duration:v}}}};u(He,"HybridRanker");var re=He,Ge=class Ge{constructor(e="hybrid"){this.algorithm=e,this.rankers={tfidf:new V,bm25:new X,hybrid:new re}}search(e,t,s={}){let i=this.rankers[this.algorithm];if(!i)throw new Error(`Unknown algorithm: ${this.algorithm}`);if(!e||e.trim()==="")return{results:[],algorithm:this.algorithm,duration:0,totalDocuments:t.length,rankedDocuments:0,performance_metrics:{algorithm:this.algorithm,query_terms:0,documents_processed:t.length,results_returned:0,processing_time_ms:0}};let n=i.rank(e,t,s);return n.performance_metrics={algorithm:this.algorithm,query_terms:new I().tokenize(e).length,documents_processed:t.length,results_returned:n.rankedDocuments,processing_time_ms:n.duration},n}setAlgorithm(e){if(!this.rankers[e])throw new Error(`Unknown algorithm: ${e}. Available: ${Object.keys(this.rankers).join(", ")}`);process.env.NOVA_MCP_MODE||console.error(`\u{1F504} Search algorithm changed: ${this.algorithm} \u2192 ${e}`),this.algorithm=e}getAvailableAlgorithms(){return Object.keys(this.rankers)}};u(Ge,"AdvancedSearchEngine");var je=Ge;Ki.exports={TextProcessor:I,TFIDFRanker:V,BM25Ranker:X,HybridRanker:re,AdvancedSearchEngine:je}});var rt=g((Dl,Zi)=>{var{TextProcessor:fa}=z(),Ze=class Ze{constructor(e=[]){this.termToDocuments=new Map,this.documentCount=0,this.lastUpdate=0,e.length>0&&this.buildIndex(e)}buildIndex(e){let t=process.hrtime.bigint();this.termToDocuments.clear(),this.documentCount=e.length;let s=new fa;for(let r of e){let o=s.tokenize(r.content);for(let a of o)this.termToDocuments.has(a)||this.termToDocuments.set(a,new Set),this.termToDocuments.get(a).add(r.id)}let i=process.hrtime.bigint(),n=Number(i-t)/1e6;console.log(`\u{1F4CA} Inverted index built: ${this.termToDocuments.size} terms, ${this.documentCount} docs (${n.toFixed(2)}ms)`),Array.from(this.termToDocuments.keys()).some(r=>r.includes("oauth"))&&console.error("DEBUG InvertedIndex build found OAuth terms:",Array.from(this.termToDocuments.entries()).filter(([r])=>r.includes("oauth")).map(([r,o])=>({term:r,docIds:Array.from(o)}))),this.lastUpdate=Date.now()}getDocumentsWithTerm(e){let t=this.termToDocuments.get(e);return e.includes("oauth")&&console.error(`DEBUG getDocumentsWithTerm('${e}'):`,{found:!!t,docIds:t?Array.from(t):[],availableTerms:Array.from(this.termToDocuments.keys()).filter(s=>s.includes("oauth"))}),t?Array.from(t):[]}getDocumentsWithAllTerms(e){if(e.length===0)return[];let t=new Set(this.getDocumentsWithTerm(e[0]));for(let s=1;s<e.length;s++){let i=new Set(this.getDocumentsWithTerm(e[s]));if(t=new Set([...t].filter(n=>i.has(n))),t.size===0)break}return Array.from(t)}getDocumentsWithAnyTerms(e){let t=new Set;for(let s of e){let i=this.getDocumentsWithTerm(s);for(let n of i)t.add(n)}return Array.from(t)}getStats(){return{termCount:this.termToDocuments.size,documentCount:this.documentCount,lastUpdate:this.lastUpdate,averageTermsPerDoc:this.termToDocuments.size/this.documentCount}}};u(Ze,"InvertedIndex");var Ve=Ze,et=class et{constructor(e=1e3,t=3e5){this.cache=new Map,this.maxSize=e,this.ttl=t,this.stats={hits:0,misses:0,evictions:0}}generateKey(e,t,s={}){let i=JSON.stringify(s);return`${t}:${e}:${i}`}get(e,t,s={}){let i=this.generateKey(e,t,s),n=this.cache.get(i);return n?Date.now()-n.timestamp>this.ttl?(this.cache.delete(i),this.stats.misses++,null):(this.stats.hits++,n.result):(this.stats.misses++,null)}set(e,t,s,i={}){let n=this.generateKey(e,t,i);if(this.cache.size>=this.maxSize){let r=this.cache.keys().next().value;this.cache.delete(r),this.stats.evictions++}this.cache.set(n,{result:s,timestamp:Date.now()})}clear(){this.cache.clear(),this.stats.hits=0,this.stats.misses=0,this.stats.evictions=0}getStats(){return{...this.stats,size:this.cache.size,hitRate:this.stats.hits/(this.stats.hits+this.stats.misses),maxSize:this.maxSize,ttl:this.ttl}}};u(et,"QueryCache");var Xe=et,tt=class tt{constructor(e,t,s=100){this.tfidfRanker=e,this.bm25Ranker=t,this.initialCandidates=s}async search(e,t,s={}){let i=process.hrtime.bigint(),n=process.hrtime.bigint(),r=this.tfidfRanker.rank(e,t),o=process.hrtime.bigint(),a=r.results.slice(0,this.initialCandidates),c=process.hrtime.bigint(),l=this.bm25Ranker.rank(e,a),h=process.hrtime.bigint(),d=process.hrtime.bigint();return{results:l.results,algorithm:"Fast-First (TF-IDF \u2192 BM25)",duration:Number(d-i)/1e6,totalDocuments:t.length,rankedDocuments:l.results.length,performance:{tfidf_duration:Number(o-n)/1e6,bm25_duration:Number(h-c)/1e6,total_duration:Number(d-i)/1e6,candidates_filtered:this.initialCandidates}}}};u(tt,"FastFirstStrategy");var Ye=tt,st=class st{constructor(e=.8,t=10){this.confidenceThreshold=e,this.minResults=t}optimize(e,t,s,i={}){let n=process.hrtime.bigint(),r=50,o=[],a=0;for(let l=0;l<s.length;l+=r){let h=s.slice(l,l+r),d=e.rank(t,h);if(o=o.concat(d.results),a+=h.length,o.sort((m,p)=>(p.hybrid_score||p.bm25_score||p.tfidf_score)-(m.hybrid_score||m.bm25_score||m.tfidf_score)),o.length>=this.minResults&&(o[0].hybrid_score||o[0].bm25_score||o[0].tfidf_score)>=this.confidenceThreshold){console.log(`\u{1F680} Early termination: ${a}/${s.length} docs processed`);break}}let c=process.hrtime.bigint();return{results:o,algorithm:`${e.constructor.name} (Early Termination)`,duration:Number(c-n)/1e6,totalDocuments:s.length,processedDocuments:a,rankedDocuments:o.length,earlyTermination:a<s.length}}};u(st,"EarlyTerminationOptimizer");var Je=st,it=class it{constructor(e={}){this.phases={invertedIndex:e.invertedIndex??!0,queryCache:e.queryCache??!0,fastFirst:e.fastFirst??!1,earlyTermination:e.earlyTermination??!1},this.invertedIndexConfig={enabled:this.phases.invertedIndex,rebuildThreshold:e.rebuildThreshold??100},this.queryCacheConfig={enabled:this.phases.queryCache,maxSize:e.cacheMaxSize??1e3,ttl:e.cacheTTL??3e5},this.fastFirstConfig={enabled:this.phases.fastFirst,initialCandidates:e.initialCandidates??100},this.earlyTerminationConfig={enabled:this.phases.earlyTermination,confidenceThreshold:e.confidenceThreshold??.8,minResults:e.minResults??10}}hasOptimizations(){return Object.values(this.phases).some(e=>e)}getEnabledPhases(){return Object.keys(this.phases).filter(e=>this.phases[e])}};u(it,"OptimizationConfig");var Qe=it,nt=class nt{static normalizeQuery(e){return!e||typeof e!="string"?"":e.trim().toLowerCase()}static removeStopWords(e){if(!e||typeof e!="string")return[];let t=new Set(["the","a","an","and","or","but","in","on","at","to","for","of","with","by","is","are","was","were","be","been","have","has","had","do","does","did","will","would","could","should"]);return e.split(" ").filter(s=>!t.has(s.toLowerCase()))}static stemWords(e){return!e||!Array.isArray(e)?[]:e.map(t=>{if(!t||typeof t!="string")return"";let s=["ing","ed","er","est","s","es","ies","ly"],i=t.toLowerCase();for(let n of s)if(i.endsWith(n)&&i.length>n.length+2){i=i.slice(0,-n.length);break}return i})}static expandAbbreviations(e){let t={ML:"machine learning",AI:"artificial intelligence",DL:"deep learning",NLP:"natural language processing",API:"application programming interface",UI:"user interface",UX:"user experience"},s=e;for(let[i,n]of Object.entries(t)){let r=new RegExp(`\\b${i}\\b`,"gi");s=s.replace(r,n)}return s}static calculateBoostFactor(e){var s,i;let t=1;return e.type==="important"&&(t*=1.5),e.type==="critical"&&(t*=2),((s=e.metadata)==null?void 0:s.priority)==="high"&&(t*=1.3),((i=e.metadata)==null?void 0:i.priority)==="critical"&&(t*=1.8),t}static applyTemporalRanking(e){let t=new Date,s=new Date(e.timestamp),i=(t-s)/(1e3*60*60*24);return Math.exp(-i/30)}static calculateSimilarity(e,t){let s=e.toLowerCase().split(" "),i=t.toLowerCase().split(" "),n=s.filter(o=>i.includes(o)),r=[...new Set([...s,...i])];return n.length/r.length}static optimizeQuery(e,t={}){let s=this.normalizeQuery(e);if(t.expandAbbreviations&&(s=this.expandAbbreviations(s)),t.removeStopWords&&(s=this.removeStopWords(s).join(" ")),t.stemWords){let i=s.split(" ");s=this.stemWords(i).join(" ")}return s}static createSearchIndex(e){let t=new Map;return e.forEach(s=>{s.content.toLowerCase().split(/\s+/).forEach(n=>{t.has(n)||t.set(n,[]),t.get(n).push(s.id)})}),Object.fromEntries(t)}static optimizeIndex(e){let t={};for(let[s,i]of Object.entries(e))t[s]=[...new Set(i)].sort((n,r)=>n-r);return t}static compressIndexData(e){return{compressed:!0,originalSize:JSON.stringify(e).length,compressedData:Object.keys(e).length}}static trackSearchMetrics(e,t,s){return{query:e,executionTime:t,resultCount:s,timestamp:new Date().toISOString(),efficiency:s/t}}static analyzeQueryPatterns(e){let t={totalQueries:e.length,averageLength:e.reduce((s,i)=>s+i.length,0)/e.length,mostCommonWords:{},queryTypes:{},commonTerms:[]};return e.forEach(s=>{s.toLowerCase().split(" ").forEach(n=>{t.mostCommonWords[n]=(t.mostCommonWords[n]||0)+1})}),t.commonTerms=Object.keys(t.mostCommonWords).sort((s,i)=>t.mostCommonWords[i]-t.mostCommonWords[s]),t}static generatePerformanceReport(e){let t=e.reduce((s,i)=>s+i.executionTime,0)/e.length;return{totalSearches:e.length,averageExecutionTime:t,averageTime:t,slowestQuery:e.reduce((s,i)=>i.executionTime>s.executionTime?i:s,e[0]),fastestQuery:e.reduce((s,i)=>i.executionTime<s.executionTime?i:s,e[0])}}static optimizeMemoryUsage(e){return{originalSize:JSON.stringify(e).length,optimizedSize:JSON.stringify(e).length*.8,memoryReduction:"20%"}}static cleanupResources(e){return e.cache&&(e.cache={}),e.index&&(e.index={}),!0}static manageCacheSize(e,t){for(;e.size>t;){let s=e.keys().next().value;e.delete(s)}}static safeFallback(e,t){try{return e()}catch{return t}}};u(nt,"SearchOptimizations");var Ke=nt;Zi.exports={InvertedIndex:Ve,QueryCache:Xe,FastFirstStrategy:Ye,EarlyTerminationOptimizer:Je,OptimizationConfig:Qe,SearchOptimizations:Ke}});var sn=g((zl,tn)=>{var{AdvancedSearchEngine:_a,TFIDFRanker:Fl,BM25Ranker:$l,HybridRanker:Pl}=z(),{InvertedIndex:Ea,QueryCache:ba,FastFirstStrategy:wa,EarlyTerminationOptimizer:Ta,OptimizationConfig:en}=rt(),at=class at extends _a{constructor(e="hybrid",t={}){super(e),this.optimizationConfig=new en(t),this.invertedIndex=null,this.queryCache=null,this.fastFirstStrategy=null,this.earlyTerminationOptimizer=null,this.documentCount=0,this.lastIndexUpdate=0,this.performanceStats={totalQueries:0,cacheHits:0,indexUsage:0,fastFirstUsage:0,earlyTerminations:0},this.initializeOptimizations()}initializeOptimizations(){this.optimizationConfig.queryCacheConfig.enabled&&(this.queryCache=new ba(this.optimizationConfig.queryCacheConfig.maxSize,this.optimizationConfig.queryCacheConfig.ttl)),this.optimizationConfig.fastFirstConfig.enabled&&(this.fastFirstStrategy=new wa(this.rankers.tfidf,this.rankers.bm25,this.optimizationConfig.fastFirstConfig.initialCandidates)),this.optimizationConfig.earlyTerminationConfig.enabled&&(this.earlyTerminationOptimizer=new Ta(this.optimizationConfig.earlyTerminationConfig.confidenceThreshold,this.optimizationConfig.earlyTerminationConfig.minResults)),process.env.NOVA_MCP_MODE||console.error(`\u{1F680} Optimized search engine initialized with phases: ${this.optimizationConfig.getEnabledPhases().join(", ")}`)}updateInvertedIndex(e){if(!this.optimizationConfig.invertedIndexConfig.enabled)return;let t=!this.invertedIndex||e.length!==this.documentCount||Math.abs(e.length-this.documentCount)>this.optimizationConfig.invertedIndexConfig.rebuildThreshold;e.some(s=>s.content&&s.content.toLowerCase().includes("oauth"))&&console.error("DEBUG updateInvertedIndex:",{shouldRebuild:t,hasIndex:!!this.invertedIndex,documentsLength:e.length,documentCount:this.documentCount,threshold:this.optimizationConfig.invertedIndexConfig.rebuildThreshold}),t&&(this.invertedIndex=new Ea(e),this.documentCount=e.length,this.lastIndexUpdate=Date.now())}getCandidateDocuments(e,t){if(!this.optimizationConfig.invertedIndexConfig.enabled||!this.invertedIndex)return t;let i=new(z()).TextProcessor().tokenize(e);if(i.length===0)return[];let n=this.invertedIndex.getDocumentsWithAnyTerms(i);e.toLowerCase().includes("oauth")&&console.error("DEBUG getCandidateDocuments:",{queryTokens:i,candidateIds:n,allDocumentIds:t.map(o=>o.id),firstDoc:t[0]?{id:t[0].id,content:t[0].content.substring(0,50)}:null});let r=t.filter(o=>n.includes(o.id));return this.performanceStats.indexUsage++,console.log(`\u{1F4CA} Index filter: ${r.length}/${t.length} documents (${(r.length/t.length*100).toFixed(1)}%)`),r}search(e,t,s={}){var h,d;let i=process.hrtime.bigint();if(this.performanceStats.totalQueries++,!e||e.trim()==="")return{results:[],algorithm:this.algorithm,duration:0,totalDocuments:t.length,rankedDocuments:0,optimizations:this.optimizationConfig.getEnabledPhases(),performance_metrics:{algorithm:this.algorithm,query_terms:0,documents_processed:t.length,results_returned:0,processing_time_ms:0,optimizations_used:[]}};let n=[];if(this.queryCache){let m=this.queryCache.get(e,this.algorithm,s);if(m){this.performanceStats.cacheHits++,n.push("query_cache");let p=process.hrtime.bigint(),y=Number(p-i)/1e6;return{...m,duration:y,optimizations:n,performance_metrics:{...m.performance_metrics,processing_time_ms:y,optimizations_used:n,cache_hit:!0}}}}(!this.invertedIndex||t.length>this.documentCount)&&this.updateInvertedIndex(t);let r;this.invertedIndex&&t.length===this.documentCount?(r=this.getCandidateDocuments(e,t),r.length<t.length&&n.push("inverted_index")):r=t;let o;if(this.fastFirstStrategy&&(this.algorithm==="hybrid"||this.algorithm==="bm25"))o=this.fastFirstStrategy.search(e,r,s),n.push("fast_first"),this.performanceStats.fastFirstUsage++;else if(this.earlyTerminationOptimizer&&r.length>100){let m=this.rankers[this.algorithm];o=this.earlyTerminationOptimizer.optimize(m,e,r,s),n.push("early_termination"),this.performanceStats.earlyTerminations++}else{let m=this.rankers[this.algorithm];e.toLowerCase().includes("oauth")&&console.error("DEBUG OptimizedSearchEngine before ranking:",{algorithm:this.algorithm,candidateDocumentsLength:r.length,rankerExists:!!m,rankerType:(h=m==null?void 0:m.constructor)==null?void 0:h.name}),o=m.rank(e,r,s),e.toLowerCase().includes("oauth")&&console.error("DEBUG OptimizedSearchEngine after ranking:",{resultTotalDocuments:o==null?void 0:o.totalDocuments,resultRankedDocuments:o==null?void 0:o.rankedDocuments,resultLength:(d=o==null?void 0:o.results)==null?void 0:d.length})}this.queryCache&&this.queryCache.set(e,this.algorithm,o,s);let a=process.hrtime.bigint(),c=Number(a-i)/1e6;return{...o,duration:c,optimizations:n,performance_metrics:{algorithm:this.algorithm,query_terms:new(z()).TextProcessor().tokenize(e).length,documents_processed:t.length,candidates_processed:r.length,results_returned:o.rankedDocuments,processing_time_ms:c,optimizations_used:n,cache_hit:!1,filter_efficiency:r.length/t.length}}}getPerformanceStats(){let e={...this.performanceStats,cacheHitRate:this.performanceStats.cacheHits/this.performanceStats.totalQueries,indexUsageRate:this.performanceStats.indexUsage/this.performanceStats.totalQueries,fastFirstUsageRate:this.performanceStats.fastFirstUsage/this.performanceStats.totalQueries,earlyTerminationRate:this.performanceStats.earlyTerminations/this.performanceStats.totalQueries};return this.queryCache&&(e.queryCache=this.queryCache.getStats()),this.invertedIndex&&(e.invertedIndex=this.invertedIndex.getStats()),e}clearOptimizations(){this.queryCache&&this.queryCache.clear(),this.performanceStats={totalQueries:0,cacheHits:0,indexUsage:0,fastFirstUsage:0,earlyTerminations:0},console.log("\u{1F9F9} Optimization caches cleared")}getOptimizationConfig(){return{enabled:this.optimizationConfig.hasOptimizations(),phases:this.optimizationConfig.phases,enabledPhases:this.optimizationConfig.getEnabledPhases()}}setOptimizationPhase(e,t){if(this.optimizationConfig.phases.hasOwnProperty(e))this.optimizationConfig.phases[e]=t,console.log(`\u{1F527} Optimization phase '${e}' ${t?"enabled":"disabled"}`),t&&this.initializeOptimizations();else throw new Error(`Unknown optimization phase: ${e}`)}};u(at,"OptimizedAdvancedSearchEngine");var ot=at;tn.exports={OptimizedAdvancedSearchEngine:ot,OptimizationConfig:en}});var rn=g((jl,nn)=>{var lt=class lt{constructor(){this.isEnabled=!1}search(e,t,s={}){return{results:[],totalCount:0,searchTime:0,algorithm:"semantic_search_disabled"}}semanticSimilarity(e,t){return 0}isSemanticSearchEnabled(){return this.isEnabled}};u(lt,"PlaceholderSemanticSearch");var ct=lt;nn.exports={PlaceholderSemanticSearch:ct,SEMANTIC_SEARCH_DISABLED:!0}});var an=g((Bl,on)=>{var dt=class dt{constructor(e={}){this.minSupport=e.minSupport||.3,this.minConfidence=e.minConfidence||.5,this.maxSequenceLength=e.maxSequenceLength||10,this.timeWindowMs=e.timeWindowMs||36e5}async mineSequences(e){let t=process.hrtime.bigint(),s=this.preprocessAccessLogs(e),i=this.findFrequentItems(s),n=this.generateFrequentSequences(s,i),r=this.calculatePatternMetrics(n,s),o=this.generateAssociationRules(r),a=process.hrtime.bigint(),c=Number(a-t)/1e6;return{sequences:s,frequentItems:i,frequentSequences:n,patterns:r,rules:o,stats:{totalSequences:s.length,frequentItemCount:i.length,frequentSequenceCount:n.length,patternCount:r.length,ruleCount:o.length},parameters:{minSupport:this.minSupport,minConfidence:this.minConfidence,maxSequenceLength:this.maxSequenceLength,timeWindowMs:this.timeWindowMs},duration:c}}preprocessAccessLogs(e){if(!e||e.length===0)return[];let t=e.sort((r,o)=>new Date(r.timestamp).getTime()-new Date(o.timestamp).getTime()),s=[],i=[],n=new Date(t[0].timestamp).getTime();for(let r of t){let o=new Date(r.timestamp).getTime();if(o-n<=this.timeWindowMs)i.push({memoryId:r.memoryId,action:r.action||"access",memoryType:r.memoryType||"general",tags:r.tags||[],timestamp:r.timestamp,context:r.context||{}});else{if(i.length>0){let a=new Date(i[i.length-1].timestamp).getTime();s.push({id:s.length,items:i,startTime:new Date(i[0].timestamp),endTime:new Date(i[i.length-1].timestamp),duration:a-n})}i=[{memoryId:r.memoryId,action:r.action||"access",memoryType:r.memoryType||"general",tags:r.tags||[],timestamp:r.timestamp,context:r.context||{}}],n=o}}return i.length>0&&s.push({id:s.length,items:i,startTime:new Date(i[0].timestamp),endTime:new Date(i[i.length-1].timestamp),duration:new Date(i[i.length-1].timestamp).getTime()-n}),s}findFrequentItems(e){let t=new Map,s=e.length;e.forEach(n=>{let r=new Set;n.items.forEach(o=>{let a=this.createItemKey(o);r.add(a)}),r.forEach(o=>{t.set(o,(t.get(o)||0)+1)})});let i=[];return t.forEach((n,r)=>{let o=n/s;o>=this.minSupport&&i.push({item:r,support:o,count:n,details:this.parseItemKey(r)})}),i.sort((n,r)=>r.support-n.support)}generateFrequentSequences(e,t){let s=[],i=new Set(t.map(n=>n.item));for(let n=2;n<=this.maxSequenceLength;n++){let r=this.generateCandidateSequences(e,i,n),o=this.pruneInfrequentSequences(r,e);if(o.length===0)break;s.push(...o)}return s}generateCandidateSequences(e,t,s){let i=new Map;return e.forEach(n=>{if(n.items.length>=s)for(let r=0;r<=n.items.length-s;r++){let o=n.items.slice(r,r+s),a=o.map(l=>this.createItemKey(l)).join(" -> ");o.every(l=>t.has(this.createItemKey(l)))&&i.set(a,(i.get(a)||0)+1)}}),i}pruneInfrequentSequences(e,t){let s=t.length,i=[];return e.forEach((n,r)=>{let o=n/s;o>=this.minSupport&&i.push({sequence:r,support:o,count:n,items:r.split(" -> ").map(a=>this.parseItemKey(a))})}),i.sort((n,r)=>r.support-n.support)}calculatePatternMetrics(e,t){let s=[];return e.forEach(i=>{if(i.items.length>=2){let n=i.items.slice(0,-1),r=i.items[i.items.length-1],o=this.calculateSupport(n,t),a=this.calculateSupport([r],t),c=i.support/o,l=c/a,h=(1-a)/(1-c);s.push({...i,antecedent:n,consequent:r,antecedentSupport:o,consequentSupport:a,confidence:c,lift:l,conviction:h})}}),s}generateAssociationRules(e){let t=[];return e.forEach(s=>{s.confidence>=this.minConfidence&&t.push({antecedent:s.antecedent,consequent:s.consequent,support:s.support,confidence:s.confidence,lift:s.lift,conviction:s.conviction,rule:`${s.antecedent.map(i=>i.action||i.memoryType).join(" -> ")} => ${s.consequent.action||s.consequent.memoryType}`,strength:this.calculateRuleStrength(s)})}),t.sort((s,i)=>i.strength-s.strength)}calculateRuleStrength(e){let n=Math.min(e.lift,3)/3;return .3*e.support+.4*e.confidence+.3*n}calculateSupport(e,t){let s=0,i=t.length;return t.forEach(n=>{this.containsSequence(n.items,e)&&s++}),s/i}containsSequence(e,t){if(t.length>e.length)return!1;let s=t.map(i=>this.createItemKey(i));for(let i=0;i<=e.length-t.length;i++){let n=!0;for(let r=0;r<t.length;r++)if(this.createItemKey(e[i+r])!==s[r]){n=!1;break}if(n)return!0}return!1}createItemKey(e){return`${e.action||"access"}:${e.memoryType||"general"}:${(e.tags||[]).sort().join(",")}`}parseItemKey(e){let t=e.split(":");return{action:t[0],memoryType:t[1],tags:t[2]?t[2].split(","):[]}}};u(dt,"SequenceMiningEngine");var oe=dt,mt=class mt{constructor(e={}){this.windowSize=e.windowSize||10,this.predictionHorizon=e.predictionHorizon||5,this.smoothingFactor=e.smoothingFactor||.3}async analyzeTemporalPatterns(e){let t=process.hrtime.bigint(),s=this.createTimeSeries(e),i=this.detectTrends(s),n=this.detectSeasonality(s),r=this.detectCyclicPatterns(s),o=this.predictFutureAccess(s),a=process.hrtime.bigint(),c=Number(a-t)/1e6;return{timeSeries:s,trends:i,seasonality:n,cyclicPatterns:r,predictions:o,stats:{timeSeriesLength:s.length,trendCount:i.length,seasonalityScore:n.score,cyclicPatternCount:r.length,predictionAccuracy:o.accuracy},duration:c}}createTimeSeries(e){if(!e||e.length===0)return[];let t=new Map;return e.forEach(s=>{let i=new Date(s.timestamp).getHours(),r=`${new Date(s.timestamp).toDateString()}-${i}`;t.has(r)||t.set(r,{timestamp:new Date(s.timestamp),count:0,memoryTypes:new Set,actions:new Set});let o=t.get(r);o.count++,o.memoryTypes.add(s.memoryType||"general"),o.actions.add(s.action||"access")}),Array.from(t.values()).sort((s,i)=>s.timestamp-i.timestamp)}detectTrends(e){if(e.length<3)return[];let t=[],s=null;for(let i=1;i<e.length;i++){let n=e[i].count,r=e[i-1].count,o=n>r?"increasing":n<r?"decreasing":"stable";!s||s.direction!==o?(s&&(s.endIndex=i-1,s.duration=s.endIndex-s.startIndex+1,t.push(s)),s={direction:o,startIndex:i-1,startTime:e[i-1].timestamp,startValue:r,endIndex:i,endTime:e[i].timestamp,endValue:n}):(s.endIndex=i,s.endTime=e[i].timestamp,s.endValue=n)}return s&&(s.duration=s.endIndex-s.startIndex+1,t.push(s)),t}detectSeasonality(e){if(e.length<2)return{score:0,patterns:[]};let t=new Array(24).fill(0),s=new Array(24).fill(0);e.forEach(o=>{let a=o.timestamp.getHours();t[a]+=o.count,s[a]++});for(let o=0;o<24;o++)t[o]=s[o]>0?t[o]/s[o]:0;let i=t.reduce((o,a)=>o+a,0)/24,n=t.reduce((o,a)=>o+Math.pow(a-i,2),0)/24;return{score:i>0?Math.sqrt(n)/i:0,patterns:t.map((o,a)=>({hour:a,averageAccess:o,isActive:o>i}))}}detectCyclicPatterns(e){if(e.length<10)return[];let t=[],s=Math.min(this.windowSize,e.length);for(let i=2;i<=s;i++){let n=this.calculateAutoCorrelation(e,i);n>.7&&t.push({period:i,correlation:n,strength:n,description:`${i}-period cyclic pattern detected`})}return t.sort((i,n)=>n.strength-i.strength)}calculateAutoCorrelation(e,t){if(e.length<t*2)return 0;let s=e.map(h=>h.count),i=s.length-t,n=0,r=0,o=0,a=0,c=0;for(let h=0;h<i;h++){let d=s[h],m=s[h+t];n+=d,r+=m,o+=d*m,a+=d*d,c+=m*m}let l=(i*o-n*r)/Math.sqrt((i*a-n*n)*(i*c-r*r));return isNaN(l)?0:l}predictFutureAccess(e){if(e.length<3)return{predictions:[],accuracy:0,method:"insufficient_data"};let t=[],s=e.map(o=>o.count),i=[s[0]];for(let o=1;o<s.length;o++){let a=this.smoothingFactor*s[o]+(1-this.smoothingFactor)*i[o-1];i.push(a)}let n=i[i.length-1];for(let o=0;o<this.predictionHorizon;o++)t.push({timeOffset:o+1,predictedValue:Math.round(n),confidence:Math.max(.1,.9-o*.1)});let r=this.calculatePredictionAccuracy(i,s);return{predictions:t,accuracy:r,method:"exponential_smoothing",smoothingFactor:this.smoothingFactor}}calculatePredictionAccuracy(e,t){if(e.length!==t.length||e.length<2)return 0;let s=0,i=0;for(let r=1;r<e.length;r++){let o=Math.abs(e[r]-t[r]);s+=o,i+=t[r]}let n=i>0?1-s/i:0;return Math.max(0,Math.min(1,n))}};u(mt,"TemporalAnalysisEngine");var ae=mt,ut=class ut{constructor(e={}){this.sequenceMiner=new oe(e.sequenceMining),this.temporalAnalyzer=new ae(e.temporalAnalysis),this.workflowPatterns=new Map,this.classificationThreshold=e.classificationThreshold||.7,this.minPatternLength=e.minPatternLength||3,this.maxPatternLength=e.maxPatternLength||10}async analyzeWorkflowPatterns(e){let t=process.hrtime.bigint(),s=await this.sequenceMiner.mineSequences(e),i=await this.temporalAnalyzer.analyzeTemporalPatterns(e),n=this.identifyWorkflowPatterns(s,i),r=this.classifyWorkflowPatterns(n),o=this.generateWorkflowInsights(r,i),a=this.generateOptimizationSuggestions(r,s),c=process.hrtime.bigint(),l=Number(c-t)/1e6;return{workflowPatterns:n,classifiedWorkflows:r,insights:o,optimizations:a,sequenceAnalysis:s,temporalAnalysis:i,stats:{totalPatterns:n.length,classifiedCount:r.length,insightCount:o.length,optimizationCount:a.length,coveragePercentage:this.calculateCoverage(r,s)},duration:l}}identifyWorkflowPatterns(e,t){let s=[];return e.patterns.forEach(i=>{i.antecedent.length>=this.minPatternLength-1&&s.push({type:"sequential",pattern:[...i.antecedent,i.consequent],support:i.support,confidence:i.confidence,lift:i.lift,strength:i.conviction,source:"sequence_mining",description:this.generatePatternDescription(i)})}),t.cyclicPatterns.forEach(i=>{s.push({type:"cyclic",pattern:i,support:i.strength,confidence:i.correlation,period:i.period,source:"temporal_analysis",description:`Cyclic pattern with ${i.period}-unit period`})}),t.trends.forEach(i=>{i.duration>=3&&s.push({type:"trend",pattern:i,support:i.duration/t.timeSeries.length,confidence:1,direction:i.direction,source:"temporal_analysis",description:`${i.direction} trend over ${i.duration} time units`})}),s.sort((i,n)=>n.support-i.support)}classifyWorkflowPatterns(e){let t=[],s=this.getWorkflowTypes();return e.forEach(i=>{let n=[];s.forEach(r=>{let o=this.calculatePatternMatchScore(i,r);o>=this.classificationThreshold&&n.push({type:r.name,score:o,confidence:o,description:r.description,characteristics:r.characteristics})}),n.length>0&&t.push({originalPattern:i,classifications:n.sort((r,o)=>o.score-r.score),bestMatch:n[0],isMultiClass:n.length>1})}),t}getWorkflowTypes(){return[{name:"development_cycle",description:"Software development workflow pattern",characteristics:["access","create","update","test"],keywords:["programming","code","development","technical","implementation"],sequencePatterns:[["access","create","update"],["create","test","debug"],["read","code","test"]]},{name:"research_workflow",description:"Research and documentation workflow",characteristics:["access","read","create","document"],keywords:["research","documentation","analysis","study"],sequencePatterns:[["access","read","document"],["search","read","create"],["research","analyze","document"]]},{name:"problem_solving",description:"Problem-solving and debugging workflow",characteristics:["access","debug","test","fix"],keywords:["debug","error","fix","troubleshoot","solve"],sequencePatterns:[["access","debug","fix"],["error","debug","test"],["problem","analyze","solve"]]},{name:"learning_pattern",description:"Learning and knowledge acquisition workflow",characteristics:["access","read","practice","review"],keywords:["learn","tutorial","practice","study","education"],sequencePatterns:[["access","read","practice"],["tutorial","practice","review"],["learn","apply","test"]]},{name:"planning_workflow",description:"Planning and organization workflow",characteristics:["create","plan","organize","schedule"],keywords:["plan","organize","schedule","meeting","todo"],sequencePatterns:[["create","plan","organize"],["meeting","plan","schedule"],["todo","organize","prioritize"]]},{name:"review_cycle",description:"Review and validation workflow",characteristics:["access","review","validate","approve"],keywords:["review","validate","check","approve","quality"],sequencePatterns:[["access","review","validate"],["check","review","approve"],["quality","review","validate"]]}]}calculatePatternMatchScore(e,t){let s=0,i=0;if(e.type==="sequential"){let n=e.pattern.map(r=>r.action||"access").join(" -> ");t.sequencePatterns.forEach(r=>{i+=1;let o=r.join(" -> "),a=this.calculateStringSimilarity(n,o);s+=a})}if(e.pattern&&Array.isArray(e.pattern)){let n=e.pattern.map(r=>(r.tags||[]).join(" ")+" "+(r.memoryType||"")).join(" ").toLowerCase();t.keywords.forEach(r=>{i+=.5,n.includes(r)&&(s+=.5)})}if(e.pattern&&Array.isArray(e.pattern)){let n=e.pattern.map(r=>r.action||"access");t.characteristics.forEach(r=>{i+=.3,n.includes(r)&&(s+=.3)})}return s+=(e.support||0)*.2,i+=.2,i>0?s/i:0}calculateStringSimilarity(e,t){let s=[],i=e.length,n=t.length;for(let o=0;o<=i;o++)s[o]=[o];for(let o=0;o<=n;o++)s[0][o]=o;for(let o=1;o<=i;o++)for(let a=1;a<=n;a++)e[o-1]===t[a-1]?s[o][a]=s[o-1][a-1]:s[o][a]=Math.min(s[o-1][a]+1,s[o][a-1]+1,s[o-1][a-1]+1);let r=Math.max(i,n);return r>0?1-s[i][n]/r:0}generateWorkflowInsights(e,t){let s=[];e.forEach(n=>{let r=n.originalPattern,o=n.bestMatch;r.support>.5&&s.push({type:"high_frequency",workflow:o.type,insight:`${o.type} workflow occurs frequently (${(r.support*100).toFixed(1)}% of sessions)`,recommendation:"Consider optimizing this workflow for better productivity",priority:"high",confidence:r.confidence}),r.confidence<.3&&s.push({type:"low_predictability",workflow:o.type,insight:`${o.type} workflow has low predictability (${(r.confidence*100).toFixed(1)}% confidence)`,recommendation:"Workflow may need standardization or better structure",priority:"medium",confidence:r.confidence})}),t.seasonality.score>1&&s.push({type:"seasonal_pattern",workflow:"general",insight:`Strong seasonal patterns detected (score: ${t.seasonality.score.toFixed(2)})`,recommendation:"Consider time-based workflow optimization",priority:"medium",confidence:.8});let i=t.trends.filter(n=>n.direction==="increasing");return i.length>0&&s.push({type:"increasing_usage",workflow:"general",insight:`${i.length} increasing usage trends detected`,recommendation:"Prepare for scaling as usage patterns are growing",priority:"high",confidence:.7}),s.sort((n,r)=>{let o={high:3,medium:2,low:1};return o[r.priority]-o[n.priority]})}generateOptimizationSuggestions(e,t){let s=[];e.forEach(r=>{let o=r.originalPattern,a=r.bestMatch;o.type==="sequential"&&o.pattern.length>5&&s.push({type:"sequence_optimization",workflow:a.type,suggestion:`Consider breaking down ${a.type} into smaller, more manageable steps`,impact:"medium",effort:"low",details:`Current sequence has ${o.pattern.length} steps, which may be too complex`}),o.lift&&o.lift<.5&&s.push({type:"weak_association",workflow:a.type,suggestion:`Improve connection between workflow steps in ${a.type}`,impact:"high",effort:"medium",details:`Low lift score (${o.lift.toFixed(2)}) indicates weak associations`})}),t.frequentSequences.forEach(r=>{r.support>.7&&r.items.length>=3&&s.push({type:"automation_opportunity",workflow:"general",suggestion:`Consider automating the sequence: ${r.sequence}`,impact:"high",effort:"high",details:`High frequency pattern (${(r.support*100).toFixed(1)}% support) suitable for automation`})});let i=new Map;e.forEach(r=>{let o=r.bestMatch.type;i.set(o,(i.get(o)||0)+1)});let n=Array.from(i.entries()).sort((r,o)=>o[1]-r[1])[0];return n&&n[1]>e.length*.4&&s.push({type:"workflow_balance",workflow:n[0],suggestion:`${n[0]} workflow dominates (${n[1]} occurrences). Consider diversifying activities`,impact:"medium",effort:"low",details:"Workflow imbalance may indicate over-specialization or missing variety"}),s.sort((r,o)=>{let a={high:3,medium:2,low:1};return a[o.impact]-a[r.impact]})}calculateCoverage(e,t){let s=t.patterns.length+t.frequentSequences.length,i=e.length;return s>0?i/s*100:0}generatePatternDescription(e){if(e.antecedent&&e.consequent){let t=e.antecedent.map(i=>`${i.action||"access"} ${i.memoryType||"memory"}`).join(" \u2192 "),s=`${e.consequent.action||"access"} ${e.consequent.memoryType||"memory"}`;return`${t} \u2192 ${s} (${(e.confidence*100).toFixed(1)}% confidence)`}return"Sequential pattern detected"}};u(ut,"WorkflowRecognitionEngine");var ht=ut;on.exports={SequenceMiningEngine:oe,TemporalAnalysisEngine:ae,WorkflowRecognitionEngine:ht}});var Y=g((Hl,cn)=>{var{BatchAnalysisEngine:Sa}=Yi(),{MemoryFeatureExtractor:Ca,DBSCANClusterer:va,KMeansClusterer:Aa,ClusteringEvaluator:Ma,ClusteringEngine:Ra}=Ne(),{MemoryGraph:ka,PageRankAnalyzer:xa,CommunityDetector:Oa,MemoryRelationshipAnalyzer:Na,GraphAnalysisEngine:Ia}=Qi(),{OptimizedAdvancedSearchEngine:Da,OptimizationConfig:La}=sn(),{InvertedIndex:Fa,QueryCache:$a,FastFirstStrategy:Pa,EarlyTerminationOptimizer:za,OptimizationConfig:qa,SearchOptimizations:ja}=rt(),{TextProcessor:Ua,TFIDFRanker:Ba,BM25Ranker:Wa,HybridRanker:Ha,AdvancedSearchEngine:Ga}=z(),{PlaceholderSemanticSearch:Va,SEMANTIC_SEARCH_DISABLED:Xa}=rn(),{SequenceMiningEngine:Ya,TemporalAnalysisEngine:Ja,WorkflowRecognitionEngine:Qa}=an();cn.exports={BatchAnalysisEngine:Sa,MemoryFeatureExtractor:Ca,DBSCANClusterer:va,KMeansClusterer:Aa,ClusteringEvaluator:Ma,ClusteringEngine:Ra,MemoryGraph:ka,PageRankAnalyzer:xa,CommunityDetector:Oa,MemoryRelationshipAnalyzer:Na,GraphAnalysisEngine:Ia,OptimizedAdvancedSearchEngine:Da,OptimizationConfig:La,InvertedIndex:Fa,QueryCache:$a,FastFirstStrategy:Pa,EarlyTerminationOptimizer:za,SearchOptimizationConfig:qa,SearchOptimizations:ja,TextProcessor:Ua,TFIDFRanker:Ba,BM25Ranker:Wa,HybridRanker:Ha,AdvancedSearchEngine:Ga,PlaceholderSemanticSearch:Va,SEMANTIC_SEARCH_DISABLED:Xa,SequenceMiningEngine:Ya,TemporalAnalysisEngine:Ja,WorkflowRecognitionEngine:Qa}});var hn=g((Gl,ln)=>{var yt=class yt{constructor(){this.cache=new Map,this.lastUpdate=null,this.updateInterval=6e4,this.maxCacheSize=1e4}getScores(e){let t=new Map;for(let s of e){let i=this.cache.get(s)||this.computeDefaultScore(s);t.set(s,i)}return t}computeDefaultScore(e){return .15+Math.max(0,1-e/1e5)*.1}updateScores(e){for(let[t,s]of e)this.cache.set(t,s);if(this.cache.size>this.maxCacheSize){let t=this.cache.size-this.maxCacheSize,s=this.cache.keys();for(let i=0;i<t;i++)this.cache.delete(s.next().value)}this.lastUpdate=Date.now()}needsUpdate(){return!this.lastUpdate||Date.now()-this.lastUpdate>this.updateInterval}clear(){this.cache.clear(),this.lastUpdate=null}};u(yt,"PageRankCache");var pt=yt;ln.exports=pt});var _t=g((Xl,dn)=>{var{AdvancedSearchEngine:Ka,OptimizedAdvancedSearchEngine:Za}=Y(),ec=hn(),ft=class ft{constructor(e,t){var r,o;this.db=e,this.config=t;let s=t.search||{},i=s.algorithm||"hybrid",n=s.optimizations||{};n&&Object.keys(n).length>0?(this.searchEngine=new Za(i,n),process.env.NOVA_MCP_MODE||console.error(`\u{1F680} Using optimized search engine with phases: ${Object.keys(n).filter(a=>n[a]).join(", ")}`)):(this.searchEngine=new Ka(i),console.error(`\u{1F4CA} Using standard search engine with algorithm: ${i}`)),this.searchCache=new Map,this.maxCacheSize=((r=t.performance)==null?void 0:r.max_cache_size)||100,this.cacheTimeout=((o=t.performance)==null?void 0:o.cache_timeout)||3e5,this.pageRankCache=new ec}async search(e,t=null,s={}){var i;try{let n=process.hrtime.bigint();t=t||((i=this.config.search)==null?void 0:i.max_results)||100;let r=this.searchEngine.algorithm;s.mode?r=s.mode:s.algorithm&&(r=s.algorithm);let o=`search_${r}_${e}_${t}`,a=this._getFromCache(o);if(a){let f=process.hrtime.bigint(),_=Number(f-n)/1e6;return console.log(`\u{1F680} Search served from cache (${_.toFixed(2)}ms)`),a}let c=[],l=!1;try{let f=`
          SELECT m.* FROM memory_entries m
          JOIN memory_fts f ON m.id = f.rowid
          WHERE memory_fts MATCH ?
          ORDER BY rank
          LIMIT ?
        `,_=e.replace(/["*()]/g,"");console.error(`\u{1F50D} FTS search for: "${_}" with limit: ${t*2}`),c=await this.db.dbAll(f,[_,t*2]),l=!0,console.error(`\u{1F4CA} FTS found ${c.length} rows`)}catch(f){console.error(`\u26A0\uFE0F FTS search failed, falling back to LIKE: ${f.message}`);let _=`
          SELECT * FROM memory_entries 
          WHERE content LIKE ? OR tags LIKE ?
          ORDER BY timestamp DESC
          LIMIT ?
        `,E=`%${e}%`;c=await this.db.dbAll(_,[E,E,t*2]),console.error(`\u{1F4CA} LIKE query found ${c.length} rows`)}let d=await Promise.all(c.map(async f=>{let _={...f,id:f.id,timestamp:new Date(f.timestamp),tags:JSON.parse(f.tags||"[]"),metadata:JSON.parse(f.metadata||"{}"),embedding:f.embedding?JSON.parse(f.embedding):null};try{let E=await this.db.dbGet("SELECT data FROM structured_memory WHERE memory_id = ?",[f.id]);if(E){let b=JSON.parse(E.data);_.has_structured=!0,_.structured=b,b.keywords&&b.keywords.length>0&&(_.enhanced_content=`${_.content} ${b.keywords.join(" ")} ${b.summary||""}`),_.structured_boost=1.5}else _.has_structured=!1,_.enhanced_content=_.content,_.structured_boost=1}catch{_.has_structured=!1,_.enhanced_content=_.content,_.structured_boost=1}return _})),m;if(d.length>0){if(s.mode){let S={smart:"hybrid",precise:"tfidf",fast:"bm25",balanced:"hybrid"}[s.mode]||"hybrid";S!==this.searchEngine.algorithm&&this.searchEngine.setAlgorithm(S)}else s.algorithm&&s.algorithm!==this.searchEngine.algorithm&&this.searchEngine.setAlgorithm(s.algorithm);let f=d.map(w=>w.id),_=this.pageRankCache.getScores(f),E={...s,pagerankScores:_},b=d.map(w=>({...w,content:w.enhanced_content||w.content,original_content:w.content}));if(m=this.searchEngine.search(e,b,E),m.results){m.results=m.results.map(S=>{let v=S.structured_boost||1;return S.tfidf_score&&(S.tfidf_score*=v),S.bm25_score&&(S.bm25_score*=v),S.hybrid_score&&(S.hybrid_score*=v),S.score&&(S.score*=v),S.original_content&&(S.content=S.original_content,delete S.original_content),S});let w=m.algorithm==="tfidf"?"tfidf_score":m.algorithm==="bm25"?"bm25_score":m.algorithm==="hybrid"?"hybrid_score":"score";m.results.sort((S,v)=>(v[w]||0)-(S[w]||0))}t&&(m.results=m.results.slice(0,t),m.rankedDocuments=m.results.length)}else m={results:[],algorithm:this.searchEngine.algorithm,duration:0,totalDocuments:0,rankedDocuments:0,performance_metrics:{algorithm:this.searchEngine.algorithm,query_terms:0,documents_processed:0,results_returned:0,processing_time_ms:0}};this._setCache(o,m.results);let p=process.hrtime.bigint(),y=Number(p-n)/1e6;return y>25&&console.warn(`\u26A0\uFE0F Slow search operation: ${y.toFixed(2)}ms (target: <25ms)`),console.log(`\u2705 Advanced search executed (${y.toFixed(2)}ms) - ${m.results.length} results for "${e}" using ${m.algorithm} (FTS: ${l})`),m.results&&m.results.length>0&&(m.results=m.results.map(f=>{let _=0;return f.hybrid_score!==void 0?_=f.hybrid_score:f.tfidf_score!==void 0?_=f.tfidf_score:f.bm25_score!==void 0&&(_=f.bm25_score),{...f,score:_}})),m.results}catch(n){throw console.error(`\u274C Failed to search memories: ${n.message}`),n}}async similaritySearch(e,t=10,s=.7){try{let i=process.hrtime.bigint(),r=await this.db.dbAll("SELECT * FROM memory_entries WHERE embedding IS NOT NULL"),o=[];for(let h of r)try{let d=JSON.parse(h.embedding),m=this._cosineSimilarity(e,d);m>=s&&o.push({...h,similarity_score:m,timestamp:new Date(h.timestamp),tags:JSON.parse(h.tags||"[]"),metadata:JSON.parse(h.metadata||"{}")})}catch(d){console.warn(`\u26A0\uFE0F Invalid embedding for memory ${h.id}: ${d.message}`)}o.sort((h,d)=>d.similarity_score-h.similarity_score);let a=o.slice(0,t),c=process.hrtime.bigint(),l=Number(c-i)/1e6;return console.log(`\u2705 Similarity search executed (${l.toFixed(2)}ms) - ${a.length} results`),a}catch(i){throw console.error(`\u274C Failed to perform similarity search: ${i.message}`),i}}async multiModalSearch(e,t=null,s={}){try{let i=process.hrtime.bigint(),n=s.textWeight||.7,r=s.embeddingWeight||.3,o=s.limit||50,a=await this.search(e,o*2,s),c=[];t&&(c=await this.similaritySearch(t,o*2,s.similarityThreshold||.5));let l=new Map;for(let p of a){let y=(p.score||0)*n;l.set(p.id,{...p,text_score:p.score||0,combined_score:y})}for(let p of c){let y=p.similarity_score*r;if(l.has(p.id)){let f=l.get(p.id);f.combined_score+=y,f.embedding_score=p.similarity_score}else l.set(p.id,{...p,embedding_score:p.similarity_score,combined_score:y,text_score:0})}let h=Array.from(l.values()).sort((p,y)=>y.combined_score-p.combined_score).slice(0,o),d=process.hrtime.bigint(),m=Number(d-i)/1e6;return console.log(`\u2705 Multi-modal search executed (${m.toFixed(2)}ms) - ${h.length} results`),h}catch(i){throw console.error(`\u274C Failed to perform multi-modal search: ${i.message}`),i}}async getSearchSuggestions(e,t=5){try{let i=await this.db.dbAll(`
        SELECT DISTINCT content 
        FROM memory_entries 
        WHERE content LIKE ? 
        ORDER BY timestamp DESC 
        LIMIT ?
      `,[`%${e}%`,t*3]),n=[],r=e.toLowerCase();for(let o of i){let a=o.content.toLowerCase(),c=a.indexOf(r);if(c!==-1){let l=Math.max(0,c-20),h=Math.min(a.length,c+r.length+20),d=o.content.substring(l,h).trim();d.length>e.length&&!n.includes(d)&&n.push(d)}if(n.length>=t)break}return n}catch(s){throw console.error(`\u274C Failed to get search suggestions: ${s.message}`),s}}_cosineSimilarity(e,t){if(!e||!t||e.length!==t.length)return 0;let s=0,i=0,n=0;for(let r=0;r<e.length;r++)s+=e[r]*t[r],i+=e[r]*e[r],n+=t[r]*t[r];return i===0||n===0?0:s/(Math.sqrt(i)*Math.sqrt(n))}_getFromCache(e){let t=this.searchCache.get(e);return t&&Date.now()-t.timestamp<this.cacheTimeout?t.data:(t&&this.searchCache.delete(e),null)}_setCache(e,t){if(this.searchCache.size>=this.maxCacheSize){let s=this.searchCache.keys().next().value;this.searchCache.delete(s)}this.searchCache.set(e,{data:t,timestamp:Date.now()})}clearCache(){this.searchCache.clear(),console.log("\u{1F5D1}\uFE0F Search cache cleared")}};u(ft,"SearchOperations");var gt=ft;dn.exports={SearchOperations:gt}});var pn=g((Jl,un)=>{var J=require("path"),q=require("fs-extra"),mn=require("os"),bt=class bt{static generateTestDbPath(e="test"){let t=Date.now(),s=Math.random().toString(36).substring(2,15),i=`${e}-memory-${t}-${s}.db`;return J.join(mn.tmpdir(),i)}static generateProcessDbPath(e){let t=process.pid,s=Date.now(),i=J.parse(e),n=`${i.name}-${t}-${s}${i.ext}`;return J.join(i.dir,n)}static async cleanupTestDbs(e="test-memory-"){try{let t=mn.tmpdir(),s=await q.readdir(t);for(let i of s)if(i.startsWith(e)&&i.endsWith(".db")){let n=J.join(t,i);try{await q.remove(n),console.log(`\u{1F9F9} Cleaned up test database: ${i}`)}catch{}}}catch{}}static async isDatabaseLocked(e){try{let t=require("sqlite3");return new Promise(s=>{let i=new t.Database(e,n=>{n?s(n.code==="SQLITE_BUSY"):i.close(()=>s(!1))})})}catch{return!1}}static async waitForUnlock(e,t=1e4){let s=Date.now();for(;Date.now()-s<t;){if(!await this.isDatabaseLocked(e))return!0;await new Promise(n=>setTimeout(n,100))}return!1}static async ensureDbDirectory(e){let t=J.dirname(e);await q.ensureDir(t)}static async getDbSize(e){try{return(await q.stat(e)).size}catch{return 0}}static async backupDatabase(e,t){try{return await q.copy(e,t),!0}catch(s){return console.error(`Failed to backup database: ${s.message}`),!1}}static async restoreDatabase(e,t){try{return await q.copy(e,t),!0}catch(s){return console.error(`Failed to restore database: ${s.message}`),!1}}};u(bt,"DatabaseUtils");var Et=bt;un.exports={DatabaseUtils:Et}});var gn=g((Kl,yn)=>{var wt=class wt{constructor(){this.technicalPatterns=[/\b(nova\s+memory|nova)\b/gi,/\b(mem0|langmem|letta)\b/gi,/\b(tf-idf|tfidf|bm25|hybrid)\b/gi,/\b(networkx|langchain|openai|anthropic|claude|gpt-4)\b/gi,/\b(microsoft|google|amazon|meta|facebook)\b/gi,/\b(python|node\.?js|javascript|typescript|react|express)\b/gi,/\b(postgresql|mysql|mongodb|redis|sqlite)\b/gi,/\b(mcp\s+server|mcp|server)\b/gi,/\b(algorithm|optimization|performance|metrics)\b/gi,/\b(authentication\s+module|authentication|auth)\b/gi,/\b(jwt\s+token|jwt|token|oauth)\b/gi,/\b(devops\s+team|devops|frontend\s+team|backend\s+team)\b/gi,/\b(database\s+connection\s+pooling|connection\s+pooling)\b/gi,/\b(payment\s+processing\s+module|payment\s+processing|payment\s+module)\b/gi,/\b(chat\s+session|chat|session)\b/gi,/\b(project\s+\w+|project\s+alpha|project\s+beta|project\s+titan|project\s+phoenix)\b/gi,/\b(database|repository|repositories)\b/gi,/\b(integration|configuration|implementation|migration)\b/gi,/\b(security\s+audit|security|audit|vulnerability|vulnerabilities)\b/gi,/\b(performance\s+issues|performance\s+optimization|optimization)\b/gi,/\b(github|git|version\s+control)\b/gi,/\b(api|rest|graphql|json|endpoint|endpoints)\b/gi,/\b(docker|kubernetes|container)\b/gi,/\b(aws|azure|gcp|cloud)\b/gi,/(?:[A-Za-z]:[\\\/]|\/)[^\s<>"|?*]+\.[a-zA-Z]{2,4}\b/g,/(?:\/(?:home|Users|var|tmp|opt|usr)\/[^\s<>"|?*]+)/g,/\b(?:src|lib|dist|build|node_modules)\/[^\s<>"|?*]+/g,/\bfrom\s+['"]([^'"]+)['"]/g,/\brequire\s*\(['"]([^'"]+)['"]\)/g,/\bimport\s+.+\s+from\s+['"]([^'"]+)['"]/g,/\b([A-Z][a-z]+\s+[A-Z][a-z]+)\b/g,/\b(\d+%|\d+\.\d+s|\d+ms|\d+\s+critical|\d+\s+vulnerabilities)\b/gi],this.relationshipPatterns=[{pattern:/(\w+)\s+competes?\s+with\s+(\w+)/gi,type:"competes_with"},{pattern:/(\w+)\s+integrates?\s+with\s+(\w+)/gi,type:"integrates_with"},{pattern:/(\w+)\s+outperforms?\s+(\w+)/gi,type:"outperforms"},{pattern:/(\w+)\s+uses?\s+(\w+)/gi,type:"uses"},{pattern:/(\w+)\s+replaces?\s+(\w+)/gi,type:"replaces"},{pattern:/(\w+)\s+optimizes?\s+(\w+)/gi,type:"optimizes"},{pattern:/(\w+)\s+requires?\s+(\w+)/gi,type:"requires"},{pattern:/(\w+)\s+depends?\s+on\s+(\w+)/gi,type:"depends_on"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:worked|works)\s+(?:on|with)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/gi,type:"works_on"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+from\s+([A-Z][a-z]+)/gi,type:"works_for"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:collaborated|collaborates)\s+with\s+([A-Z][a-z]+\s+[A-Z][a-z]+)/gi,type:"collaborates_with"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:completed|completes)\s+(?:the\s+)?([a-z\s]+(?:migration|project|task|implementation))/gi,type:"completed"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:identified|identifies)\s+(?:the\s+)?([a-z\s]+(?:issue|bug|problem|vulnerability))/gi,type:"identified"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:implemented|implements)\s+(?:the\s+)?([a-z\s]+(?:solution|fix|feature|system))/gi,type:"implemented"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:fixed|fixes)\s+(?:the\s+)?([a-z\s]+(?:bug|issue|problem))/gi,type:"fixed"},{pattern:/([A-Z][a-z]+\s+[A-Z][a-z]+)\s+(?:member|part)\s+of\s+(?:the\s+)?([A-Z][a-z]+\s+(?:team|group))/gi,type:"member_of"},{pattern:/(DevOps\s+team|DevOps)\s+(?:worked|works|fixed|completed)\s+([^.]+)/gi,type:"team_worked_on"},{pattern:/(?:by|from)\s+(?:the\s+)?(DevOps\s+team|DevOps).*([A-Z][a-z]+\s+[A-Z][a-z]+)/gi,type:"member_of"},{pattern:/(?:was\s+fixed\s+by|fixed\s+by)\s+(?:the\s+)?(DevOps\s+team)/gi,type:"fixed_by"},{pattern:/([^.]+)\s+(?:using|with|via)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)?)/gi,type:"uses_technology"},{pattern:/([^.]+)\s+(?:reduced|improved|increased)\s+([^.]+)/gi,type:"improved"},{pattern:/([^.]+)\s+(?:caused|causes)\s+([^.]+)/gi,type:"causes"},{pattern:/([^.]+)\s+(?:part|component)\s+of\s+([^.]+)/gi,type:"part_of"}]}extractEntities(e){if(!e||typeof e!="string")return[];let t=[];for(let o of this.technicalPatterns){let a=e.match(o);a&&a.forEach(c=>{let l=this.cleanEntity(c);l&&!t.includes(l)&&t.push(l)})}let s=/\b(\d+(?:\.\d+)?%?)\b/g,i=e.match(s);i&&i.forEach(o=>{o.length>1&&!t.includes(o)&&t.push(o)});let n=/\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)?\b/g,r=e.match(n);return r&&r.forEach(o=>{let a=o.trim();a.length>2&&!t.includes(a)&&!this.isCommonWord(a.toLowerCase())&&t.push(a)}),t.slice(0,10)}inferRelationships(e,t){if(!e||!t||t.length===0)return[];let s=[];for(let{pattern:i,type:n}of this.relationshipPatterns){let r=[...e.matchAll(i)];for(let o of r)if(o[1]&&o[2]){let a=this.cleanEntity(o[1]),c=this.cleanEntity(o[2]);if(a&&c&&a!==c){let l=`${a} \u2192 ${n} \u2192 ${c}`;s.push(l)}}}return s}cleanEntity(e){return!e||typeof e!="string"?null:e.trim().replace(/[^\w\s\-\.]/g,"").replace(/\s+/g," ").substring(0,50)}isCommonWord(e){return new Set(["the","and","for","are","but","not","you","all","can","had","her","was","one","our","out","day","get","has","him","his","how","man","new","now","old","see","two","way","who","boy","did","its","let","put","say","she","too","use","time","work","system","using","used","user","users","data","file","files"]).has(e.toLowerCase())}extractFilePaths(e){if(!e||typeof e!="string")return[];let t=new Set,s=[/(?:[A-Za-z]:[\\\/]|\/)[^\s<>"|?*]+\.[a-zA-Z]{2,4}\b/g,/(?:\/(?:home|Users|var|tmp|opt|usr)\/[^\s<>"|?*]+)/g,/\b(?:src|lib|dist|build|node_modules)\/[^\s<>"|?*]+/g,/['"]([^'"]+\.[a-zA-Z]{2,4})['"]/g],i=[/\bfrom\s+['"]([^'"]+)['"]/g,/\brequire\s*\(['"]([^'"]+)['"]\)/g,/\bimport\s+.+\s+from\s+['"]([^'"]+)['"]/g];for(let n of s){let r=[...e.matchAll(n)];for(let o of r){let a=o[1]||o[0];a&&a.length>3&&t.add(a.trim())}}for(let n of i){let r=[...e.matchAll(n)];for(let o of r)o[1]&&t.add(o[1].trim())}return Array.from(t)}processMemoryContent(e,t=[]){let s=this.extractEntities(e),i=this.inferRelationships(e,s),n=this.extractFilePaths(e),r=s.filter(c=>typeof c=="string"&&c.length>2).map(c=>c.toLowerCase().replace(/\s+/g,"_")).slice(0,5),o=n.map(c=>{let l=c.split(/[\\\/]/),h=l[l.length-1];return[h.split(".").pop(),h.split(".")[0]]}).flat().filter(c=>c&&c.length>2).slice(0,3),a=[...new Set([...t,...r,...o])];return{entities:s,relationships:i,filePaths:n,enhancedTags:a,entityCount:s.length,relationshipCount:i.length,filePathCount:n.length}}};u(wt,"EntityExtractor");var ce=wt,tc=new ce;yn.exports={EntityExtractor:ce,entityExtractor:tc}});var En=g((th,_n)=>{var Tt=require("fs"),fn=require("path"),eh=require("util"),he=class he{constructor(e={}){this.levels={ERROR:0,WARN:1,INFO:2,DEBUG:3,TRACE:4},this.currentLevel=this.levels[e.level||process.env.LOG_LEVEL||"INFO"],this.logToFile=e.logToFile||process.env.LOG_TO_FILE==="true",this.logDir=e.logDir||process.env.LOG_DIR||fn.join(process.cwd(),".nova","logs"),this.namespace=e.namespace||"nova-memory",this.logToFile&&this._ensureLogDirectory()}_ensureLogDirectory(){Tt.existsSync(this.logDir)||Tt.mkdirSync(this.logDir,{recursive:!0})}_getTimestamp(){return new Date().toISOString()}_formatMessage(e,t,s={}){let n={timestamp:this._getTimestamp(),level:e,namespace:this.namespace,message:t,...s};return JSON.stringify(n)}_writeToFile(e){if(!this.logToFile)return;let t=`nova-memory-${new Date().toISOString().split("T")[0]}.log`,s=fn.join(this.logDir,t);Tt.appendFileSync(s,e+`
`)}_log(e,t,s){if(this.levels[e]>this.currentLevel)return;let n=this._formatMessage(e,t,s);if(process.env.NODE_ENV!=="production"){let r={ERROR:"\x1B[31m",WARN:"\x1B[33m",INFO:"\x1B[36m",DEBUG:"\x1B[90m",TRACE:"\x1B[90m"}[e];console.log(`${r}[${e}]\x1B[0m ${t}`,s)}this._writeToFile(n)}error(e,t){this._log("ERROR",e,t)}warn(e,t){this._log("WARN",e,t)}info(e,t){this._log("INFO",e,t)}debug(e,t){this._log("DEBUG",e,t)}trace(e,t){this._log("TRACE",e,t)}child(e){return new he({...this.options,namespace:`${this.namespace}:${e}`})}};u(he,"Logger");var le=he,St;function sc(T){return St||(St=new le(T)),St}u(sc,"getLogger");_n.exports={Logger:le,getLogger:sc}});var de=g((ih,F)=>{var{DatabaseUtils:bn}=pn(),{EntityExtractor:wn,entityExtractor:Tn}=gn(),{Logger:Sn,getLogger:Cn}=En();F.exports={DatabaseUtils:bn,EntityExtractor:wn,entityExtractor:Tn,Logger:Sn,getLogger:Cn};F.exports.DatabaseUtils=bn;F.exports.EntityExtractor=wn;F.exports.entityExtractor=Tn;F.exports.Logger=Sn;F.exports.getLogger=Cn});var At=g((nh,vn)=>{var{entityExtractor:ic}=de(),vt=class vt{constructor(e,t){var s,i,n;this.db=e,this.config=t,this.entityExtractionEnabled=((s=t.entity_extraction)==null?void 0:s.enabled)??!0,this.confidenceThreshold=((i=t.entity_extraction)==null?void 0:i.confidence_threshold)??.8,this.maxEntitiesPerMemory=((n=t.entity_extraction)==null?void 0:n.max_entities_per_memory)??20}async storeRelationship(e){try{let t=process.hrtime.bigint();if(!e.entity1||!e.entity2||!e.relation)throw new Error("Missing required relationship fields: entity1, entity2, relation");let i=(await this.db.dbRun(`
        INSERT INTO relationships 
        (entity1, entity1_type, entity2, entity2_type, relation, confidence, metadata)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `,[e.entity1,e.entity1_type||"unknown",e.entity2,e.entity2_type||"unknown",e.relation,e.confidence||1,e.metadata||"{}"])).lastID,n=process.hrtime.bigint(),r=Number(n-t)/1e6;return console.log(`\u2705 Relationship stored: ${e.entity1} \u2192 ${e.relation} \u2192 ${e.entity2} (${r.toFixed(2)}ms)`),i}catch(t){throw console.error(`\u274C Failed to store relationship: ${t.message}`),t}}async getEntityRelationships(e,t="both"){try{let s="",i=[];switch(t){case"incoming":s="SELECT * FROM relationships WHERE entity2 = ?",i=[e];break;case"outgoing":s="SELECT * FROM relationships WHERE entity1 = ?",i=[e];break;default:s="SELECT * FROM relationships WHERE entity1 = ? OR entity2 = ?",i=[e,e]}return(await this.db.dbAll(s,i)).map(r=>({...r,timestamp:new Date(r.timestamp),metadata:JSON.parse(r.metadata||"{}")}))}catch(s){throw console.error(`\u274C Failed to get entity relationships: ${s.message}`),s}}async getEntities(e={}){try{let t="SELECT * FROM entities WHERE 1=1",s=[];return e.type&&(t+=" AND type = ?",s.push(e.type)),e.min_confidence&&(t+=" AND confidence >= ?",s.push(e.min_confidence)),t+=" ORDER BY confidence DESC, updated_at DESC",e.limit&&(t+=" LIMIT ?",s.push(e.limit)),(await this.db.dbAll(t,s)).map(n=>({...n,created_at:new Date(n.created_at),updated_at:new Date(n.updated_at),metadata:JSON.parse(n.metadata||"{}")}))}catch(t){throw console.error(`\u274C Failed to get entities: ${t.message}`),t}}async extractAndStoreEntities(e,t){var s,i;try{if(!this.entityExtractionEnabled)return{entities:[],relationships:[]};let n=process.hrtime.bigint(),r=await ic.extract(e);if(!r||!((s=r.entities)!=null&&s.length)&&!((i=r.relationships)!=null&&i.length))return{entities:[],relationships:[]};let o=[];if(r.entities&&r.entities.length>0)try{for(let h of r.entities.slice(0,this.maxEntitiesPerMemory)){await this.db.dbRun(`
              INSERT INTO entities (name, type, created_at, updated_at, confidence, metadata)
              VALUES (?, ?, ?, ?, ?, ?)
              ON CONFLICT(name) DO UPDATE SET
                updated_at = ?,
                confidence = MAX(confidence, ?)
            `,[h,"auto_extracted",new Date().toISOString(),new Date().toISOString(),this.confidenceThreshold,JSON.stringify({extraction_version:"1.0",last_memory_id:t}),new Date().toISOString(),this.confidenceThreshold]);let d=await this.db.dbGet("SELECT id FROM entities WHERE name = ?",[h]);d&&(await this.db.dbRun(`
                INSERT OR IGNORE INTO memory_entity_links (memory_id, entity_id, confidence)
                VALUES (?, ?, ?)
              `,[t,d.id,this.confidenceThreshold]),o.push(h))}}catch(h){console.warn(`\u26A0\uFE0F Failed to store some entities: ${h.message}`)}let a=[];if(r.relationships&&r.relationships.length>0)try{for(let h of r.relationships){let d=h.split(" \u2192 ");if(d.length===3){let[m,p,y]=d,f=await this.storeRelationship({entity1:m.trim(),entity1_type:"auto_extracted",entity2:y.trim(),entity2_type:"auto_extracted",relation:p.trim(),confidence:this.confidenceThreshold,metadata:JSON.stringify({memory_id:t,extraction_version:"1.0"})});a.push(h)}}}catch(h){console.warn(`\u26A0\uFE0F Failed to store some relationships: ${h.message}`)}let c=process.hrtime.bigint(),l=Number(c-n)/1e6;return(o.length>0||a.length>0)&&console.log(`\u{1F517} Extracted ${o.length} entities, ${a.length} relationships (${l.toFixed(2)}ms)`),{entities:o,relationships:a,processing_time:l}}catch(n){throw console.error(`\u274C Failed to extract and store entities: ${n.message}`),n}}async getEntityGraph(e={}){try{let t=process.hrtime.bigint(),s=e.limit||100,i=e.min_confidence||.5,n=e.include_types||[],r="SELECT * FROM entities WHERE confidence >= ?",o=[i];n.length>0&&(r+=` AND type IN (${n.map(()=>"?").join(",")})`,o.push(...n)),r+=" ORDER BY mention_count DESC LIMIT ?",o.push(s);let a=await this.db.dbAll(r,o),c=a.map(_=>_.name);if(c.length===0)return{nodes:[],edges:[],stats:{entities:0,relationships:0}};let l=`
        SELECT * FROM relationships 
        WHERE confidence >= ? 
        AND entity1 IN (${c.map(()=>"?").join(",")})
        AND entity2 IN (${c.map(()=>"?").join(",")})
        ORDER BY confidence DESC
      `,h=[i,...c,...c],d=await this.db.dbAll(l,h),m=a.map(_=>({id:_.name,label:_.name,type:_.type,confidence:_.confidence,mention_count:_.mention_count,size:Math.max(10,Math.min(50,_.mention_count*5))})),p=d.map((_,E)=>({id:`edge_${E}`,source:_.entity1,target:_.entity2,label:_.relation,confidence:_.confidence,weight:_.confidence})),y=process.hrtime.bigint(),f=Number(y-t)/1e6;return console.log(`\u2705 Entity graph generated (${f.toFixed(2)}ms) - ${m.length} nodes, ${p.length} edges`),{nodes:m,edges:p,stats:{entities:m.length,relationships:p.length,processing_time:f}}}catch(t){throw console.error(`\u274C Failed to generate entity graph: ${t.message}`),t}}async findSimilarEntities(e,t=10){try{let s=`
        SELECT 
          CASE 
            WHEN r1.entity1 = ? THEN r2.entity1
            WHEN r1.entity2 = ? THEN r2.entity2
            ELSE NULL
          END as similar_entity,
          COUNT(*) as shared_relationships,
          AVG(r1.confidence) as avg_confidence
        FROM relationships r1
        JOIN relationships r2 ON (
          (r1.entity1 = ? AND r2.entity1 = r1.entity2) OR
          (r1.entity2 = ? AND r2.entity2 = r1.entity1) OR
          (r1.entity1 = ? AND r2.entity2 = r1.entity2) OR
          (r1.entity2 = ? AND r2.entity1 = r1.entity1)
        )
        WHERE similar_entity IS NOT NULL 
        AND similar_entity != ?
        GROUP BY similar_entity
        ORDER BY shared_relationships DESC, avg_confidence DESC
        LIMIT ?
      `,i=[e,e,e,e,e,e,e,t];return(await this.db.dbAll(s,i)).map(r=>({entity:r.similar_entity,shared_relationships:r.shared_relationships,similarity_score:r.avg_confidence}))}catch(s){throw console.error(`\u274C Failed to find similar entities: ${s.message}`),s}}async getEntityStats(){try{let e=await this.db.dbGet("SELECT COUNT(*) as count FROM entities"),t=await this.db.dbGet("SELECT COUNT(*) as count FROM relationships"),s=await this.db.dbAll(`
        SELECT type, COUNT(*) as count 
        FROM entities 
        GROUP BY type 
        ORDER BY count DESC
      `),i=await this.db.dbAll(`
        SELECT relation, COUNT(*) as count 
        FROM relationships 
        GROUP BY relation 
        ORDER BY count DESC
        LIMIT 20
      `),n=await this.db.dbAll(`
        SELECT name, type, mention_count, confidence 
        FROM entities 
        ORDER BY mention_count DESC 
        LIMIT 10
      `);return{total_entities:e.count,total_relationships:t.count,entity_types:s,relation_types:i,top_entities:n}}catch(e){throw console.error(`\u274C Failed to get entity statistics: ${e.message}`),e}}async updateEntity(e,t){try{let s=[],i=[];for(let[o,a]of Object.entries(t))o==="metadata"?(s.push(`${o} = ?`),i.push(JSON.stringify(a))):o==="updated_at"?(s.push(`${o} = ?`),i.push(a instanceof Date?a.toISOString():a)):(s.push(`${o} = ?`),i.push(a));if(s.length===0)throw new Error("No valid fields to update");i.push(e);let n=`UPDATE entities SET ${s.join(", ")} WHERE id = ?`;if((await this.db.dbRun(n,i)).changes===0)throw new Error(`Entity not found: ${e}`);return console.log(`\u2705 Entity updated: ${e}`),!0}catch(s){throw console.error(`\u274C Failed to update entity: ${s.message}`),s}}async deleteEntity(e){try{let t=await this.db.dbGet("SELECT name FROM entities WHERE id = ?",[e]);if(!t)throw new Error(`Entity not found: ${e}`);await this.db.dbRun("DELETE FROM relationships WHERE entity1 = ? OR entity2 = ?",[t.name,t.name]),await this.db.dbRun("DELETE FROM memory_entity_links WHERE entity_id = ?",[e]);let s=await this.db.dbRun("DELETE FROM entities WHERE id = ?",[e]);return console.log(`\u2705 Entity deleted: ${t.name}`),!0}catch(t){throw console.error(`\u274C Failed to delete entity: ${t.message}`),t}}};u(vt,"EntityRelationshipManager");var Ct=vt;vn.exports={EntityRelationshipManager:Ct}});var kt=g((oh,An)=>{var Rt=class Rt{constructor(e,t){var s;this.databaseOps=e,this.config=t,this.stats={total_entries:0,last_cleanup:null,cleanup_count:0,operation_counts:{store:0,query:0,search:0,batch:0},performance_metrics:{avg_store_time:0,avg_query_time:0,avg_search_time:0,slow_operations:0}},this.batchQueue=[],this.batchSize=((s=t.performance)==null?void 0:s.batch_size)||50,this.batchTimeout=null,this.connectionLock=!1,this.connectionQueue=[],this.lastActivity=Date.now(),this.preparedStatements={}}prepareStatements(){process.env.NOVA_MCP_MODE||console.error("\u2705 Prepared statements initialized for performance optimization")}async storeBatch(e){if(!Array.isArray(e)||e.length===0)return[];try{let t=process.hrtime.bigint(),s=`
        INSERT INTO memory_entries 
        (content, memory_type, session_id, timestamp, tags, tool_used, confidence_score, metadata, embedding)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,i=[];for(let a of e){(a.confidence_score<0||a.confidence_score>1)&&(a.confidence_score=Math.max(0,Math.min(1,a.confidence_score)));let c=[a.content,a.memory_type,a.session_id,a.timestamp.toISOString(),JSON.stringify(a.tags),a.tool_used,a.confidence_score,JSON.stringify(a.metadata),a.embedding?JSON.stringify(a.embedding):null],l=await this.databaseOps.dbRun(s,c);i.push(l.lastID.toString())}this.stats.total_entries+=e.length,this.stats.operation_counts.batch++;let n=process.hrtime.bigint(),r=Number(n-t)/1e6,o=r/e.length;return this._updatePerformanceMetrics("batch",r),console.log(`\u2705 Batch stored ${e.length} entries (${r.toFixed(2)}ms total, ${o.toFixed(2)}ms avg)`),i}catch(t){throw console.error(`\u274C Failed to batch store memories: ${t.message}`),t}}async cleanup(e=30){try{let t=process.hrtime.bigint();if(this.connectionLock)return console.log("\u26A0\uFE0F Database is locked, cleanup skipped"),{cleaned:0,message:"Database locked, cleanup skipped"};let s=new Date;s.setDate(s.getDate()-e);let n=await this.databaseOps.dbRun(`
        DELETE FROM memory_entries 
        WHERE timestamp < ? 
        AND confidence_score < 0.5
      `,[s.toISOString()]);this.stats.cleanup_count++,this.stats.last_cleanup=new Date;let r=process.hrtime.bigint(),o=Number(r-t)/1e6;return console.log(`\u2705 Cleaned up ${n.changes} old memory entries (${o.toFixed(2)}ms)`),{cleaned:n.changes,cutoff_date:s,duration:o}}catch(t){if(t.code==="SQLITE_BUSY")return console.log("\u26A0\uFE0F Database is busy, cleanup skipped"),{cleaned:0,message:"Database busy, cleanup skipped"};throw console.error(`\u274C Failed to cleanup memories: ${t.message}`),t}}async getSystemStats(){try{let e=process.hrtime.bigint(),t=await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM memory_entries"),s=await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM entities"),i=await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM relationships"),n=await this.databaseOps.dbGet("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()"),r=await this.databaseOps.dbGet("SELECT AVG(confidence_score) as avg FROM memory_entries"),o=await this.databaseOps.dbGet(`
        SELECT COUNT(*) as count 
        FROM memory_entries 
        WHERE timestamp > datetime('now', '-24 hours')
      `),a=process.hrtime.bigint(),c=Number(a-e)/1e6;return{database:{memories:t.count,entities:s.count,relationships:i.count,size_bytes:n.size||0,avg_confidence:r.avg||0},activity:{recent_24h:o.count,last_cleanup:this.stats.last_cleanup,cleanup_count:this.stats.cleanup_count},performance:{...this.stats.performance_metrics,stats_generation_time:c},operations:this.stats.operation_counts}}catch(e){throw console.error(`\u274C Failed to get system statistics: ${e.message}`),e}}async optimizeDatabase(){try{let e=process.hrtime.bigint();await this.databaseOps.dbRun("ANALYZE");let t=await this.databaseOps.dbGet("SELECT freelist_count, page_count FROM pragma_freelist_count(), pragma_page_count()"),s=t.freelist_count/t.page_count,i=!1;s>.1&&(await this.databaseOps.dbRun("VACUUM"),i=!0),await this.databaseOps.dbRun("PRAGMA optimize");let n=process.hrtime.bigint(),r=Number(n-e)/1e6;return console.log(`\u2705 Database optimization completed (${r.toFixed(2)}ms)${i?" - VACUUM performed":""}`),{duration:r,vacuum_performed:i,free_page_ratio:s,total_pages:t.page_count}}catch(e){throw console.error(`\u274C Failed to optimize database: ${e.message}`),e}}trackOperation(e,t){this.stats.operation_counts[e]!==void 0&&this.stats.operation_counts[e]++,this._updatePerformanceMetrics(e,t),t>100&&(this.stats.performance_metrics.slow_operations++,console.warn(`\u26A0\uFE0F Slow ${e} operation: ${t.toFixed(2)}ms`)),this.lastActivity=Date.now()}getConnectionHealth(){let e=Date.now()-this.lastActivity;return{is_locked:this.connectionLock,queue_length:this.connectionQueue.length,time_since_activity:e,is_healthy:!this.connectionLock&&e<3e5,prepared_statements:Object.keys(this.preparedStatements).length}}async close(){if(this.databaseOps&&this.databaseOps.db)return this.connectionLock=!0,await new Promise(e=>setTimeout(e,100)),new Promise(e=>{this.databaseOps.db.close(t=>{t?console.error("Error closing database:",t.message):console.error("\u2705 Memory system database closed"),this.databaseOps.db=null,this.connectionLock=!1,e()})})}_updatePerformanceMetrics(e,t){let s=`avg_${e}_time`;if(this.stats.performance_metrics[s]!==void 0){let i=this.stats.performance_metrics[s],n=this.stats.operation_counts[e]||1;this.stats.performance_metrics[s]=(i*(n-1)+t)/n}}resetStats(){this.stats.operation_counts={store:0,query:0,search:0,batch:0},this.stats.performance_metrics={avg_store_time:0,avg_query_time:0,avg_search_time:0,slow_operations:0},process.env.NOVA_MCP_MODE||console.error("\u2705 Performance statistics reset")}async generateReport(){try{let e=await this.getSystemStats(),t=this.getConnectionHealth();return{timestamp:new Date().toISOString(),system:e,connection:t,recommendations:this._generateRecommendations(e,t)}}catch(e){throw console.error(`\u274C Failed to generate performance report: ${e.message}`),e}}_generateRecommendations(e,t){let s=[];return e.performance.slow_operations>10&&s.push({type:"performance",priority:"high",message:"High number of slow operations detected. Consider optimizing queries or adding indexes."}),e.database.size_bytes>100*1024*1024&&s.push({type:"storage",priority:"medium",message:"Database size is large. Consider running cleanup or archiving old data."}),t.is_healthy||s.push({type:"connection",priority:"high",message:"Database connection issues detected. Check for locks or high query load."}),s}};u(Rt,"PerformanceMonitor");var Mt=Rt;An.exports={PerformanceMonitor:Mt}});var xt=g((ch,Rn)=>{var nc={storeExtension:{structured:{type:"object",required:!1,description:"AI: Please extract entities, relationships, and metadata from the content",properties:{entities:{type:"array",description:"Main entities mentioned (services, components, people, technologies)",items:{type:"string",minLength:2},examples:[["UserAuthService","TokenManager","PostgreSQL"]]},relationships:{type:"array",description:"Relationships between entities",items:{type:"object",required:["subject","relation","object"],properties:{subject:{type:"string",description:"The entity that has the relationship"},relation:{type:"string",description:"Type of relationship (depends_on, uses, contains, etc.)"},object:{type:"string",description:"The entity being related to"},context:{type:"string",description:"Additional context about the relationship"}}},examples:[[{subject:"UserAuthService",relation:"depends_on",object:"TokenManager",context:"for JWT validation"}]]},contradicts:{type:"array",description:"Memory IDs that this information contradicts",items:{type:"integer",minimum:1},examples:[[12345,67890]]},keywords:{type:"array",description:"Important keywords for search (beyond entities)",items:{type:"string",minLength:2},maxItems:10,examples:[["authentication","JWT","security"]]},category:{type:"string",description:"Hierarchical category (e.g., 'architecture/auth', 'api/endpoints')",pattern:"^[a-z]+(/[a-z]+)*$",examples:["architecture/auth","database/schema","api/endpoints"]},summary:{type:"string",description:"One-line summary of the memory",maxLength:200},confidence:{type:"number",description:"AI's confidence in the extraction (0-1)",minimum:0,maximum:1,default:.8}}}},searchExtension:{structured_search:{type:"object",required:!1,description:"Search using structured data",properties:{entity:{type:"string",description:"Search for memories containing this entity"},relation:{type:"string",description:"Search for specific relationship types"},category:{type:"string",description:"Filter by category"},has_conflicts:{type:"boolean",description:"Only show memories with conflicts"}}}}},Mn={isValidCategory(T){return/^[a-z]+(\/[a-z]+)*$/.test(T)},isValidRelation(T){return["depends_on","uses","contains","implements","extends","imports","exports","calls","connects_to","stores_in","reads_from","writes_to","authenticates_with","validates","transforms","does_not_use","replaces","conflicts_with"].includes(T)},validateStructuredData(T){let e=[];return T.entities&&!Array.isArray(T.entities)&&e.push("entities must be an array"),T.relationships&&(Array.isArray(T.relationships)?T.relationships.forEach((t,s)=>{(!t.subject||!t.relation||!t.object)&&e.push(`relationship[${s}] missing required fields`)}):e.push("relationships must be an array")),T.category&&!Mn.isValidCategory(T.category)&&e.push("category must match pattern: lowercase/lowercase"),e}};Rn.exports={structuredMemorySchema:nc,validators:Mn}});var xn=g((lh,kn)=>{var{validators:rc}=xt(),Nt=class Nt{validate(e){if(!e||typeof e!="object")return{valid:!1,errors:["Structured data must be an object"],normalized:null};let t=rc.validateStructuredData(e);if(t.length>0)return{valid:!1,errors:t,normalized:null};let s=this.normalize(e);return{valid:!0,errors:[],normalized:s}}normalize(e){let t={entities:[],relationships:[],contradicts:[],keywords:[],category:null,summary:null,confidence:.8};if(e.entities){let s=new Set;t.entities=e.entities.map(i=>i.trim()).filter(i=>i.length>=2).filter(i=>{let n=i.toLowerCase();return s.has(n)?!1:(s.add(n),!0)})}if(e.relationships&&(t.relationships=e.relationships.filter(s=>s.subject&&s.relation&&s.object).map(s=>({subject:s.subject.trim(),relation:s.relation.toLowerCase().replace(/\s+/g,"_"),object:s.object.trim(),context:s.context?s.context.trim():null}))),e.contradicts&&(t.contradicts=[...new Set(e.contradicts.filter(s=>Number.isInteger(s)&&s>0))]),e.keywords){let s=new Set;t.keywords=e.keywords.map(i=>i.toLowerCase().trim()).filter(i=>i.length>=2).filter(i=>s.has(i)?!1:(s.add(i),!0)).slice(0,10)}return e.category&&(t.category=e.category.toLowerCase()),e.summary&&(t.summary=e.summary.substring(0,200)),typeof e.confidence=="number"&&(t.confidence=Math.max(0,Math.min(1,e.confidence))),t}detectConflict(e,t){if(!e||!t)return null;let s=[];if(e.relationships&&t.relationships)for(let i of e.relationships)for(let n of t.relationships)this.areRelationshipsConflicting(i,n)&&s.push({type:"relationship",conflict:[i,n]});return s.length>0?s:null}areRelationshipsConflicting(e,t){if(e.subject===t.subject&&e.object===t.object){let s=[["depends_on","does_not_use"],["uses","does_not_use"],["contains","excludes"],["connects_to","disconnected_from"]];for(let[i,n]of s)if(e.relation===i&&t.relation===n||e.relation===n&&t.relation===i)return!0}return!1}};u(Nt,"StructuredMemoryValidator");var Ot=Nt;kn.exports={StructuredMemoryValidator:Ot}});var Nn=g((dh,On)=>{var Dt=class Dt{constructor(e){this.db=e,this.initialized=!1}async initialize(){if(!this.initialized)try{await this.db.dbRun(`
        CREATE TABLE IF NOT EXISTS structured_memory (
          memory_id INTEGER PRIMARY KEY,
          entities TEXT,
          relationships TEXT,
          keywords TEXT,
          category TEXT,
          contradicts TEXT,
          summary TEXT,
          confidence REAL DEFAULT 0.8,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (memory_id) REFERENCES memory_entries(id) ON DELETE CASCADE
        )
      `),await this.db.dbRun(`
        CREATE INDEX IF NOT EXISTS idx_structured_entities 
        ON structured_memory(entities)
      `),await this.db.dbRun(`
        CREATE INDEX IF NOT EXISTS idx_structured_category 
        ON structured_memory(category)
      `),await this.db.dbRun(`
        CREATE INDEX IF NOT EXISTS idx_structured_keywords 
        ON structured_memory(keywords)
      `),this.initialized=!0,console.log("\u2705 Structured memory storage initialized")}catch(e){throw console.error("\u274C Failed to initialize structured memory storage:",e),e}}async store(e,t){await this.initialize();let s=`
      INSERT OR REPLACE INTO structured_memory 
      (memory_id, entities, relationships, keywords, category, contradicts, summary, confidence)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `,i=[e,JSON.stringify(t.entities||[]),JSON.stringify(t.relationships||[]),(t.keywords||[]).join(" "),t.category||null,JSON.stringify(t.contradicts||[]),t.summary||null,t.confidence||.8];await this.db.dbRun(s,i),t.contradicts&&t.contradicts.length>0&&await this.storeConflicts(e,t.contradicts)}async storeConflicts(e,t){await this.db.dbRun(`
      CREATE TABLE IF NOT EXISTS memory_conflicts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        memory_id INTEGER,
        conflicts_with INTEGER,
        detected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (memory_id) REFERENCES memory_entries(id) ON DELETE CASCADE,
        FOREIGN KEY (conflicts_with) REFERENCES memory_entries(id) ON DELETE CASCADE,
        UNIQUE(memory_id, conflicts_with)
      )
    `);for(let s of t)try{await this.db.dbRun(`
          INSERT OR IGNORE INTO memory_conflicts (memory_id, conflicts_with)
          VALUES (?, ?)
        `,[e,s])}catch(i){console.error(`Failed to store conflict ${e} <-> ${s}:`,i)}}async get(e){await this.initialize();let t=await this.db.dbGet(`
      SELECT * FROM structured_memory WHERE memory_id = ?
    `,[e]);return t?{entities:JSON.parse(t.entities||"[]"),relationships:JSON.parse(t.relationships||"[]"),keywords:(t.keywords||"").split(" ").filter(Boolean),category:t.category,contradicts:JSON.parse(t.contradicts||"[]"),summary:t.summary,confidence:t.confidence}:null}async searchByEntity(e){await this.initialize();let s=await this.db.dbAll(`
      SELECT m.*, s.entities, s.relationships, s.category, s.summary
      FROM memory_entries m
      JOIN structured_memory s ON m.id = s.memory_id
      WHERE s.entities LIKE ?
      ORDER BY m.timestamp DESC
      LIMIT 50
    `,[`%"${e}"%`]);return this.formatSearchResults(s)}async searchByRelationship(e,t,s){await this.initialize();let i=`
      SELECT m.*, s.entities, s.relationships, s.category, s.summary
      FROM memory_entries m
      JOIN structured_memory s ON m.id = s.memory_id
      WHERE 1=1
    `,n=[];e&&(i+=" AND s.relationships LIKE ?",n.push(`%"subject":"${e}"%`)),t&&(i+=" AND s.relationships LIKE ?",n.push(`%"relation":"${t}"%`)),s&&(i+=" AND s.relationships LIKE ?",n.push(`%"object":"${s}"%`)),i+=" ORDER BY m.timestamp DESC LIMIT 50";let r=await this.db.dbAll(i,n);return this.formatSearchResults(r)}async searchByCategory(e){await this.initialize();let s=await this.db.dbAll(`
      SELECT m.*, s.entities, s.relationships, s.category, s.summary
      FROM memory_entries m
      JOIN structured_memory s ON m.id = s.memory_id
      WHERE s.category = ? OR s.category LIKE ?
      ORDER BY m.timestamp DESC
      LIMIT 50
    `,[e,`${e}/%`]);return this.formatSearchResults(s)}async searchByMemoryType(e){await this.initialize();let t=Array.isArray(e)?e:[e],i=`
      SELECT m.*, s.entities, s.relationships, s.category, s.summary
      FROM memory_entries m
      LEFT JOIN structured_memory s ON m.id = s.memory_id
      WHERE m.memory_type IN (${t.map(()=>"?").join(",")})
      ORDER BY m.timestamp DESC
      LIMIT 50
    `,n=await this.db.dbAll(i,t);return this.formatSearchResults(n)}async getConflictingMemories(){await this.initialize();let t=await this.db.dbAll(`
      SELECT DISTINCT m.*, s.entities, s.relationships, s.category, s.summary
      FROM memory_entries m
      JOIN structured_memory s ON m.id = s.memory_id
      WHERE s.contradicts != '[]'
      ORDER BY m.timestamp DESC
      LIMIT 50
    `);return this.formatSearchResults(t)}formatSearchResults(e){return e.map(t=>({id:t.id,content:t.content,timestamp:t.timestamp,type:t.memory_type,structured:{entities:JSON.parse(t.entities||"[]"),relationships:JSON.parse(t.relationships||"[]"),category:t.category,summary:t.summary}}))}};u(Dt,"StructuredMemoryStorage");var It=Dt;On.exports={StructuredMemoryStorage:It}});var Dn=g((uh,In)=>{var Ft=class Ft{constructor(e){this.storage=e}async search(e){let t=[];if(!(e.entity||e.relation||e.subject||e.object||e.category||e.has_conflicts||e.memory_type))return[];if(e.memory_type){let r=await this.storage.searchByMemoryType(e.memory_type);if(t.length===0&&r.length>0)t.push(...r);else if(t.length>0){let o=new Set(r.map(c=>c.id)),a=t.filter(c=>o.has(c.id));t.length=0,t.push(...a)}}if(e.entity){let r=await this.storage.searchByEntity(e.entity);if(t.length===0&&!e.memory_type)t.push(...r);else{let o=new Set(r.map(c=>c.id)),a=t.filter(c=>o.has(c.id));t.length=0,t.push(...a)}}if(e.relation||e.subject||e.object){let r=await this.storage.searchByRelationship(e.subject,e.relation,e.object);if(t.length===0&&!e.memory_type&&!e.entity)t.push(...r);else{let o=new Set(r.map(c=>c.id)),a=t.filter(c=>o.has(c.id));t.length=0,t.push(...a)}}if(e.category){let r=await this.storage.searchByCategory(e.category);if(t.length===0&&!e.memory_type&&!e.entity&&!e.relation&&!e.subject&&!e.object)t.push(...r);else{let o=new Set(r.map(c=>c.id)),a=t.filter(c=>o.has(c.id));t.length=0,t.push(...a)}}if(e.has_conflicts){let r=await this.storage.getConflictingMemories();if(t.length===0)t.push(...r);else{let o=new Set(r.map(c=>c.id)),a=t.filter(c=>o.has(c.id));t.length=0,t.push(...a)}}let i=new Set,n=t.filter(r=>i.has(r.id)?!1:(i.add(r.id),!0));return this.rankResults(n,e)}rankResults(e,t){return e.map(s=>{var n;let i=0;if(t.entity&&s.structured.entities){let r=t.entity.toLowerCase(),o=s.structured.entities.filter(a=>a.toLowerCase().includes(r)).length;i+=o*10}if(t.relation&&s.structured.relationships){let r=s.structured.relationships.filter(o=>o.relation===t.relation).length;i+=r*8}return t.category&&s.structured.category&&(s.structured.category===t.category?i+=5:(n=s.structured.category)!=null&&n.startsWith(t.category)&&(i+=3)),{...s,score:i}}).sort((s,i)=>i.score-s.score).slice(0,50)}async findRelated(e){let t=await this.storage.get(e);if(!t)return[];let s=[];for(let n of t.entities){let r=await this.storage.searchByEntity(n);s.push(...r.filter(o=>o.id!==e))}if(t.category){let n=await this.storage.searchByCategory(t.category);s.push(...n.filter(r=>r.id!==e))}let i=new Set;return s.filter(n=>i.has(n.id)?!1:(i.add(n.id),!0)).slice(0,10)}async getConflictGraph(e){let t=await this.storage.get(e);if(!t||!t.contradicts)return null;let s={root:e,conflicts:[]};for(let i of t.contradicts){let n=await this.storage.db.dbGet("SELECT * FROM memory_entries WHERE id = ?",[i]);if(n){let r=await this.storage.get(i);s.conflicts.push({id:i,content:n.content,structured:r})}}return s}};u(Ft,"StructuredMemorySearch");var Lt=Ft;In.exports={StructuredMemorySearch:Lt}});var qt=g((yh,Ln)=>{var{structuredMemorySchema:$t,validators:oc}=xt(),{StructuredMemoryValidator:ac}=xn(),{StructuredMemoryStorage:cc}=Nn(),{StructuredMemorySearch:lc}=Dn(),zt=class zt{constructor(e){this.validator=new ac,this.storage=new cc(e),this.search=new lc(this.storage),this.initialized=!1}async initialize(){this.initialized||(await this.storage.initialize(),this.initialized=!0,console.log("\u2705 Structured Memory feature initialized"))}async store(e,t){let s=this.validator.validate(t);if(!s.valid)return{success:!1,errors:s.errors};try{await this.storage.store(e,s.normalized);let i=await this.detectConflicts(e,s.normalized);return{success:!0,structured:s.normalized,conflicts:i}}catch(i){return console.error("Failed to store structured data:",i),{success:!1,errors:[i.message]}}}async detectConflicts(e,t){let s=[];if(t.relationships&&t.relationships.length>0)for(let i of t.relationships){let n=await this.storage.searchByRelationship(i.subject,null,i.object);for(let r of n){if(r.id===e)continue;let o=r.structured.relationships||[];for(let a of o)this.validator.areRelationshipsConflicting(i,a)&&s.push({type:"relationship_conflict",with_memory_id:r.id,current:i,existing:a})}}return s}async enhancedSearch(e){return await this.search.search(e)}async findRelated(e){return await this.search.findRelated(e)}async getConflicts(e){return await this.search.getConflictGraph(e)}getSchemaExtension(){return $t.storeExtension}getSearchSchemaExtension(){return $t.searchExtension}};u(zt,"StructuredMemory");var Pt=zt;Ln.exports={StructuredMemory:Pt,structuredMemorySchema:$t,validators:oc}});var Bt=g((fh,$n)=>{var hc=require("fs"),M=require("path"),{execSync:Fn}=require("child_process"),Ut=class Ut{constructor(e=null){this.projectPath=e||process.cwd(),this.config=null,this.configPath=null,this.buildConfigPaths()}buildConfigPaths(){this.configPaths=[M.join(this.projectPath,"nova-memory.config.js"),M.join(this.projectPath,".config","nova","config.js"),M.join(this.projectPath,".nova","nova-memory.config.js"),M.join(require("os").homedir(),".nova","nova-memory.config.js"),M.join(require("os").homedir(),".config","nova","config.js"),M.join(__dirname,"..","..","..","..","..","nova-memory.config.js")]}switchProject(e){this.projectPath=e,this.config=null,this.configPath=null,this.buildConfigPaths()}loadConfig(){this.config=null,this.configPath=null;for(let e of this.configPaths)if(this.tryLoadFromPath(e))return this.configPath=e,console.log(`\u{1F4CB} Loaded config from: ${e}`),this.config;return console.log("\u2139\uFE0F No config file found, using defaults"),this.config=this.getDefaultConfig(),this.config}tryLoadFromPath(e){try{if(hc.existsSync(e)){let t=M.resolve(e);delete require.cache[t];try{delete require.cache[require.resolve(e)]}catch{}return this.config=require(e),!0}}catch(t){console.warn(`\u26A0\uFE0F Failed to load config from ${e}:`,t.message)}return!1}getMemoryConfig(){return this.config||this.loadConfig(),this.config.memory||this.getDefaultConfig().memory}getProjectConfig(){var n,r,o;this.config||this.loadConfig();let e=(n=this.config.project)==null?void 0:n.projectPath,t=((r=this.config.project)==null?void 0:r.projectName)||null,s=((o=this.config.memory)==null?void 0:o.databasePath)||".nova/memory.db";if(!e){let a=this.detectProjectRoot();a?(e=a,t||(t=this.detectProjectName(e))):e=process.cwd()}let i={projectPath:e,projectName:t,databasePath:s};return M.isAbsolute(i.projectPath)||(i.projectPath=M.resolve(process.cwd(),i.projectPath)),M.isAbsolute(i.databasePath)||(i.databasePath=M.join(i.projectPath,i.databasePath)),i}detectProjectRoot(){try{let e=Fn("git rev-parse --show-toplevel",{encoding:"utf8",stdio:["pipe","pipe","ignore"]}).trim();return e?M.normalize(e):null}catch{return null}}detectProjectName(e){try{let t=Fn("git config --get remote.origin.url",{cwd:e,encoding:"utf8",stdio:["pipe","pipe","ignore"]}).trim();if(t){let s=t.match(/([^\/]+?)(?:\.git)?$/);if(s)return s[1]}}catch{}return M.basename(e)}getDefaultConfig(){return{memory:{globalMaxMemories:1e6,typeRetention:{error:{protect:!0,maxAgeDays:0,maxCount:0},context:{protect:!0,maxAgeDays:0,versioning:!0},observation:{maxAgeDays:90,maxCount:1e5,consolidate:!0},action:{maxAgeDays:30,maxCount:5e4},result:{maxAgeDays:60,maxCount:5e4,consolidate:!0},general:{maxAgeDays:30,maxCount:1e5,consolidate:!0}},versioning:{enabled:!0,trackEntities:!0,maxVersionsPerEntity:10},consolidation:{enabled:!0,onStore:!0,threshold:5},cleanup:{enabled:!0,interval:24,batchSize:1e3},export:{warningThreshold:9e5,autoExport:!0,format:"json",location:".nova/exports"}}}}reloadConfig(){return this.config=null,this.loadConfig()}};u(Ut,"ConfigLoader");var jt=Ut;$n.exports={ConfigLoader:jt}});var zn=g((Eh,Pn)=>{var Ht=class Ht{constructor(){this.errors=[],this.warnings=[]}validate(e){if(this.errors=[],this.warnings=[],!e||!e.memory)return this.errors.push("Missing memory configuration section"),{valid:!1,errors:this.errors};let t=e.memory;return this.validateGlobalSettings(t),this.validateTypeRetention(t.typeRetention),this.validateVersioning(t.versioning),this.validateCleanup(t.cleanup),this.validateExport(t.export),{valid:this.errors.length===0,errors:this.errors,warnings:this.warnings}}validateGlobalSettings(e){(typeof e.globalMaxMemories!="number"||e.globalMaxMemories<0)&&this.errors.push("globalMaxMemories must be a positive number"),e.globalMaxMemories>1e6&&this.warnings.push("globalMaxMemories exceeds recommended limit of 1M")}validateTypeRetention(e){if(!e||typeof e!="object"){this.errors.push("typeRetention must be an object");return}let t=["error","context","observation","action","result","general"];for(let[s,i]of Object.entries(e))t.includes(s)||this.warnings.push(`Unknown memory type: ${s}`),(typeof i.maxAgeDays!="number"||i.maxAgeDays<0)&&this.errors.push(`${s}.maxAgeDays must be a non-negative number`),i.maxCount!==void 0&&(typeof i.maxCount!="number"||i.maxCount<0)&&this.errors.push(`${s}.maxCount must be a non-negative number`),i.protect&&(i.maxAgeDays>0||i.maxCount&&i.maxCount>0)&&this.warnings.push(`${s} is protected but has deletion limits`)}validateVersioning(e){e&&(typeof e.enabled!="boolean"&&this.errors.push("versioning.enabled must be a boolean"),e.maxVersionsPerEntity!==void 0&&(typeof e.maxVersionsPerEntity!="number"||e.maxVersionsPerEntity<1)&&this.errors.push("versioning.maxVersionsPerEntity must be a positive number"))}validateCleanup(e){e&&(typeof e.enabled!="boolean"&&this.errors.push("cleanup.enabled must be a boolean"),(typeof e.interval!="number"||e.interval<0)&&this.errors.push("cleanup.interval must be a non-negative number (hours)"),(typeof e.batchSize!="number"||e.batchSize<1)&&this.errors.push("cleanup.batchSize must be a positive number"))}validateExport(e){if(!e)return;(typeof e.warningThreshold!="number"||e.warningThreshold<0||e.warningThreshold>1e6)&&this.errors.push("export.warningThreshold must be between 0 and 1000000");let t=["json","csv","sqlite"];e.format&&!t.includes(e.format)&&this.errors.push(`export.format must be one of: ${t.join(", ")}`),(!e.location||typeof e.location!="string")&&this.errors.push("export.location must be a valid path string")}};u(Ht,"ConfigValidator");var Wt=Ht;Pn.exports={ConfigValidator:Wt}});var jn=g((wh,qn)=>{var Vt=class Vt{constructor(e){this.db=e}async updateSchema(){console.log("\u{1F4CA} Updating database schema for memory management...");try{return await this.addVersioningColumns(),await this.createEntityVersionsTable(),await this.createMetadataTable(),await this.createIndexes(),console.log("\u2705 Schema updated successfully"),{success:!0}}catch(e){return console.error("\u274C Schema update failed:",e),{success:!1,error:e.message}}}async addVersioningColumns(){let e=[{name:"entity_key",type:"TEXT"},{name:"version",type:"INTEGER DEFAULT 1"},{name:"previous_id",type:"INTEGER"},{name:"is_latest",type:"BOOLEAN DEFAULT 1"},{name:"archived",type:"BOOLEAN DEFAULT 0"},{name:"consolidated_from",type:"TEXT"}];for(let t of e)try{await(this.db.run||this.db.dbRun).call(this.db,`
          ALTER TABLE memory_entries 
          ADD COLUMN ${t.name} ${t.type}
        `),console.log(`  \u2713 Added column: ${t.name}`)}catch(s){if(s.message.includes("duplicate column"))console.log(`  \u2139\uFE0F Column exists: ${t.name}`);else throw s}}async createEntityVersionsTable(){await(this.db.run||this.db.dbRun).call(this.db,`
      CREATE TABLE IF NOT EXISTS entity_versions (
        entity_key TEXT PRIMARY KEY,
        latest_memory_id INTEGER,
        version_count INTEGER DEFAULT 1,
        first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        metadata TEXT DEFAULT '{}',
        FOREIGN KEY (latest_memory_id) REFERENCES memory_entries(id)
      )
    `),console.log("  \u2713 Created entity_versions table")}async createMetadataTable(){await(this.db.run||this.db.dbRun).call(this.db,`
      CREATE TABLE IF NOT EXISTS metadata (
        key TEXT PRIMARY KEY,
        value TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `),console.log("  \u2713 Created metadata table")}async createIndexes(){let e=["CREATE INDEX IF NOT EXISTS idx_entity_key ON memory_entries(entity_key)","CREATE INDEX IF NOT EXISTS idx_version ON memory_entries(version)","CREATE INDEX IF NOT EXISTS idx_is_latest ON memory_entries(is_latest)","CREATE INDEX IF NOT EXISTS idx_memory_type_timestamp ON memory_entries(memory_type, timestamp)","CREATE INDEX IF NOT EXISTS idx_archived ON memory_entries(archived)"],t=this.db.run||this.db.dbRun;for(let s of e)await t.call(this.db,s);console.log("  \u2713 Created performance indexes")}};u(Vt,"SchemaUpdater");var Gt=Vt;qn.exports={SchemaUpdater:Gt}});var Bn=g((Sh,Un)=>{var Yt=class Yt{constructor(e){this.db=e}async migrate(){console.log("\u{1F504} Starting database migration...");try{return(await this.getMigrationStatus()).migrated?(console.log("  \u2139\uFE0F Database already migrated"),{success:!0,alreadyMigrated:!0}):(await this.migrateInBatches(),await this.markMigrationComplete(),console.log("\u2705 Migration completed successfully"),{success:!0,migrated:!0})}catch(e){return console.error("\u274C Migration failed:",e),{success:!1,error:e.message}}}async getMigrationStatus(){try{return{migrated:(await(this.db.get||this.db.dbGet).call(this.db,`
        SELECT COUNT(*) as count 
        FROM memory_entries 
        WHERE entity_key IS NOT NULL
      `)).count>0}}catch{return{migrated:!1}}}async migrateInBatches(e=1e3){let t=0,s=0;for(;;){let n=await(this.db.all||this.db.dbAll).call(this.db,`
        SELECT id, content, metadata, memory_type
        FROM memory_entries
        WHERE entity_key IS NULL
        ORDER BY id
        LIMIT ? OFFSET ?
      `,[e,t]);if(n.length===0)break;for(let r of n)await this.migrateMemory(r),s++;console.log(`  \u2713 Migrated ${s} memories...`),t+=e}console.log(`  \u2713 Total migrated: ${s} memories`)}async migrateMemory(e){try{let t=this.extractEntityKey(e);if(t)if(await(this.db.get||this.db.dbGet).call(this.db,`
          SELECT id, version FROM memory_entries 
          WHERE entity_key = ? AND is_latest = 1
        `,[t]))await(this.db.run||this.db.dbRun).call(this.db,`
            UPDATE memory_entries 
            SET entity_key = ?, version = 1, is_latest = 0
            WHERE id = ?
          `,[t,e.id]);else{let n=this.db.run||this.db.dbRun;await n.call(this.db,`
            UPDATE memory_entries 
            SET entity_key = ?, version = 1, is_latest = 1
            WHERE id = ?
          `,[t,e.id]),await n.call(this.db,`
            INSERT OR REPLACE INTO entity_versions 
            (entity_key, latest_memory_id, version_count, last_updated)
            VALUES (?, ?, 1, datetime('now'))
          `,[t,e.id])}}catch(t){console.warn(`  \u26A0\uFE0F Failed to migrate memory ${e.id}:`,t.message)}}extractEntityKey(e){var t;try{if(e.metadata){let i=JSON.parse(e.metadata);if(i.structured_data_used&&((t=i.auto_entities)==null?void 0:t.length)>0)return i.auto_entities[0]}let s=[/^(?:The\s+)?(\w+Service)\s+/i,/^(?:The\s+)?(\w+Manager)\s+/i,/^(?:The\s+)?(\w+Component)\s+/i,/^(\w+)\s+(?:handles|manages|is\s+responsible)/i];for(let i of s){let n=e.content.match(i);if(n)return n[1]}return null}catch{return null}}async markMigrationComplete(){await(this.db.run||this.db.dbRun).call(this.db,`
      INSERT OR REPLACE INTO metadata (key, value, updated_at)
      VALUES ('migration_version', '1.0', datetime('now'))
    `)}};u(Yt,"DatabaseMigration");var Xt=Yt;Un.exports={DatabaseMigration:Xt}});var Hn=g((vh,Wn)=>{var Qt=class Qt{constructor(){this.patterns=[/^(?:The\s+)?(\w+(?:Service|Manager|Controller|Handler|Component))\s+/i,/^(\w+)\s+(?:handles|manages|is\s+responsible|processes|controls)/i,/^UPDATE:\s+(\w+)\s+/i,/^BREAKING CHANGE:\s+(\w+)\s+/i,/^(?:The\s+)?(\w+)\s+(?:module|system|feature|component)\s+/i]}extractFromMemory(e){let t=this.extractFromStructured(e.structured);if(t)return t;let s=this.extractFromContent(e.content);if(s)return s;let i=this.extractFromMetadata(e.metadata);return i||null}extractFromStructured(e){if(!e)return null;if(e.entities&&e.entities.length>0)return this.normalizeEntityKey(e.entities[0]);if(e.relationships&&e.relationships.length>0){let t=e.relationships.map(i=>i.subject),s=this.findMainEntity(t);if(s)return this.normalizeEntityKey(s)}return null}extractFromContent(e){if(!e)return null;for(let t of this.patterns){let s=e.match(t);if(s&&s[1])return this.normalizeEntityKey(s[1])}return null}extractFromMetadata(e){if(!e)return null;try{let t=typeof e=="string"?JSON.parse(e):e;if(t.auto_entities&&t.auto_entities.length>0){let s=t.auto_entities.find(i=>i.length>2&&!["it","this","that","not"].includes(i.toLowerCase())&&/^[A-Z]/.test(i));if(s)return this.normalizeEntityKey(s)}}catch{}return null}findMainEntity(e){if(!e||e.length===0)return null;let t={};for(let n of e)t[n]=(t[n]||0)+1;let s=0,i=null;for(let[n,r]of Object.entries(t))r>s&&(s=r,i=n);return i}normalizeEntityKey(e){return e?e.trim().replace(/\s+/g,"").replace(/[^a-zA-Z0-9_]/g,""):null}generateEntityKey(e){let t=this.extractFromMemory(e);if(t)return t;let s=this.hashString(e.content||"");return`${e.memory_type}_${s}`}hashString(e){let t=0;for(let s=0;s<e.length;s++){let i=e.charCodeAt(s);t=(t<<5)-t+i,t=t&t}return Math.abs(t).toString(36).substring(0,8)}};u(Qt,"EntityExtractor");var Jt=Qt;Wn.exports={EntityExtractor:Jt}});var Vn=g((Mh,Gn)=>{var Zt=class Zt{constructor(e){this.db=e}async getLatestVersion(e){if(!e)return null;try{let t=this.db.get||this.db.dbGet,s=await t.call(this.db,`
        SELECT latest_memory_id, version_count
        FROM entity_versions
        WHERE entity_key = ?
      `,[e]);return s&&s.latest_memory_id?await t.call(this.db,`
          SELECT m.*, ? as version_count, sm.data as structured
          FROM memory_entries m
          LEFT JOIN structured_memory sm ON sm.memory_id = m.id
          WHERE m.id = ?
        `,[s.version_count,s.latest_memory_id]):await t.call(this.db,`
        SELECT m.*, 1 as version_count, sm.data as structured
        FROM memory_entries m
        LEFT JOIN structured_memory sm ON sm.memory_id = m.id
        WHERE m.entity_key = ? AND m.is_latest = 1
        ORDER BY m.id DESC
        LIMIT 1
      `,[e])}catch(t){return console.error("Failed to get latest version:",t),null}}async createNewVersion(e,t=null){try{let i=await(this.db.get||this.db.dbGet).call(this.db,`
        SELECT version_count, latest_memory_id
        FROM entity_versions
        WHERE entity_key = ?
      `,[e]);if(i){let n=i.version_count+1;return i.latest_memory_id&&await(this.db.run||this.db.dbRun).call(this.db,`
            UPDATE memory_entries 
            SET is_latest = 0 
            WHERE id = ?
          `,[i.latest_memory_id]),{version:n,previousId:i.latest_memory_id}}else return await(this.db.run||this.db.dbRun).call(this.db,`
          INSERT INTO entity_versions 
          (entity_key, version_count, first_seen, last_updated)
          VALUES (?, 1, datetime('now'), datetime('now'))
        `,[e]),{version:1,previousId:null}}catch(s){throw console.error("Failed to create new version:",s),s}}async updateLatestVersion(e,t){try{await(this.db.run||this.db.dbRun).call(this.db,`
        INSERT INTO entity_versions (entity_key, latest_memory_id, version_count, first_seen, last_updated)
        VALUES (?, ?, 1, datetime('now'), datetime('now'))
        ON CONFLICT(entity_key) DO UPDATE SET
          latest_memory_id = excluded.latest_memory_id,
          version_count = version_count + 1,
          last_updated = datetime('now')
      `,[e,t])}catch(s){throw console.error("Failed to update latest version:",s),s}}async getVersionHistory(e,t=10){if(!e)return[];try{return await(this.db.all||this.db.dbAll).call(this.db,`
        SELECT id, version, timestamp, content, metadata
        FROM memory_entries
        WHERE entity_key = ?
        ORDER BY version DESC
        LIMIT ?
      `,[e,t])}catch(s){return console.error("Failed to get version history:",s),[]}}async getVersionedEntities(){try{return await(this.db.all||this.db.dbAll).call(this.db,`
        SELECT entity_key, version_count, latest_memory_id, last_updated
        FROM entity_versions
        WHERE version_count > 1
        ORDER BY last_updated DESC
      `)}catch(e){return console.error("Failed to get versioned entities:",e),[]}}async cleanOldVersions(e,t){if(!(!e||!t))try{let i=await(this.db.all||this.db.dbAll).call(this.db,`
        SELECT id 
        FROM memory_entries
        WHERE entity_key = ? 
          AND is_latest = 0
        ORDER BY version DESC
        LIMIT -1 OFFSET ?
      `,[e,t-1]);if(i.length>0){let n=i.map(o=>o.id);await(this.db.run||this.db.dbRun).call(this.db,`
          UPDATE memory_entries 
          SET archived = 1 
          WHERE id IN (${n.map(()=>"?").join(",")})
        `,n),console.log(`Archived ${i.length} old versions of ${e}`)}}catch(s){console.error("Failed to clean old versions:",s)}}async isLatestVersion(e){try{let s=await(this.db.get||this.db.dbGet).call(this.db,`
        SELECT is_latest 
        FROM memory_entries 
        WHERE id = ?
      `,[e]);return(s==null?void 0:s.is_latest)===1}catch{return!0}}};u(Zt,"VersionTracker");var Kt=Zt;Gn.exports={VersionTracker:Kt}});var Yn=g((kh,Xn)=>{var ts=class ts{constructor(){this.similarityThreshold=.7}async analyzeUpdate(e,t){let s={isUpdate:!1,isDuplicate:!1,changeRatio:0,conflicts:[],changes:[]};return e.memory_type!==t.memory_type?s:e.structured&&t.structured?this.compareStructured(e,t,s):this.compareContent(e,t,s)}compareStructured(e,t,s){var l,h;let i=this.parseStructured(e.structured),n=this.parseStructured(t.structured);if(!i||!n)return this.compareContent(e,t,s);let r=this.compareArrays(i.entities||[],n.entities||[]),o=this.compareRelationships(i.relationships||[],n.relationships||[]),a=(((l=i.entities)==null?void 0:l.length)||0)+(((h=i.relationships)==null?void 0:h.length)||0),c=r.added.length+r.removed.length+o.changed.length;return s.changeRatio=a>0?c/a:0,(r.unchanged.length>0||o.unchanged.length>0)&&(s.isUpdate=!0,o.conflicts.length>0&&(s.conflicts=o.conflicts)),s.changeRatio===0&&(s.isDuplicate=!0),s.changes={entities:r,relationships:o},s}compareContent(e,t,s){let i=e.content.toLowerCase(),n=t.content.toLowerCase();if(i===n)return s.isDuplicate=!0,s;let r=this.calculateSimilarity(i,n);return r>this.similarityThreshold&&(s.isUpdate=!0,s.changeRatio=1-r,s.changes=this.findContentChanges(e.content,t.content)),s}compareArrays(e,t){let s=new Set(e),i=new Set(t);return{added:[...i].filter(n=>!s.has(n)),removed:[...s].filter(n=>!i.has(n)),unchanged:[...s].filter(n=>i.has(n))}}compareRelationships(e,t){let s={added:[],removed:[],changed:[],unchanged:[],conflicts:[]},i=new Map,n=new Map;e.forEach(r=>{let o=`${r.subject}-${r.object}`;i.set(o,r)}),t.forEach(r=>{let o=`${r.subject}-${r.object}`;n.set(o,r)});for(let[r,o]of i)if(!n.has(r))s.removed.push(o);else{let a=n.get(r);o.relation!==a.relation?(s.changed.push({old:o,new:a}),this.isConflictingRelation(o.relation,a.relation)&&s.conflicts.push({type:"relationship_change",old:o,new:a})):s.unchanged.push(o)}for(let[r,o]of n)i.has(r)||s.added.push(o);return s}isConflictingRelation(e,t){var i,n;let s={uses:["does_not_use","replaces"],implements:["does_not_implement"],depends_on:["independent_of"]};return((i=s[e])==null?void 0:i.includes(t))||((n=s[t])==null?void 0:n.includes(e))}calculateSimilarity(e,t){let s=new Set(e.split(/\s+/)),i=new Set(t.split(/\s+/)),n=[...s].filter(o=>i.has(o)),r=new Set([...s,...i]);return n.length/r.size}findContentChanges(e,t){let s=e.split(/\s+/),i=t.split(/\s+/);return{wordCount:{old:s.length,new:i.length},likely_changes:this.detectLikelyChanges(e,t)}}detectLikelyChanges(e,t){let s=[],i=e.match(/v?\d+(\.\d+)*/gi),n=t.match(/v?\d+(\.\d+)*/gi);return i&&n&&i[0]!==n[0]&&s.push(`Version change: ${i[0]} \u2192 ${n[0]}`),t.includes("no longer")&&!e.includes("no longer")&&s.push("Deprecation or removal detected"),t.includes("now uses")&&!e.includes("now uses")&&s.push("Technology change detected"),s}parseStructured(e){if(typeof e=="string")try{return JSON.parse(e)}catch{return null}return e}};u(ts,"UpdateDetector");var es=ts;Xn.exports={UpdateDetector:es}});var Qn=g((Oh,Jn)=>{var{UpdateDetector:dc}=Yn(),is=class is{constructor(e,t,s){this.db=e,this.versionTracker=t,this.entityExtractor=s,this.updateDetector=new dc}async preprocessMemory(e){try{let t=this.entityExtractor.extractFromMemory(e);if(!t)return e;let s=await this.versionTracker.getLatestVersion(t);if(!s)return e.entity_key=t,e.version=1,e.is_latest=!0,e;let i=await this.updateDetector.analyzeUpdate(s,e);return i.isUpdate?i.changeRatio<.3?await this.prepareInPlaceUpdate(s,e,t):await this.prepareNewVersion(s,e,t):i.isDuplicate?null:(e.entity_key=t,e.version=1,e.is_latest=!0,e)}catch(t){return console.error("Smart storage preprocessing failed:",t),e}}async prepareInPlaceUpdate(e,t,s){let i={...e,...t,id:e.id,entity_key:s,version:e.version,is_latest:!0,metadata:this.mergeMetadata(e.metadata,t.metadata)};return i._update_existing=!0,i._existing_id=e.id,i}async prepareNewVersion(e,t,s){let i=await this.versionTracker.createNewVersion(s);t.entity_key=s,t.version=i.version,t.previous_id=i.previousId,t.is_latest=!0;let n=typeof t.metadata=="string"?JSON.parse(t.metadata):t.metadata||{};return n.previous_version=e.version,n.version_reason="major_update",t.metadata=JSON.stringify(n),t}async postprocessMemory(e,t){if(!(!t||!t.entity_key))try{t.is_latest&&await this.versionTracker.updateLatestVersion(t.entity_key,e);let s=this.getVersioningConfig();s.maxVersionsPerEntity&&await this.versionTracker.cleanOldVersions(t.entity_key,s.maxVersionsPerEntity)}catch(s){console.error("Smart storage postprocessing failed:",s)}}mergeMetadata(e,t){try{let s=typeof e=="string"?JSON.parse(e):e||{},i=typeof t=="string"?JSON.parse(t):t||{};return JSON.stringify({...s,...i,updated_at:new Date().toISOString()})}catch{return t||"{}"}}getVersioningConfig(){return{enabled:!0,maxVersionsPerEntity:10}}shouldStore(e){return e!=null}};u(is,"SmartStorage");var ss=is;Jn.exports={SmartStorage:ss}});var Zn=g((Ih,Kn)=>{var rs=class rs{constructor(e,t){this.db=e,this.config=t,this.policies=t.memory.typeRetention||{}}async applyRetentionPolicies(){console.log("\u{1F4CB} Applying retention policies...");let e=[];for(let[t,s]of Object.entries(this.policies))if(!s.protect){let i=await this.applyTypePolicy(t,s);e.push(i)}return e}async applyTypePolicy(e,t){let s={byAge:0,byCount:0,type:e};t.maxAgeDays>0&&(s.byAge=await this.deleteByAge(e,t.maxAgeDays)),t.maxCount>0&&(s.byCount=await this.deleteByCount(e,t.maxCount));let i=s.byAge+s.byCount;return i>0&&console.log(`  \u2713 Deleted ${i} ${e} memories (age: ${s.byAge}, count: ${s.byCount})`),s}async deleteByAge(e,t){let i=await(this.db.run||this.db.dbRun).call(this.db,`
      DELETE FROM memory_entries
      WHERE memory_type = ?
        AND archived = 0
        AND is_latest = 1
        AND entity_key IS NULL
        AND julianday('now') - julianday(timestamp) > ?
    `,[e,t]);return(i==null?void 0:i.changes)||0}async deleteByCount(e,t){let s=this.db.run||this.db.dbRun,n=await(this.db.all||this.db.dbAll).call(this.db,`
      SELECT id FROM memory_entries
      WHERE memory_type = ?
        AND archived = 0
        AND is_latest = 1
        AND entity_key IS NULL
      ORDER BY timestamp DESC
      LIMIT -1 OFFSET ?
    `,[e,t]);if(n.length===0)return 0;let r=100,o=0;for(let a=0;a<n.length;a+=r){let l=n.slice(a,a+r).map(m=>m.id),h=l.map(()=>"?").join(","),d=await s.call(this.db,`
        DELETE FROM memory_entries
        WHERE id IN (${h})
      `,l);o+=(d==null?void 0:d.changes)||0}return o}async getRetentionStats(){return(await(this.db.all||this.db.dbAll).call(this.db,`
      SELECT 
        memory_type,
        COUNT(*) as total,
        COUNT(CASE WHEN archived = 1 THEN 1 END) as archived,
        COUNT(CASE WHEN entity_key IS NOT NULL THEN 1 END) as versioned,
        MIN(timestamp) as oldest,
        MAX(timestamp) as newest
      FROM memory_entries
      GROUP BY memory_type
    `)).map(s=>{var i;return{...s,policy:this.policies[s.memory_type]||{},protected:((i=this.policies[s.memory_type])==null?void 0:i.protect)||!1}})}async needsCleanup(){let t=await(this.db.get||this.db.dbGet).call(this.db,`
      SELECT COUNT(*) as total FROM memory_entries WHERE archived = 0
    `),s=(t==null?void 0:t.total)||0,i=this.config.memory.globalMaxMemories||1e6;return s>i*.9}async getMemoriesByAge(e,t){return await(this.db.all||this.db.dbAll).call(this.db,`
      SELECT 
        COUNT(*) as count,
        CASE 
          WHEN julianday('now') - julianday(timestamp) <= ? THEN 'recent'
          ELSE 'old'
        END as age_group
      FROM memory_entries
      WHERE memory_type = ?
        AND archived = 0
      GROUP BY age_group
    `,[t,e])}};u(rs,"RetentionManager");var ns=rs;Kn.exports={RetentionManager:ns}});var tr=g((Lh,er)=>{var as=class as{constructor(){this.minSimilarity=.8}calculateSimilarity(e,t){if(e.memory_type!==t.memory_type)return 0;let s=this.textSimilarity(e.content,t.content),i=this.entitySimilarity(e,t),n=this.metadataSimilarity(e,t);return s*.5+i*.3+n*.2}textSimilarity(e,t){let s=new Set(e.toLowerCase().split(/\s+/)),i=new Set(t.toLowerCase().split(/\s+/)),n=new Set([...s].filter(o=>i.has(o))),r=new Set([...s,...i]);return r.size>0?n.size/r.size:0}entitySimilarity(e,t){let s=this.extractEntities(e),i=this.extractEntities(t);if(s.size===0||i.size===0)return 0;let n=new Set([...s].filter(o=>i.has(o))),r=new Set([...s,...i]);return n.size/r.size}extractEntities(e){var s;let t=new Set;if((s=e.structured)!=null&&s.entities&&e.structured.entities.forEach(i=>t.add(i)),e.metadata){let i=typeof e.metadata=="string"?JSON.parse(e.metadata):e.metadata;i.auto_entities&&i.auto_entities.forEach(n=>t.add(n))}return e.tags&&(typeof e.tags=="string"?JSON.parse(e.tags):e.tags).forEach(n=>t.add(n)),t}metadataSimilarity(e,t){let s=typeof e.metadata=="string"?JSON.parse(e.metadata):e.metadata||{},i=typeof t.metadata=="string"?JSON.parse(t.metadata):t.metadata||{},n=0,r=0,o=new Set([...Object.keys(s),...Object.keys(i)]);for(let a of o)a in s&&a in i&&(r++,s[a]===i[a]&&n++);return r>0?n/r:0}findSimilarGroups(e){let t=[],s=new Set;for(let i=0;i<e.length;i++){if(s.has(i))continue;let n=[e[i]];s.add(i);for(let r=i+1;r<e.length;r++){if(s.has(r))continue;this.calculateSimilarity(e[i],e[r])>=this.minSimilarity&&(n.push(e[r]),s.add(r))}n.length>1&&t.push(n)}return t}};u(as,"SimilarityDetector");var os=as;er.exports={SimilarityDetector:os}});var ir=g(($h,sr)=>{var{SimilarityDetector:mc}=tr(),ls=class ls{constructor(e){this.db=e,this.similarityDetector=new mc}async consolidateByType(e,t={}){let{threshold:s=5,batchSize:i=100}=t;console.log(`\u{1F504} Starting consolidation for ${e} memories...`);let n=0,r=0;for(;;){let o=await this.getMemoriesToConsolidate(e,i,r);if(o.length===0)break;let a=this.similarityDetector.findSimilarGroups(o);for(let c of a)c.length>=s&&(await this.consolidateGroup(c),n+=c.length-1);r+=i}return console.log(`\u2705 Consolidated ${n} ${e} memories`),{consolidated:n,type:e}}async getMemoriesToConsolidate(e,t,s){return await(this.db.all||this.db.dbAll).call(this.db,`
      SELECT * FROM memory_entries
      WHERE memory_type = ?
        AND archived = 0
        AND entity_key IS NULL
      ORDER BY timestamp DESC
      LIMIT ? OFFSET ?
    `,[e,t,s])}async consolidateGroup(e){e.sort((n,r)=>new Date(r.timestamp)-new Date(n.timestamp));let t=e[0],s=e.slice(1).map(n=>n.id),i=this.createConsolidatedContent(e);await this.updateConsolidatedMemory(t.id,i,s),await this.archiveConsolidatedMemories(s)}createConsolidatedContent(e){var o;let t=new Set,s=new Set,i=[],n=new Set;for(let a of e)a.content.split(`
`).filter(d=>d.trim()).forEach(d=>t.add(d.trim())),this.extractEntities(a).forEach(d=>s.add(d)),(o=a.structured)!=null&&o.relationships&&i.push(...a.structured.relationships),(typeof a.tags=="string"?JSON.parse(a.tags):a.tags||[]).forEach(d=>n.add(d));return{content:Array.from(t).join(`
`),metadata:{consolidated:!0,consolidation_count:e.length,consolidation_date:new Date().toISOString(),original_dates:e.map(a=>a.timestamp)},tags:Array.from(n),structured:{entities:Array.from(s),relationships:this.deduplicateRelationships(i)}}}extractEntities(e){var s;let t=new Set;if((s=e.structured)!=null&&s.entities&&e.structured.entities.forEach(i=>t.add(i)),e.metadata){let i=typeof e.metadata=="string"?JSON.parse(e.metadata):e.metadata;i.auto_entities&&i.auto_entities.forEach(n=>t.add(n))}return t}deduplicateRelationships(e){let t=new Set,s=[];for(let i of e){let n=`${i.subject}-${i.relation}-${i.object}`;t.has(n)||(t.add(n),s.push(i))}return s}async updateConsolidatedMemory(e,t,s){await(this.db.run||this.db.dbRun).call(this.db,`
      UPDATE memory_entries
      SET content = ?,
          metadata = ?,
          tags = ?,
          consolidated_from = ?
      WHERE id = ?
    `,[t.content,JSON.stringify(t.metadata),JSON.stringify(t.tags),JSON.stringify(s),e])}async archiveConsolidatedMemories(e){if(e.length===0)return;let t=this.db.run||this.db.dbRun,s=e.map(()=>"?").join(",");await t.call(this.db,`
      UPDATE memory_entries
      SET archived = 1
      WHERE id IN (${s})
    `,e)}async getConsolidationCandidates(){return await(this.db.get||this.db.dbGet).call(this.db,`
      SELECT 
        memory_type,
        COUNT(*) as count
      FROM memory_entries
      WHERE archived = 0
        AND entity_key IS NULL
        AND memory_type IN ('observation', 'result', 'general')
      GROUP BY memory_type
      HAVING COUNT(*) > 5
    `)||[]}};u(ls,"ConsolidationEngine");var cs=ls;sr.exports={ConsolidationEngine:cs}});var rr=g((zh,nr)=>{var{RetentionManager:uc}=Zn(),{ConsolidationEngine:pc}=ir(),ds=class ds{constructor(e,t){this.db=e,this.config=t,this.retentionManager=new uc(e,t),this.consolidationEngine=new pc(e),this.cleanupConfig=t.memory.cleanup||{enabled:!0,interval:24,batchSize:1e3},this.intervalId=null,this.isRunning=!1,this.lastRun=null}start(){if(!this.cleanupConfig.enabled){console.log("\u23F8\uFE0F Cleanup scheduler is disabled");return}if(this.intervalId){console.log("\u26A0\uFE0F Cleanup scheduler already running");return}this.runCleanup();let e=this.cleanupConfig.interval*60*60*1e3;this.intervalId=setInterval(()=>{this.runCleanup()},e),console.log(`\u{1F550} Cleanup scheduler started (interval: ${this.cleanupConfig.interval}h)`)}stop(){this.intervalId&&(clearInterval(this.intervalId),this.intervalId=null,console.log("\u23F9\uFE0F Cleanup scheduler stopped"))}async runCleanup(){if(this.isRunning){console.log("\u23F3 Cleanup already in progress, skipping...");return}this.isRunning=!0;let e=Date.now();console.log(`
\u{1F9F9} Starting scheduled cleanup...`);try{let t={retention:null,consolidation:null,duration:0,timestamp:new Date().toISOString()};return await this.retentionManager.needsCleanup()?(t.retention=await this.retentionManager.applyRetentionPolicies(),t.consolidation=await this.runConsolidation()):(console.log("  \u2139\uFE0F Memory count within limits, minimal cleanup only"),t.retention=await this.retentionManager.applyRetentionPolicies()),await this.updateCleanupMetadata(t),t.duration=Date.now()-e,this.lastRun=t,console.log(`\u2705 Cleanup completed in ${(t.duration/1e3).toFixed(2)}s`),t}catch(t){throw console.error("\u274C Cleanup failed:",t),t}finally{this.isRunning=!1}}async runConsolidation(){var i;let e=this.config.memory.typeRetention?Object.entries(this.config.memory.typeRetention).filter(([n,r])=>r.consolidate===!0).map(([n])=>n):[];if(e.length===0)return{types:[],total:0};let t=[],s=0;for(let n of e){let r=await this.consolidationEngine.consolidateByType(n,{threshold:((i=this.config.memory.consolidation)==null?void 0:i.threshold)||5,batchSize:this.cleanupConfig.batchSize});t.push(r),s+=r.consolidated}return{types:t,total:s}}async updateCleanupMetadata(e){await(this.db.run||this.db.dbRun).call(this.db,`
      INSERT OR REPLACE INTO metadata (key, value, updated_at)
      VALUES ('last_cleanup', ?, datetime('now'))
    `,[JSON.stringify(e)])}async getStatus(){let t=await(this.db.get||this.db.dbGet).call(this.db,`
      SELECT value, updated_at FROM metadata 
      WHERE key = 'last_cleanup'
    `),s=await this.retentionManager.getRetentionStats();return{enabled:this.cleanupConfig.enabled,running:this.isRunning,interval:this.cleanupConfig.interval,lastRun:t?JSON.parse(t.value):null,nextRun:this.getNextRunTime(),stats:s}}getNextRunTime(){if(!this.intervalId||!this.lastRun)return null;let e=new Date(this.lastRun.timestamp).getTime(),t=this.cleanupConfig.interval*60*60*1e3;return new Date(e+t).toISOString()}async forceCleanup(){return console.log("\u26A1 Force cleanup requested"),await this.runCleanup()}};u(ds,"CleanupScheduler");var hs=ds;nr.exports={CleanupScheduler:hs}});var ps=g((jh,or)=>{var j=require("fs").promises,me=require("path"),us=class us{constructor(e,t){this.db=e,this.config=t,this.exportConfig=t.memory.export||{warningThreshold:9e5,autoExport:!0,format:"json",location:".nova/exports"}}async needsExport(){let t=await(this.db.get||this.db.dbGet).call(this.db,`
      SELECT COUNT(*) as total FROM memory_entries WHERE archived = 0
    `);return((t==null?void 0:t.total)||0)>=this.exportConfig.warningThreshold}async exportMemories(e={}){let{format:t=this.exportConfig.format,types:s=null,dateRange:i=null,includeArchived:n=!1}=e;console.log(`\u{1F4E4} Starting memory export (format: ${t})...`);try{let r=await this.getMemoriesToExport(s,i,n);if(r.length===0)return console.log("  \u2139\uFE0F No memories to export"),null;let o=await this.ensureExportDirectory(),c=`memories-export-${new Date().toISOString().replace(/[:.]/g,"-")}.${t}`,l=me.join(o,c),h;switch(t){case"json":h=await this.exportToJSON(r,l);break;case"csv":h=await this.exportToCSV(r,l);break;case"sqlite":h=await this.exportToSQLite(r,l);break;default:throw new Error(`Unsupported export format: ${t}`)}return console.log(`\u2705 Exported ${r.length} memories to ${h}`),{path:h,count:r.length,format:t,timestamp:new Date().toISOString()}}catch(r){throw console.error("\u274C Export failed:",r),r}}async getMemoriesToExport(e,t,s){let i=this.db.all||this.db.dbAll,n="SELECT * FROM memory_entries WHERE 1=1",r=[];return s||(n+=" AND archived = 0"),e&&e.length>0&&(n+=` AND memory_type IN (${e.map(()=>"?").join(",")})`,r.push(...e)),t&&(t.start&&(n+=" AND timestamp >= ?",r.push(t.start)),t.end&&(n+=" AND timestamp <= ?",r.push(t.end))),n+=" ORDER BY timestamp DESC",await i.call(this.db,n,r)}async ensureExportDirectory(){let e=me.resolve(this.exportConfig.location);try{await j.mkdir(e,{recursive:!0})}catch(t){if(t.code!=="EEXIST")throw t}return e}async exportToJSON(e,t){let s={metadata:{exportDate:new Date().toISOString(),count:e.length,version:"1.0"},memories:e.map(i=>({...i,tags:typeof i.tags=="string"?JSON.parse(i.tags):i.tags,metadata:typeof i.metadata=="string"?JSON.parse(i.metadata):i.metadata}))};return await j.writeFile(t,JSON.stringify(s,null,2)),t}async exportToCSV(e,t){let i=["id","content","memory_type","timestamp","entity_key","version","is_latest","archived","tags","confidence_score"].join(",")+`
`;for(let n of e){let r=[n.id,`"${n.content.replace(/"/g,'""')}"`,n.memory_type,n.timestamp,n.entity_key||"",n.version||1,n.is_latest||1,n.archived||0,`"${n.tags||"[]"}"`,n.confidence_score||1];i+=r.join(",")+`
`}return await j.writeFile(t,i),t}async exportToSQLite(e,t){let s=`-- Memory Export ${new Date().toISOString()}

`;s+=`CREATE TABLE IF NOT EXISTS memory_entries (
      id INTEGER PRIMARY KEY,
      content TEXT NOT NULL,
      memory_type VARCHAR(50) NOT NULL,
      session_id VARCHAR(100),
      timestamp DATETIME,
      tags TEXT,
      tool_used VARCHAR(100),
      confidence_score FLOAT DEFAULT 1.0,
      metadata TEXT,
      embedding TEXT,
      entity_key TEXT,
      version INTEGER DEFAULT 1,
      previous_id INTEGER,
      is_latest BOOLEAN DEFAULT 1,
      archived BOOLEAN DEFAULT 0,
      consolidated_from TEXT
    );

`;for(let n of e){let r=[n.id,n.content.replace(/'/g,"''"),n.memory_type,n.session_id||"NULL",n.timestamp,n.tags||"[]",n.tool_used||"NULL",n.confidence_score||1,n.metadata||"{}",n.embedding||"NULL",n.entity_key||"NULL",n.version||1,n.previous_id||"NULL",n.is_latest||1,n.archived||0,n.consolidated_from||"NULL"];s+=`INSERT INTO memory_entries VALUES (${r.map(o=>o==="NULL"?o:`'${o}'`).join(", ")});
`}let i=t.replace(".sqlite",".sql");return await j.writeFile(i,s),i}async autoExport(){return this.exportConfig.autoExport&&await this.needsExport()?(console.log("\u26A0\uFE0F Memory limit approaching, triggering auto-export..."),await this.exportMemories()):null}async getExportHistory(){let e=me.resolve(this.exportConfig.location);try{let t=await j.readdir(e),s=[];for(let i of t)if(i.startsWith("memories-export-")){let n=await j.stat(me.join(e,i));s.push({filename:i,size:n.size,created:n.birthtime})}return s.sort((i,n)=>n.created-i.created)}catch{return[]}}};u(us,"MemoryExporter");var ms=us;or.exports={MemoryExporter:ms}});var cr=g((Bh,ar)=>{var{MemoryExporter:yc}=ps(),gs=class gs{constructor(e,t){var s;this.db=e,this.config=t,this.exporter=new yc(e,t),this.limits={global:t.memory.globalMaxMemories||1e6,warning:((s=t.memory.export)==null?void 0:s.warningThreshold)||9e5,critical:95e4},this.callbacks={onWarning:null,onCritical:null,onLimit:null}}async checkLimits(){let t=await(this.db.get||this.db.dbGet).call(this.db,`
      SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN archived = 0 THEN 1 END) as active,
        COUNT(CASE WHEN archived = 1 THEN 1 END) as archived
      FROM memory_entries
    `),s={total:(t==null?void 0:t.total)||0,active:(t==null?void 0:t.active)||0,archived:(t==null?void 0:t.archived)||0,percentage:((t==null?void 0:t.active)||0)/this.limits.global*100,status:"normal"};return s.active>=this.limits.global?(s.status="exceeded",this.handleLimitExceeded(s)):s.active>=this.limits.critical?(s.status="critical",this.handleCritical(s)):s.active>=this.limits.warning&&(s.status="warning",this.handleWarning(s)),s}async handleWarning(e){console.log(`\u26A0\uFE0F Memory usage at ${e.percentage.toFixed(1)}% - Warning threshold reached`);let t=await this.exporter.autoExport();return this.callbacks.onWarning&&this.callbacks.onWarning(e,t),t}async handleCritical(e){console.log(`\u{1F6A8} Memory usage at ${e.percentage.toFixed(1)}% - Critical threshold reached!`);let t=await this.exporter.exportMemories({includeArchived:!1});return this.callbacks.onCritical&&this.callbacks.onCritical(e,t),t}async handleLimitExceeded(e){console.log(`\u274C Memory limit exceeded! ${e.active} / ${this.limits.global}`),this.blockNewMemories=!0,this.callbacks.onLimit&&this.callbacks.onLimit(e)}async canAddMemory(){return this.blockNewMemories?!1:(await this.checkLimits()).status!=="exceeded"}async getUsageByType(){return(await(this.db.all||this.db.dbAll).call(this.db,`
      SELECT 
        memory_type,
        COUNT(*) as count,
        COUNT(CASE WHEN archived = 0 THEN 1 END) as active,
        COUNT(CASE WHEN entity_key IS NOT NULL THEN 1 END) as versioned
      FROM memory_entries
      GROUP BY memory_type
      ORDER BY count DESC
    `)).map(s=>{var n;let i=((n=this.config.memory.typeRetention)==null?void 0:n[s.memory_type])||{};return{...s,limit:i.maxCount||"unlimited",percentage:i.maxCount?s.active/i.maxCount*100:0}})}async getRecommendations(){let e=await this.checkLimits(),t=await this.getUsageByType(),s=[];e.percentage>80&&s.push({type:"global",severity:"high",action:"cleanup",message:"Run cleanup to remove old memories"}),e.archived>e.active*.5&&s.push({type:"global",severity:"medium",action:"purge",message:"Consider purging archived memories"});for(let i of t)i.percentage>90&&s.push({type:"type",memory_type:i.memory_type,severity:"high",action:"consolidate",message:`${i.memory_type} memories near limit, consider consolidation`});return s}setCallbacks(e){this.callbacks={...this.callbacks,...e}}async getStatus(){let e=await this.checkLimits(),t=await this.getUsageByType(),s=await this.getRecommendations(),i=await this.exporter.getExportHistory();return{limits:this.limits,usage:e,byType:t,recommendations:s,exportHistory:i.slice(0,5),blocked:this.blockNewMemories||!1}}async resetBlock(){return(await this.checkLimits()).percentage<95?(this.blockNewMemories=!1,console.log("\u2705 Memory limit block removed"),!0):(console.log("\u274C Cannot remove block - still over limit"),!1)}};u(gs,"LimitMonitor");var ys=gs;ar.exports={LimitMonitor:ys}});var Es=g((Hh,lr)=>{var{ConfigLoader:gc}=Bt(),{ConfigValidator:fc}=zn(),{SchemaUpdater:_c}=jn(),{DatabaseMigration:Ec}=Bn(),{EntityExtractor:bc}=Hn(),{VersionTracker:wc}=Vn(),{SmartStorage:Tc}=Qn(),{CleanupScheduler:Sc}=rr(),{LimitMonitor:Cc}=cr(),{MemoryExporter:vc}=ps(),_s=class _s{constructor(e,t=null){this.db=e,this.enabled=!1,this.projectPath=t,this.configLoader=new gc(t),this.configValidator=new fc,this.entityExtractor=new bc,this.versionTracker=new wc(e),this.smartStorage=new Tc(e,this.versionTracker,this.entityExtractor),this.config=null,this.loadConfig(),this.cleanupScheduler=null,this.limitMonitor=null,this.exporter=null}async initialize(){console.log("\u{1F680} Initializing Memory Management System...");try{await new _c(this.db).updateSchema(),await new Ec(this.db).migrate();let s=this.configValidator.validate(this.config);return s.valid?(s.warnings.length>0&&console.warn("\u26A0\uFE0F Configuration warnings:",s.warnings),this.cleanupScheduler=new Sc(this.db,this.config),this.limitMonitor=new Cc(this.db,this.config),this.exporter=new vc(this.db,this.config),this.enabled=!0,console.log("\u2705 Memory Management System initialized"),this.startBackgroundTasks(),!0):(console.error("\u274C Invalid configuration:",s.errors),!1)}catch(e){return console.error("\u274C Failed to initialize Memory Management:",e),this.enabled=!1,!1}}loadConfig(){return this.config=this.configLoader.loadConfig(),this.config}async preprocessMemory(e){var t;if(!this.enabled||!((t=this.config.memory.versioning)!=null&&t.enabled))return e;try{return this.limitMonitor&&!await this.limitMonitor.canAddMemory()?(console.error("\u274C Memory limit exceeded - cannot add new memories"),null):await this.smartStorage.preprocessMemory(e)}catch(s){return console.error("Memory preprocessing failed:",s),e}}async postprocessMemory(e,t){var s;if(!(!this.enabled||!((s=this.config.memory.versioning)!=null&&s.enabled)))try{await this.smartStorage.postprocessMemory(e,t)}catch(i){console.error("Memory postprocessing failed:",i)}}shouldStore(e){return this.enabled?e!==null:!0}startBackgroundTasks(){this.cleanupScheduler&&this.cleanupScheduler.start()}stop(){this.cleanupScheduler&&this.cleanupScheduler.stop(),this.enabled=!1}async getStats(){var t;let e={enabled:this.enabled,config:{versioning:((t=this.config.memory.versioning)==null?void 0:t.enabled)||!1,maxMemories:this.config.memory.globalMaxMemories,typeRetention:Object.keys(this.config.memory.typeRetention||{})},versions:await this.getVersionStats()};return this.limitMonitor&&(e.limits=await this.limitMonitor.getStatus()),this.cleanupScheduler&&(e.cleanup=await this.cleanupScheduler.getStatus()),e}async getVersionStats(){try{return await(this.db.get||this.db.dbGet).call(this.db,`
        SELECT 
          COUNT(DISTINCT entity_key) as entities_tracked,
          COUNT(*) as total_versions,
          AVG(version) as avg_versions_per_entity
        FROM memory_entries
        WHERE entity_key IS NOT NULL
      `)||{entities_tracked:0,total_versions:0}}catch{return{entities_tracked:0,total_versions:0}}}};u(_s,"MemoryManagement");var fs=_s;lr.exports={MemoryManagement:fs}});var mr=g((Vh,dr)=>{var hr=require("path"),{ConfigurationManager:Ac}=K(),ws=class ws{constructor(e=null){this.configManager=new Ac,this.originalConfig=e,this.processedConfig=null,this.projectContext={},this.initializeConfiguration()}initializeConfiguration(){this.isConfigLoaderFormat(this.originalConfig)?this.handleConfigLoaderFormat():this.handleLegacyFormat()}isConfigLoaderFormat(e){return e&&typeof e=="object"&&e.projectPath&&e.databasePath}handleConfigLoaderFormat(){let e=this.originalConfig;this.processedConfig=this.configManager.loadConfigFromLoader(e),this.projectContext={projectPath:e.projectPath,projectName:e.projectName||hr.basename(e.projectPath),databasePath:hr.resolve(e.projectPath,e.databasePath),memoryConfig:e.memoryConfig||{}}}handleLegacyFormat(){var e,t;this.processedConfig=this.configManager.loadConfig(this.originalConfig),this.projectContext={projectPath:((e=this.processedConfig.project)==null?void 0:e.path)||process.cwd(),projectName:((t=this.processedConfig.project)==null?void 0:t.name)||"default",databasePath:this.configManager.expandPath(this.processedConfig.storage.path),memoryConfig:{}}}getConfig(){return this.processedConfig}getProjectContext(){return this.projectContext}getDatabasePath(){return this.projectContext.databasePath}getProjectPath(){return this.projectContext.projectPath}getProjectName(){return this.projectContext.projectName}getMemoryConfig(){return this.projectContext.memoryConfig}validateConfiguration(){let e=this.projectContext;if(!e.projectPath)throw new Error("Project path is required");if(!e.databasePath)throw new Error("Database path is required");if(!e.projectName)throw new Error("Project name is required");return!0}switchProject(e){this.originalConfig=e,this.processedConfig=null,this.projectContext={},this.initializeConfiguration(),this.validateConfiguration()}getConfigurationSummary(){return{format:this.isConfigLoaderFormat(this.originalConfig)?"ConfigLoader":"Legacy",projectName:this.projectContext.projectName,projectPath:this.projectContext.projectPath,databasePath:this.projectContext.databasePath,hasMemoryConfig:Object.keys(this.projectContext.memoryConfig).length>0}}};u(ws,"ConfigurationCoordinator");var bs=ws;dr.exports={ConfigurationCoordinator:bs}});var pr=g((Jh,ur)=>{var{DatabaseOperations:Mc}=Ee(),{MemoryEntry:Yh,MemoryStorage:Rc}=G(),{SearchOperations:kc}=_t(),{EntityRelationshipManager:xc}=At(),{PerformanceMonitor:Oc}=kt(),{StructuredMemory:Nc}=qt(),{MemoryManagement:Ic}=Es(),Ss=class Ss{constructor(e,t){this.config=e,this.projectContext=t,this.components={},this.initializationOrder=["databaseOps","memoryStorage","searchOps","entityManager","performanceMonitor","structuredMemory","memoryManagement"]}async initialize(){try{for(let e of this.initializationOrder)await this.initializeComponent(e);return await this.postInitializationSetup(),this.components}catch(e){throw console.error(`\u274C Component initialization failed: ${e.message}`),await this.cleanup(),e}}async initializeComponent(e){try{switch(e){case"databaseOps":this.components.databaseOps=new Mc(this.projectContext.databasePath),this.components.databaseOps.initDatabase();break;case"memoryStorage":this.validateDependency("databaseOps",e),this.components.memoryStorage=new Rc(this.components.databaseOps,this.config);break;case"searchOps":this.validateDependency("databaseOps",e),this.components.searchOps=new kc(this.components.databaseOps,this.config),this.components.searchEngine=this.components.searchOps.searchEngine;break;case"entityManager":this.validateDependency("databaseOps",e),this.components.entityManager=new xc(this.components.databaseOps,this.config);break;case"performanceMonitor":this.validateDependency("databaseOps",e),this.components.performanceMonitor=new Oc(this.components.databaseOps,this.config),this.components.performanceMonitor.prepareStatements();break;case"structuredMemory":this.validateDependency("databaseOps",e),this.components.structuredMemory=new Nc(this.components.databaseOps),await this.components.structuredMemory.initialize().catch(t=>{console.error("Failed to initialize structured memory:",t)});break;case"memoryManagement":this.validateDependency("databaseOps",e),this.components.memoryManagement=new Ic(this.components.databaseOps,this.projectContext.projectPath);try{await this.components.memoryManagement.initialize()}catch(t){console.error("Warning: Memory management initialization failed:",t.message)}break;default:throw new Error(`Unknown component: ${e}`)}process.env.NOVA_MCP_MODE||console.log(`\u2705 Initialized component: ${e}`)}catch(t){throw console.error(`\u274C Failed to initialize ${e}: ${t.message}`),t}}validateDependency(e,t){if(!this.components[e])throw new Error(`Component ${t} requires ${e} to be initialized first`)}async postInitializationSetup(){try{this.components.db=this.components.databaseOps.db,this.components.preparedStatements={},this.components.stats={total_entries:0,cache_hits:0,cache_misses:0,queries_executed:0,average_query_time:0,last_updated:new Date().toISOString(),last_cleanup:null,cleanup_count:0},this.components.queryCache=new Map,process.env.NOVA_MCP_MODE||console.log(`\u2705 Component initialization completed for project: ${this.projectContext.projectName}`)}catch(e){throw console.error(`\u274C Post-initialization setup failed: ${e.message}`),e}}getComponents(){return this.components}getComponent(e){return this.components[e]}isInitialized(e){return!!this.components[e]}getInitializationStatus(){let e={};for(let t of this.initializationOrder)e[t]=this.isInitialized(t);return e}async cleanup(){let e=[...this.initializationOrder].reverse();for(let t of e)try{let s=this.components[t];s&&typeof s.cleanup=="function"&&await s.cleanup(),delete this.components[t]}catch(s){console.error(`\u274C Failed to cleanup ${t}: ${s.message}`)}delete this.components.db,delete this.components.searchEngine,delete this.components.preparedStatements,delete this.components.stats,this.components.queryCache&&(this.components.queryCache.clear(),delete this.components.queryCache)}validateInitialization(){for(let e of this.initializationOrder)if(!this.isInitialized(e))throw new Error(`Component ${e} failed to initialize`);return!0}};u(Ss,"ComponentInitializer");var Ts=Ss;ur.exports={ComponentInitializer:Ts}});var gr=g((Kh,yr)=>{var vs=class vs{constructor(e,t){this.components=e,this.projectContext=t,this.cleanupHooks=[]}async cleanup(){try{process.env.NOVA_MCP_MODE||console.log(`\u{1F9F9} Starting cleanup for project: ${this.projectContext.projectName}`),await this.executeCleanupHooks(),await this.closeDatabaseConnections(),this.clearCaches(),await this.cleanupComponents(),this.clearPreparedStatements(),process.env.NOVA_MCP_MODE||console.log(`\u2705 Cleanup completed for project: ${this.projectContext.projectName}`)}catch(e){throw console.error(`\u274C Cleanup error: ${e.message}`),e}}async executeCleanupHooks(){for(let e of this.cleanupHooks)try{await e()}catch(t){console.error(`\u274C Cleanup hook error: ${t.message}`)}this.cleanupHooks=[]}async closeDatabaseConnections(){try{this.components.db&&(await new Promise((e,t)=>{this.components.db.close(s=>{s?(console.error(`\u274C Database close error: ${s.message}`),t(s)):(process.env.NOVA_MCP_MODE||console.log("\u2705 Database connection closed"),e())})}),this.components.db=null)}catch(e){throw console.error(`\u274C Failed to close database: ${e.message}`),e}}clearCaches(){try{this.components.queryCache&&(this.components.queryCache.clear(),process.env.NOVA_MCP_MODE||console.log("\u2705 Query cache cleared")),this.clearCacheByPattern(["*"])}catch(e){console.error(`\u274C Failed to clear caches: ${e.message}`)}}clearCacheByPattern(e){try{if(!this.components.queryCache)return;for(let t of e)if(t==="*")this.components.queryCache.clear();else for(let[s]of this.components.queryCache)s.includes(t)&&this.components.queryCache.delete(s)}catch(t){console.error(`\u274C Failed to clear cache pattern: ${t.message}`)}}async cleanupComponents(){let e=["databaseOps","memoryStorage","searchOps","entityManager","performanceMonitor","structuredMemory","memoryManagement"];for(let t of e)try{let s=this.components[t];s&&typeof s.cleanup=="function"&&(await s.cleanup(),process.env.NOVA_MCP_MODE||console.log(`\u2705 Cleaned up component: ${t}`))}catch(s){console.error(`\u274C Failed to cleanup ${t}: ${s.message}`)}}clearPreparedStatements(){try{this.components.preparedStatements&&(this.components.preparedStatements={},process.env.NOVA_MCP_MODE||console.log("\u2705 Prepared statements cleared"))}catch(e){console.error(`\u274C Failed to clear prepared statements: ${e.message}`)}}registerCleanupHook(e){if(typeof e=="function")this.cleanupHooks.push(e);else throw new Error("Cleanup hook must be a function")}async forceCleanup(){try{await this.cleanup()}catch(e){console.error(`\u274C Force cleanup encountered errors: ${e.message}`)}Object.keys(this.components).forEach(e=>{delete this.components[e]})}isCleanupNeeded(){return this.components.db!==null||this.components.queryCache&&this.components.queryCache.size>0||Object.keys(this.components.preparedStatements||{}).length>0}getCleanupStatus(){return{databaseClosed:!this.components.db,cacheCleared:!this.components.queryCache||this.components.queryCache.size===0,statementsCleared:Object.keys(this.components.preparedStatements||{}).length===0,hooksRemaining:this.cleanupHooks.length}}};u(vs,"CleanupManager");var Cs=vs;yr.exports={CleanupManager:Cs}});var Er=g((ed,_r)=>{var{MemoryEntry:fr}=G(),{entityExtractor:Dc}=de(),Ms=class Ms{constructor(e,t,s){var i,n,r,o;this.components=e,this.config=t,this.projectContext=s,this.databaseOps=e.databaseOps,this.memoryStorage=e.memoryStorage,this.memoryManagement=e.memoryManagement,this.structuredMemory=e.structuredMemory,this.entityManager=e.entityManager,this.globalMaxMemories=(i=t.memory)==null?void 0:i.globalMaxMemories,this.typeRetention=(n=t.memory)==null?void 0:n.typeRetention,this.versioningEnabled=((o=(r=t.memory)==null?void 0:r.versioning)==null?void 0:o.enabled)||!1}async store(e){var t,s;try{let i=process.hrtime.bigint();if(e instanceof fr||(e=new fr(e)),(t=this.memoryManagement)!=null&&t.enabled&&(e=await this.memoryManagement.preprocessMemory(e),!this.memoryManagement.shouldStore(e)))return process.env.NOVA_MCP_MODE||console.log("\u23ED\uFE0F Skipping duplicate/versioned memory"),this.clearCacheByPattern(["query_","search_","stats_"]),null;await this.enforceMemoryLimits(),this.validateEntry(e);let n=await this.extractEntities(e);if(this.enhanceEntryMetadata(e,n),e.tags=n.enhancedTags||e.tags||[],e._update_existing&&e._existing_id)return await this.updateExistingEntry(e);let r=await this.storeNewEntry(e);if(e.structured&&this.structuredMemory)try{await this.structuredMemory.store(r,e.structured)}catch(c){console.error(`\u26A0\uFE0F Failed to store structured data: ${c.message}`)}n&&n.entities&&n.entities.length>0&&await this.storeEntityRelationships(r,n),(s=this.memoryManagement)!=null&&s.enabled&&await this.memoryManagement.postprocessMemory(r,e),this.clearCacheByPattern(["query_","search_","stats_"]);let o=process.hrtime.bigint(),a=Number(o-i)/1e6;return process.env.NOVA_MCP_MODE||console.log(`\u2705 Memory entry stored with ID: ${r} (${a.toFixed(2)}ms)`),this.components.stats&&(this.components.stats.total_entries=(this.components.stats.total_entries||0)+1,this.components.stats.last_updated=new Date().toISOString()),r}catch(i){throw console.error(`\u274C Failed to store memory entry: ${i.message}`),i}}async storeBatch(e){var i;let t=[],s=((i=this.config.performance)==null?void 0:i.batch_size)||50;try{for(let n=0;n<e.length;n+=s){let r=e.slice(n,n+s),o=await Promise.all(r.map(a=>this.store(a)));t.push(...o)}return process.env.NOVA_MCP_MODE||console.log(`\u2705 Batch stored ${t.length} memory entries`),t.filter(n=>n!==null)}catch(n){throw console.error(`\u274C Failed to store batch: ${n.message}`),n}}async enforceMemoryLimits(){if(this.globalMaxMemories&&this.globalMaxMemories>0){let e=await this.getMemoryCount();e>=this.globalMaxMemories&&console.warn(`\u26A0\uFE0F Memory limit reached (${e}/${this.globalMaxMemories}). Consider cleanup.`)}}validateEntry(e){if((e.confidence_score<0||e.confidence_score>1)&&(e.confidence_score=Math.max(0,Math.min(1,e.confidence_score))),!e.content||e.content.trim().length===0)throw new Error("Memory entry content is required");e.memory_type||(e.memory_type="general")}async extractEntities(e){var t,s,i;if(e.structured)return{entities:e.structured.entities||[],relationships:((t=e.structured.relationships)==null?void 0:t.map(n=>`${n.subject} \u2192 ${n.relation} \u2192 ${n.object}`))||[],filePaths:[],entityCount:((s=e.structured.entities)==null?void 0:s.length)||0,relationshipCount:((i=e.structured.relationships)==null?void 0:i.length)||0,filePathCount:0,enhancedTags:[...e.tags,...e.structured.keywords||[]]};try{return await Dc.extractEntities(e.content,e.tags)}catch(n){return console.error(`\u26A0\uFE0F Entity extraction failed: ${n.message}`),{entities:[],relationships:[],filePaths:[],entityCount:0,relationshipCount:0,filePathCount:0,enhancedTags:e.tags||[]}}}enhanceEntryMetadata(e,t){e.metadata={...e.metadata,auto_entities:t.entities,auto_relationships:t.relationships,auto_file_paths:t.filePaths||[],entity_count:t.entityCount,relationship_count:t.relationshipCount,file_path_count:t.filePathCount||0,entity_extraction_version:e.structured?"2.0-structured":"1.1",project:this.projectContext.projectPath,project_name:this.projectContext.projectName,database_path:this.projectContext.databasePath},e.structured&&(e.metadata.structured_data_used=!0,e.metadata.category=e.structured.category,e.metadata.summary=e.structured.summary)}async updateExistingEntry(e){let t=[e.content,e.session_id||null,JSON.stringify(e.tags),e.tool_used||null,e.confidence_score,JSON.stringify(e.metadata),e.entity_key||null,e.version||null,e.previous_id||null,e.is_latest!==void 0?e.is_latest?1:0:null,e._existing_id];return await this.databaseOps.dbRun(`
      UPDATE memory_entries 
      SET content = ?, session_id = ?, tags = ?, tool_used = ?, confidence_score = ?, metadata = ?, entity_key = ?, version = ?, previous_id = ?, is_latest = ?, timestamp = CURRENT_TIMESTAMP
      WHERE id = ?
    `,t),e._existing_id}async storeNewEntry(e){let t=[e.content,e.memory_type||"general",e.session_id||null,JSON.stringify(e.tags),e.tool_used||null,e.confidence_score,JSON.stringify(e.metadata),e.entity_key||null,e.version||null,e.previous_id||null,e.is_latest!==void 0?e.is_latest?1:0:null];return(await this.databaseOps.dbRun(`
      INSERT INTO memory_entries (content, memory_type, session_id, tags, tool_used, confidence_score, metadata, entity_key, version, previous_id, is_latest, timestamp)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `,t)).lastID.toString()}async storeEntityRelationships(e,t){if(this.entityManager&&t.entities.length>0)try{await this.entityManager.storeMemoryRelationships(e,t)}catch(s){console.error(`\u26A0\uFE0F Failed to store entity relationships: ${s.message}`)}}async getMemoryCount(){try{return(await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM memory_entries")).count}catch(e){return console.error(`\u274C Failed to get memory count: ${e.message}`),0}}clearCacheByPattern(e){try{if(!this.components.queryCache)return;for(let t of e)if(t==="*")this.components.queryCache.clear();else for(let[s]of this.components.queryCache)s.includes(t)&&this.components.queryCache.delete(s)}catch(t){console.error(`\u274C Failed to clear cache pattern: ${t.message}`)}}};u(Ms,"MemoryLifecycleManager");var As=Ms;_r.exports={MemoryLifecycleManager:As}});var wr=g((sd,br)=>{var ks=class ks{constructor(e,t,s){this.components=e,this.config=t,this.projectContext=s,this.databaseOps=e.databaseOps,this.searchOps=e.searchOps,this.searchEngine=e.searchEngine,this.queryCache=e.queryCache}async query(e={},t=null){try{let s=process.hrtime.bigint();t=t||this.config.query.default_limit;let i=`query_${JSON.stringify(e)}_${t}`,n=this.getFromCache(i);if(n){let d=process.hrtime.bigint(),m=Number(d-s)/1e6;return process.env.NOVA_MCP_MODE||console.log(`\u{1F680} Query served from cache (${m.toFixed(2)}ms)`),n}let r="SELECT * FROM memory_entries WHERE 1=1",o=[];e.memory_type&&(r+=" AND memory_type = ?",o.push(e.memory_type)),e.session_id&&(r+=" AND session_id = ?",o.push(e.session_id)),e.tool_used&&(r+=" AND tool_used = ?",o.push(e.tool_used)),e.min_confidence&&(r+=" AND confidence_score >= ?",o.push(e.min_confidence)),e.tags&&e.tags.length>0&&(r+=" AND tags LIKE ?",o.push(`%${e.tags[0]}%`)),e.content_search&&(r+=" AND content LIKE ?",o.push(`%${e.content_search}%`)),e.project_path&&(r+=" AND metadata LIKE ?",o.push(`%"project":"${e.project_path}"%`)),r+=" ORDER BY timestamp DESC",t&&(r+=" LIMIT ?",o.push(t));let c=(await this.databaseOps.dbAll(r,o)).map(d=>({...d,timestamp:new Date(d.timestamp),tags:JSON.parse(d.tags||"[]"),metadata:JSON.parse(d.metadata||"{}"),embedding:d.embedding?JSON.parse(d.embedding):null}));this.setCache(i,c);let l=process.hrtime.bigint(),h=Number(l-s)/1e6;return h>10&&console.warn(`\u26A0\uFE0F Slow query operation: ${h.toFixed(2)}ms (target: <10ms)`),process.env.NOVA_MCP_MODE||console.log(`\u2705 Query executed (${h.toFixed(2)}ms) - ${c.length} results`),c}catch(s){throw console.error(`\u274C Failed to query memories: ${s.message}`),s}}async search(e,t=null,s={}){try{if(s.mode){let n={smart:"hybrid",precise:"tfidf",fast:"bm25",balanced:"hybrid"};s.algorithm=n[s.mode]||"hybrid"}return this.config.projectPath&&!s.project_path&&(s.project_path=this.config.projectPath),await this.searchOps.search(e,t||this.config.query.default_limit,s)}catch(i){return console.error(`\u274C Failed to search memories: ${i.message}`),[]}}async advancedSearch(e,t={}){let s=t.outputMode||t.output_mode||"detailed";try{let i=process.hrtime.bigint(),{TextProcessor:n}=Y(),o=new n().tokenize(e),a,c;if(o.length<=1){a=`
          SELECT * FROM memory_entries 
          WHERE content LIKE ? OR tags LIKE ?
          ORDER BY timestamp DESC
        `;let y=`%${e}%`;c=[y,y]}else{a=`
          SELECT * FROM memory_entries 
          WHERE ${o.map(()=>"content LIKE ? OR tags LIKE ?").join(" OR ")}
          ORDER BY timestamp DESC
        `,c=[];for(let f of o)c.push(`%${f}%`,`%${f}%`)}let h=(await this.databaseOps.dbAll(a,c)).map(y=>({...y,id:y.id,timestamp:new Date(y.timestamp),tags:JSON.parse(y.tags||"[]"),metadata:JSON.parse(y.metadata||"{}"),embedding:y.embedding?JSON.parse(y.embedding):null})),d;if(h.length>0){if(t.mode){let f={smart:"hybrid",precise:"tfidf",fast:"bm25",balanced:"hybrid"}[t.mode]||"hybrid";f!==this.searchEngine.algorithm&&this.searchEngine.setAlgorithm(f)}else t.algorithm&&t.algorithm!==this.searchEngine.algorithm&&this.searchEngine.setAlgorithm(t.algorithm);d=this.searchEngine.search(e,h,t),t.limit&&(d.results=d.results.slice(0,t.limit),d.rankedDocuments=d.results.length)}else d={results:[],algorithm:"hybrid",duration:0,totalDocuments:0,rankedDocuments:0,performance_metrics:{algorithm:"smart",query_terms:0,documents_processed:0,results_returned:0,processing_time_ms:0}};let m=process.hrtime.bigint(),p=Number(m-i)/1e6;if(p>25&&console.warn(`\u26A0\uFE0F Slow search operation: ${p.toFixed(2)}ms (target: <25ms)`),process.env.NOVA_MCP_MODE||console.log(`\u2705 Advanced search executed (${p.toFixed(2)}ms) - ${d.results.length} results for "${e}"`),d.results&&d.results.length>0&&(d.results=d.results.map(y=>{let f=0;y.hybrid_score!==void 0?f=y.hybrid_score:y.tfidf_score!==void 0?f=y.tfidf_score:y.bm25_score!==void 0&&(f=y.bm25_score);let _={...y,score:f};return s==="clean"?{id:_.id,content:_.content,score:_.score,timestamp:_.timestamp,tags:_.tags||[]}:_})),t.mode){let y={smart:"Best Smart",precise:"Precision Focus",fast:"Quick Match",balanced:"Smart Balance"};d.algorithm=y[t.mode]||d.algorithm}return s==="clean"?{results:d.results,duration:d.duration}:d}catch(i){throw console.error(`\u274C Failed to perform advanced search: ${i.message}`),i}}getSearchAlgorithms(){return{modes:["smart","precise","fast","balanced"],descriptions:{smart:"AI-like balanced approach that adapts to your query",precise:"Best for exact matches and technical terms",fast:"Quick results for natural language queries",balanced:"Default mode with good overall performance"},current:"smart"}}setSearchAlgorithm(e){this.searchEngine.setAlgorithm(e)}getSearchAlgorithm(){return this.searchEngine.algorithm}getSearchPerformanceStats(){return this.searchEngine.getPerformanceStats?this.searchEngine.getPerformanceStats():{message:"Performance stats available only with optimized search engine"}}getOptimizationConfig(){return this.searchEngine.getOptimizationConfig?this.searchEngine.getOptimizationConfig():{enabled:!1,message:"Optimizations not enabled"}}setOptimizationPhase(e,t){return this.searchEngine.setOptimizationPhase?this.searchEngine.setOptimizationPhase(e,t):{message:"Optimization phases not available"}}getFromCache(e){var t;try{if(!this.queryCache||!this.queryCache.has(e))return null;let s=this.queryCache.get(e);return s&&s.timestamp&&Date.now()-s.timestamp<(((t=this.config.cache)==null?void 0:t.ttl)||3e5)?s.data:(this.queryCache.delete(e),null)}catch(s){return console.error(`\u274C Cache retrieval error: ${s.message}`),null}}setCache(e,t){var s;try{if(!this.queryCache)return;if(this.queryCache.set(e,{data:t,timestamp:Date.now()}),this.queryCache.size>(((s=this.config.cache)==null?void 0:s.maxSize)||100)){let i=this.queryCache.keys().next().value;this.queryCache.delete(i)}}catch(i){console.error(`\u274C Cache storage error: ${i.message}`)}}clearCacheByPattern(e){try{if(!this.queryCache)return;for(let t of e)if(t==="*")this.queryCache.clear();else for(let[s]of this.queryCache)s.includes(t)&&this.queryCache.delete(s)}catch(t){console.error(`\u274C Failed to clear cache pattern: ${t.message}`)}}};u(ks,"MemoryQueryEngine");var Rs=ks;br.exports={MemoryQueryEngine:Rs}});var Sr=g((nd,Tr)=>{var Os=class Os{constructor(e,t,s){this.components=e,this.config=t,this.projectContext=s,this.databaseOps=e.databaseOps,this.stats=e.stats}async getStats(){try{let e=await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM memory_entries");this.stats.total_entries=e.count;let t=await this.databaseOps.dbGet(`
        SELECT timestamp FROM memory_entries 
        ORDER BY timestamp DESC LIMIT 1
      `);return{...this.stats,last_entry:t?new Date(t.timestamp):null,database_path:this.projectContext.databasePath,project_name:this.projectContext.projectName,project_path:this.projectContext.projectPath}}catch(e){throw console.error(`\u274C Failed to get stats: ${e.message}`),e}}async getMemoryCount(){try{return(await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM memory_entries")).count}catch(e){return console.error(`\u274C Failed to get memory count: ${e.message}`),0}}async getMemoryCategories(){try{let e=await this.databaseOps.dbAll(`
        SELECT memory_type, COUNT(*) as count 
        FROM memory_entries 
        GROUP BY memory_type 
        ORDER BY count DESC
      `),t={available_types:["observation","action","result","error","context","general"],distribution:{},total_entries:0};for(let s of e)t.distribution[s.memory_type]=s.count,t.total_entries+=s.count;return t}catch(e){throw console.error(`\u274C Failed to get memory categories: ${e.message}`),e}}async getPerformanceMetrics(){try{return{memory_stats:await this.getStats(),cache_performance:this.getCacheMetrics(),query_performance:this.getQueryMetrics(),database_metrics:await this.getDatabaseMetrics()}}catch(e){throw console.error(`\u274C Failed to get performance metrics: ${e.message}`),e}}getCacheMetrics(){var t;let e=this.components.queryCache;return{cache_size:e?e.size:0,cache_hits:this.stats.cache_hits||0,cache_misses:this.stats.cache_misses||0,cache_hit_ratio:this.calculateCacheHitRatio(),max_cache_size:((t=this.config.cache)==null?void 0:t.maxSize)||100}}getQueryMetrics(){return{queries_executed:this.stats.queries_executed||0,average_query_time:this.stats.average_query_time||0,last_updated:this.stats.last_updated,performance_target:{query_time_ms:10,search_time_ms:25,storage_time_ms:25}}}async getDatabaseMetrics(){try{let e=[{name:"total_entries",sql:"SELECT COUNT(*) as value FROM memory_entries"},{name:"total_entities",sql:"SELECT COUNT(*) as value FROM entities"},{name:"total_relationships",sql:"SELECT COUNT(*) as value FROM entity_relationships"},{name:"database_size_pages",sql:"PRAGMA page_count"},{name:"database_page_size",sql:"PRAGMA page_size"}],t={};for(let s of e)try{let i=await this.databaseOps.dbGet(s.sql);t[s.name]=i.value||i.page_count||i.page_size||0}catch{t[s.name]=0}return t.database_size_pages&&t.database_page_size&&(t.database_size_mb=t.database_size_pages*t.database_page_size/(1024*1024)),t}catch(e){return console.error(`\u274C Failed to get database metrics: ${e.message}`),{}}}async getMemoryTrends(e=7){try{let t=new Date;t.setDate(t.getDate()-e);let i=await this.databaseOps.dbAll(`
        SELECT 
          DATE(timestamp) as date,
          memory_type,
          COUNT(*) as count
        FROM memory_entries 
        WHERE timestamp >= ?
        GROUP BY DATE(timestamp), memory_type
        ORDER BY date DESC, memory_type
      `,[t.toISOString()]);return{period_days:e,trends:this.processTrendData(i),total_entries_period:i.reduce((n,r)=>n+r.count,0)}}catch(t){return console.error(`\u274C Failed to get memory trends: ${t.message}`),{period_days:e,trends:[],total_entries_period:0}}}async getTopEntities(e=10){try{return{top_entities:await this.databaseOps.dbAll(`
        SELECT name, mention_count, confidence, type, last_updated
        FROM entities 
        ORDER BY mention_count DESC, confidence DESC
        LIMIT ?
      `,[e]),total_entities:await this.getTotalEntityCount()}}catch(t){return console.error(`\u274C Failed to get top entities: ${t.message}`),{top_entities:[],total_entities:0}}}calculateCacheHitRatio(){let e=this.stats.cache_hits||0,t=this.stats.cache_misses||0,s=e+t;return s>0?e/s*100:0}processTrendData(e){let t={};for(let s of e)t[s.date]||(t[s.date]={}),t[s.date][s.memory_type]=s.count;return t}async getTotalEntityCount(){try{return(await this.databaseOps.dbGet("SELECT COUNT(*) as count FROM entities")).count}catch{return 0}}updateStats(e,t=1){try{switch(e){case"cache_hit":this.stats.cache_hits=(this.stats.cache_hits||0)+t;break;case"cache_miss":this.stats.cache_misses=(this.stats.cache_misses||0)+t;break;case"query_executed":this.stats.queries_executed=(this.stats.queries_executed||0)+t;break;case"total_entries":this.stats.total_entries=t;break}this.stats.last_updated=new Date().toISOString()}catch(s){console.error(`\u274C Failed to update stats: ${s.message}`)}}resetStats(){this.stats.cache_hits=0,this.stats.cache_misses=0,this.stats.queries_executed=0,this.stats.average_query_time=0,this.stats.last_updated=new Date().toISOString()}async getSystemHealth(){try{let e=await this.getStats(),t=this.getCacheMetrics(),s=await this.getDatabaseMetrics(),i={overall_score:0,components:{database:this.calculateDatabaseHealth(s),cache:this.calculateCacheHealth(t),performance:this.calculatePerformanceHealth(e)},recommendations:[]},n=Object.values(i.components);return i.overall_score=n.reduce((r,o)=>r+o,0)/n.length,i.recommendations=this.generateHealthRecommendations(i.components),i}catch(e){return console.error(`\u274C Failed to get system health: ${e.message}`),{overall_score:0,components:{},recommendations:[]}}}calculateDatabaseHealth(e){let t=100;return e.database_size_mb>100&&(t-=10),e.database_size_mb>500&&(t-=20),e.total_entities/Math.max(e.total_entries,1)>.1&&(t+=5),Math.max(0,Math.min(100,t))}calculateCacheHealth(e){let t=100;return e.cache_hit_ratio>80?t+=10:e.cache_hit_ratio<50&&(t-=20),e.cache_size>=e.max_cache_size*.9&&(t-=10),Math.max(0,Math.min(100,t))}calculatePerformanceHealth(e){let t=100;return e.average_query_time>50?t-=20:e.average_query_time>25&&(t-=10),Math.max(0,Math.min(100,t))}generateHealthRecommendations(e){let t=[];return e.database<80&&t.push("Consider running database cleanup to optimize storage"),e.cache<70&&t.push("Cache hit ratio is low - consider adjusting cache size or TTL"),e.performance<70&&t.push("Query performance is below optimal - consider database indexing"),t}};u(Os,"MemoryStatisticsManager");var xs=Os;Tr.exports={MemoryStatisticsManager:xs}});var vr=g((od,Cr)=>{var Is=class Is{constructor(e,t,s){this.components=e,this.config=t,this.projectContext=s,this.databaseOps=e.databaseOps,this.memoryQueryEngine=null}setMemoryQueryEngine(e){this.memoryQueryEngine=e}async storeRelationship(e){try{let{entity1:t,entity1_type:s="unknown",entity2:i,entity2_type:n="unknown",relation:r,confidence:o=1,metadata:a=null}=e;if(!t||!i||!r)throw new Error("Missing required relationship data: entity1, entity2, relation");let c=0,l=3;for(;c<l;)try{await this.databaseOps.dbGet("SELECT name FROM sqlite_master WHERE type='table' AND name='relationships'")||(console.error("Relationships table not found, creating it..."),await this.createRelationshipsTable(),await new Promise(p=>setTimeout(p,10)));let d=`
            INSERT INTO relationships (entity1, entity1_type, entity2, entity2_type, relation, confidence, timestamp, metadata)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
          `,m=new Date().toISOString();return await this.databaseOps.dbRun(d,[t,s,i,n,r,o,m,a]),process.env.NOVA_MCP_MODE||console.log(`\u2705 Relationship stored: ${t} \u2192 ${r} \u2192 ${i} (confidence: ${o})`),!0}catch(h){if(h.message.includes("no such table")&&c<l-1){console.error(`Retry ${c+1}: Table creation race condition, retrying...`),c++,await new Promise(d=>setTimeout(d,50*c));continue}throw h}}catch(t){throw console.error("Error storing relationship:",t.message),t}}async createRelationshipsTable(){await this.databaseOps.dbRun(`
      CREATE TABLE IF NOT EXISTS relationships (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        entity1 TEXT NOT NULL,
        entity1_type VARCHAR(50) DEFAULT 'unknown',
        entity2 TEXT NOT NULL,
        entity2_type VARCHAR(50) DEFAULT 'unknown',
        relation VARCHAR(100) NOT NULL,
        confidence FLOAT DEFAULT 1.0,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        metadata TEXT
      )
    `)}async validateCrossReferences(){try{let e=await this.queryMemories({},1e3),t=0,s=0,i=0;for(let c of e)c.metadata&&c.metadata.auto_entities&&c.metadata.auto_entities.length>0&&(t++,s+=c.metadata.auto_entities.length),c.metadata&&c.metadata.auto_relationships&&c.metadata.auto_relationships.length>0&&i++;let n=e.length>0?t/e.length:0,r=e.length>0?i/e.length:0,o=t>0?s/t:0,a={total_memories:e.length,memories_with_entities:t,memories_with_relationships:i,total_entity_references:s,memory_integrity:n,relationship_integrity:r,average_entities_per_memory:o,quality_score:(n+r)/2};return process.env.NOVA_MCP_MODE||console.log(`\u{1F4CA} Cross-reference validation: ${(n*100).toFixed(1)}% memory integrity`),a}catch(e){throw console.error("Error validating cross-references:",e.message),e}}async generateMemoryMap(e={}){try{let{format:t="json",layout:s="hierarchical",focus_entity:i=null,include_confidence:n=!0}=e,r=await this.queryMemories({},1e3),o=new Map,a=[];for(let h of r)h.metadata&&h.metadata.auto_entities&&h.metadata.auto_entities.forEach(d=>{o.has(d)||o.set(d,{name:d,type:"entity"})}),h.metadata&&h.metadata.auto_relationships&&h.metadata.auto_relationships.forEach(d=>{if(typeof d=="string"&&d.includes(" \u2192 ")){let m=d.split(" \u2192 ");m.length>=3&&(o.has(m[0])||o.set(m[0],{name:m[0],type:"entity"}),o.has(m[2])||o.set(m[2],{name:m[2],type:"entity"}),a.push({source:m[0].toLowerCase().replace(/\s+/g,"_"),target:m[2].toLowerCase().replace(/\s+/g,"_"),relation:m[1],confidence:.8}))}});try{let d=await this.databaseOps.dbAll("SELECT * FROM relationships");for(let m of d)o.has(m.entity1)||o.set(m.entity1,{name:m.entity1,type:m.entity1_type||"entity"}),o.has(m.entity2)||o.set(m.entity2,{name:m.entity2,type:m.entity2_type||"entity"}),a.push({source:m.entity1.toLowerCase().replace(/\s+/g,"_"),target:m.entity2.toLowerCase().replace(/\s+/g,"_"),relation:m.relation,confidence:m.confidence||.8})}catch(h){console.error("Error reading relationships table:",h.message)}let c=Array.from(o.values()).map(h=>({id:h.name.toLowerCase().replace(/\s+/g,"_"),label:h.name,type:h.type})),l;return t==="mermaid"?l=this.generateMermaidContent(c,a,s):t==="dot"?l=this.generateDotContent(c,a):l=JSON.stringify({nodes:c,edges:a},null,2),{format:t,layout:s,focus_entity:i,content:l,statistics:{total_nodes:c.length,total_edges:a.length,node_types:{entity:c.length}}}}catch(t){throw console.error("Error generating memory map:",t.message),t}}generateMermaidContent(e,t,s){let i=`graph TD
`;return e.forEach(n=>{i+=`    ${n.id}[${n.label}]
`}),i+=`
`,t.forEach(n=>{let r=n.source.toLowerCase().replace(/\s+/g,"_"),o=n.target.toLowerCase().replace(/\s+/g,"_");i+=`    ${r} --> ${o} : ${n.relation} (${n.confidence.toFixed(2)})
`}),i}generateDotContent(e,t){let s=`digraph memory_map {
`;return s+=`    rankdir=TB;

`,e.forEach(i=>{s+=`    "${i.id}" [label="${i.label}"];
`}),s+=`
`,t.forEach(i=>{let n=i.source.toLowerCase().replace(/\s+/g,"_"),r=i.target.toLowerCase().replace(/\s+/g,"_");s+=`    "${n}" -> "${r}" [label="${i.relation}"];
`}),s+="}",s}async getNetworkStatistics(){try{let e=await this.queryMemories({},1e3),t=new Set,s=0,i=0,n=0;for(let l of e)l.metadata&&l.metadata.auto_entities&&l.metadata.auto_entities.forEach(h=>t.add(h)),l.metadata&&l.metadata.auto_relationships&&(s+=l.metadata.auto_relationships.length,l.metadata.auto_relationships.forEach(h=>{i+=.8}));try{let h=await this.databaseOps.dbAll("SELECT * FROM relationships");for(let d of h){t.add(d.entity1),t.add(d.entity2),s++;let m=d.confidence||.8;i+=m,m>.8&&n++}}catch(l){console.error("Error reading relationships table for statistics:",l.message)}let r=Array.from(t),o=r.length*(r.length-1),a=o>0?s/o:0,c=s>0?i/s:0;return{overview:{total_entities:r.length,total_relationships:s,network_density:a},entity_analysis:{most_connected:r.slice(0,3).map(l=>({entity:l.toLowerCase().replace(/\s+/g,"_"),connections:2})),average_connections:r.length>0?s*2/r.length:0},confidence_distribution:{high:n,average_confidence:c}}}catch(e){throw console.error("Error getting network statistics:",e.message),e}}async getRelationship(e,t){try{return await this.databaseOps.dbAll(`
        SELECT * FROM relationships 
        WHERE (entity1 = ? AND entity2 = ?) OR (entity1 = ? AND entity2 = ?)
        ORDER BY confidence DESC, timestamp DESC
      `,[e,t,t,e])}catch(s){return console.error("Error getting relationship:",s.message),[]}}async getEntityRelationships(e,t=50){try{return await this.databaseOps.dbAll(`
        SELECT * FROM relationships 
        WHERE entity1 = ? OR entity2 = ?
        ORDER BY confidence DESC, timestamp DESC
        LIMIT ?
      `,[e,e,t])}catch(s){return console.error("Error getting entity relationships:",s.message),[]}}async updateRelationshipConfidence(e,t){try{return await this.databaseOps.dbRun(`
        UPDATE relationships 
        SET confidence = ?, timestamp = CURRENT_TIMESTAMP 
        WHERE id = ?
      `,[t,e]),!0}catch(s){return console.error("Error updating relationship confidence:",s.message),!1}}async deleteRelationship(e){try{return await this.databaseOps.dbRun("DELETE FROM relationships WHERE id = ?",[e]),!0}catch(t){return console.error("Error deleting relationship:",t.message),!1}}async queryMemories(e,t){return this.memoryQueryEngine?await this.memoryQueryEngine.query(e,t):(await this.databaseOps.dbAll("SELECT * FROM memory_entries ORDER BY timestamp DESC LIMIT ?",[t||1e3])).map(n=>({...n,timestamp:new Date(n.timestamp),tags:JSON.parse(n.tags||"[]"),metadata:JSON.parse(n.metadata||"{}"),embedding:n.embedding?JSON.parse(n.embedding):null}))}async getRelationshipAnalytics(){try{let e=await this.getNetworkStatistics(),t=await this.validateCrossReferences();return{network_statistics:e,cross_reference_validation:t,relationship_health:{overall_score:t.quality_score*100,network_density:e.overview.network_density*100,entity_coverage:t.memory_integrity*100}}}catch(e){throw console.error("Error getting relationship analytics:",e.message),e}}};u(Is,"MemoryRelationshipCoordinator");var Ns=Is;Cr.exports={MemoryRelationshipCoordinator:Ns}});var Mr=g((fd,Ar)=>{var Lc=require("fs-extra"),Fc=require("path"),Ds=require("sqlite3").verbose(),{DatabaseOperations:cd}=Ee(),{ConfigurationManager:ld}=K(),{MemoryEntry:$c,MemoryStorage:hd}=G(),{SearchOperations:dd}=_t(),{EntityRelationshipManager:md}=At(),{PerformanceMonitor:ud}=kt(),{entityExtractor:pd}=de(),{StructuredMemory:yd}=qt(),{MemoryManagement:gd}=Es(),{ConfigurationCoordinator:Pc}=mr(),{ComponentInitializer:zc}=pr(),{CleanupManager:qc}=gr(),{MemoryLifecycleManager:jc}=Er(),{MemoryQueryEngine:Uc}=wr(),{MemoryStatisticsManager:Bc}=Sr(),{MemoryRelationshipCoordinator:Wc}=vr(),Fs=class Fs{constructor(e=null){this.configCoordinator=new Pc(e),this.config=this.configCoordinator.getConfig(),this.projectContext=this.configCoordinator.getProjectContext(),this.projectPath=this.projectContext.projectPath,this.projectName=this.projectContext.projectName,this.db_path=this.projectContext.databasePath,this.componentInitializer=new zc(this.config,this.projectContext),this.components={},this.initializeComponents(),this.applyMemoryConfiguration(),this.cleanupManager=new qc(this.components,this.projectContext),this.memoryLifecycleManager=new jc(this.components,this.config,this.projectContext),this.memoryQueryEngine=new Uc(this.components,this.config,this.projectContext),this.memoryStatisticsManager=new Bc(this.components,this.config,this.projectContext),this.memoryRelationshipCoordinator=new Wc(this.components,this.config,this.projectContext),this.memoryRelationshipCoordinator.setMemoryQueryEngine(this.memoryQueryEngine),process.env.NOVA_MCP_MODE||console.log(`\u2705 Enhanced memory system initialized: ${this.projectName} (${this.db_path})`)}initializeComponents(){try{this.componentInitializer.initializationOrder.forEach(e=>{this.componentInitializer.initializeComponent(e)}),this.componentInitializer.postInitializationSetup(),this.components=this.componentInitializer.getComponents(),this.databaseOps=this.components.databaseOps,this.db=this.components.db,this.memoryStorage=this.components.memoryStorage,this.searchOps=this.components.searchOps,this.entityManager=this.components.entityManager,this.performanceMonitor=this.components.performanceMonitor,this.structuredMemory=this.components.structuredMemory,this.memoryManagement=this.components.memoryManagement,this.searchEngine=this.components.searchEngine,this.preparedStatements=this.components.preparedStatements,this.stats=this.components.stats,this.queryCache=this.components.queryCache}catch(e){throw console.error(`\u274C Component initialization failed: ${e.message}`),e}}applyMemoryConfiguration(){var e,t,s;(e=this.config.memory)!=null&&e.globalMaxMemories&&(this.globalMaxMemories=this.config.memory.globalMaxMemories),(t=this.config.memory)!=null&&t.typeRetention&&(this.typeRetention=this.config.memory.typeRetention),(s=this.config.memory)!=null&&s.versioning&&(this.versioningEnabled=this.config.memory.versioning.enabled||!1,this.maxVersionsPerEntity=this.config.memory.versioning.maxVersionsPerEntity||5)}dbRun(e,t=[],s=3){return this.databaseOps.dbRun(e,t,s)}dbGet(e,t=[],s=3){return this.databaseOps.dbGet(e,t,s)}dbAll(e,t=[],s=3){return this.databaseOps.dbAll(e,t,s)}_loadConfig(e){return this.configManager.loadConfig(e)}_expandPath(e){return this.configManager.expandPath(e)}_initDatabase(){try{Lc.ensureDirSync(Fc.dirname(this.db_path)),this.db=new Ds.Database(this.db_path,Ds.OPEN_READWRITE|Ds.OPEN_CREATE),this.db.run("PRAGMA journal_mode = WAL"),this.db.run("PRAGMA synchronous = NORMAL"),this.db.run("PRAGMA cache_size = 50000"),this.db.run("PRAGMA temp_store = MEMORY"),this.db.run("PRAGMA mmap_size = 268435456"),this.db.run("PRAGMA page_size = 4096"),this.db.run("PRAGMA locking_mode = NORMAL"),this.db.run("PRAGMA busy_timeout = 30000"),this.db.run("PRAGMA wal_autocheckpoint = 1000"),this._createSchemaBlocking(),this._prepareStatements(),process.env.NOVA_MCP_MODE||console.error("\u2705 Database schema initialized with performance optimizations")}catch(e){throw console.error(`\u274C Failed to initialize database: ${e.message}`),e}}_createSchemaBlocking(){this.db.serialize(()=>{this.db.run(`
        CREATE TABLE IF NOT EXISTS memory_entries (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          content TEXT NOT NULL,
          memory_type VARCHAR(50) NOT NULL,
          session_id VARCHAR(100),
          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
          tags TEXT,
          tool_used VARCHAR(100),
          confidence_score FLOAT DEFAULT 1.0,
          metadata TEXT,
          embedding TEXT
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS entities (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL UNIQUE,
          type VARCHAR(50) DEFAULT 'unknown',
          first_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
          last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
          mention_count INTEGER DEFAULT 0,
          confidence FLOAT DEFAULT 1.0,
          metadata TEXT
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS memory_entity_links (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          memory_id INTEGER NOT NULL,
          entity_id INTEGER NOT NULL,
          confidence FLOAT DEFAULT 1.0,
          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (memory_id) REFERENCES memory_entries(id),
          FOREIGN KEY (entity_id) REFERENCES entities(id),
          UNIQUE(memory_id, entity_id)
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS relationships (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          entity1 TEXT NOT NULL,
          entity1_type VARCHAR(50) DEFAULT 'unknown',
          entity2 TEXT NOT NULL,
          entity2_type VARCHAR(50) DEFAULT 'unknown',
          relation VARCHAR(100) NOT NULL,
          confidence FLOAT DEFAULT 1.0,
          timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
          metadata TEXT
        )
      `),this.db.run(`
        CREATE TABLE IF NOT EXISTS analysis_cache (
          memory_id TEXT PRIMARY KEY,
          analysis_version TEXT,
          analyzed_at INTEGER,
          cluster_id TEXT,
          cluster_theme TEXT,
          features_extracted INTEGER DEFAULT 0,
          last_modified INTEGER,
          metadata TEXT
        )
      `,e=>{e?console.error("\u274C Failed to create analysis_cache table:",e.message):process.env.NOVA_MCP_MODE||console.error("\u2705 Created analysis_cache table")}),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_type ON memory_entries(memory_type)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_session_id ON memory_entries(session_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_timestamp ON memory_entries(timestamp)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_tool_used ON memory_entries(tool_used)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entity_name ON entities(name)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entity_type ON entities(type)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entity_mention_count ON entities(mention_count)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_entity_memory_id ON memory_entity_links(memory_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_memory_entity_entity_id ON memory_entity_links(entity_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entity1 ON relationships(entity1)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_entity2 ON relationships(entity2)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_relation ON relationships(relation)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_analysis_cache_cluster ON analysis_cache(cluster_id)"),this.db.run("CREATE INDEX IF NOT EXISTS idx_analysis_cache_version ON analysis_cache(analysis_version)"),this.db.run(`
        CREATE VIRTUAL TABLE IF NOT EXISTS memory_fts USING fts5(
          content,
          tags,
          content=memory_entries,
          content_rowid=id
        )
      `,e=>{e?(console.error("\u26A0\uFE0F FTS5 not available, falling back to LIKE queries:",e.message),this.db.run(`
            CREATE VIRTUAL TABLE IF NOT EXISTS memory_fts USING fts4(
              content,
              tags,
              notindexed=tags
            )
          `,t=>{t?(console.error("\u26A0\uFE0F FTS4 also not available:",t.message),this.ftsAvailable=!1):(process.env.NOVA_MCP_MODE||console.error("\u2705 FTS4 virtual table created for fast search"),this.ftsAvailable=!0,this.ftsVersion=4)})):(process.env.NOVA_MCP_MODE||console.error("\u2705 FTS5 virtual table created for fast search"),this.ftsAvailable=!0,this.ftsVersion=5)}),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_insert AFTER INSERT ON memory_entries BEGIN
          INSERT INTO memory_fts(rowid, content, tags) VALUES (new.id, new.content, new.tags);
        END
      `),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_delete AFTER DELETE ON memory_entries BEGIN
          DELETE FROM memory_fts WHERE rowid = old.id;
        END
      `),this.db.run(`
        CREATE TRIGGER IF NOT EXISTS memory_fts_update AFTER UPDATE ON memory_entries BEGIN
          DELETE FROM memory_fts WHERE rowid = old.id;
          INSERT INTO memory_fts(rowid, content, tags) VALUES (new.id, new.content, new.tags);
        END
      `)})}_prepareStatements(){try{if(this.preparedStatements||(this.preparedStatements={}),!this.db){console.error("\u274C Cannot prepare statements: Database not initialized");return}this.preparedStatements.insertSQL=`
        INSERT INTO memory_entries 
        (content, memory_type, session_id, timestamp, tags, tool_used, confidence_score, metadata, embedding, entity_key, version, previous_id, is_latest)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,process.env.NOVA_MCP_MODE||console.error("\u2705 Prepared statements initialized")}catch(e){console.error("\u274C Failed to prepare statements:",e.message),this.preparedStatements={}}}async store(e){return await this.memoryLifecycleManager.store(e)}async query(e={},t=null){return await this.memoryQueryEngine.query(e,t)}async search(e,t=null,s={}){return await this.memoryQueryEngine.search(e,t,s)}async advancedSearch(e,t={}){return await this.memoryQueryEngine.advancedSearch(e,t)}getSearchAlgorithms(){return this.memoryQueryEngine.getSearchAlgorithms()}setSearchAlgorithm(e){return this.memoryQueryEngine.setSearchAlgorithm(e)}getSearchAlgorithm(){return this.memoryQueryEngine.getSearchAlgorithm()}getSearchPerformanceStats(){return this.memoryQueryEngine.getSearchPerformanceStats()}getOptimizationConfig(){return this.memoryQueryEngine.getOptimizationConfig()}setOptimizationPhase(e,t){return this.memoryQueryEngine.setOptimizationPhase(e,t)}async getMemoryCount(){return await this.memoryStatisticsManager.getMemoryCount()}async cleanup(){return await this.cleanupManager.cleanup()}async getStats(){return await this.memoryStatisticsManager.getStats()}async getMemoryCategories(){return await this.memoryStatisticsManager.getMemoryCategories()}async cleanup(e=!1){return await this.cleanupOldMemories(e)}async cleanupOldMemories(e=!1){try{if(this.config.retention||(this.config.retention={archive_old:!0,days:30}),!e&&!this.config.retention.archive_old)return console.log("\u26A0\uFE0F Cleanup skipped - archive_old is disabled"),{cleaned:0,message:"Cleanup disabled"};let t=new Date;t.setDate(t.getDate()-this.config.retention.days);let s="DELETE FROM memory_entries WHERE timestamp < ?";try{await this.databaseOps.dbGet("SELECT 1 as test")}catch(n){if(n.code==="SQLITE_BUSY")return console.log("\u26A0\uFE0F Database is busy, skipping cleanup"),{cleaned:0,message:"Database busy, cleanup skipped"};throw n}let i=await this.databaseOps.dbRun(s,[t.toISOString()]);return this.stats.cleanup_count++,this.stats.last_cleanup=new Date,console.log(`\u2705 Cleaned up ${i.changes} old memory entries`),{cleaned:i.changes,cutoff_date:t}}catch(t){if(t.code==="SQLITE_BUSY")return console.log("\u26A0\uFE0F Database is busy, cleanup skipped"),{cleaned:0,message:"Database busy, cleanup skipped"};throw console.error(`\u274C Failed to cleanup memories: ${t.message}`),t}}_getFromCache(e){let t=this.queryCache.get(e);return t&&Date.now()-t.timestamp<this.cacheTimeout?t.data:(t&&this.queryCache.delete(e),null)}_setCache(e,t){if(this.queryCache.size>=this.maxCacheSize){let s=this.queryCache.keys().next().value;this.queryCache.delete(s)}this.queryCache.set(e,{data:t,timestamp:Date.now()})}_clearCacheByPattern(e){for(let t of this.queryCache.keys())e.some(s=>t.startsWith(s))&&this.queryCache.delete(t)}async storeBatch(e){return await this.memoryLifecycleManager.storeBatch(e)}async close(){if(this.db)return this.connectionLock=!0,await new Promise(e=>setTimeout(e,100)),new Promise(e=>{this.db.close(t=>{t?console.error("Error closing database:",t.message):console.error("\u2705 Memory system database closed"),this.db=null,this.connectionLock=!1,e()})})}async storeRelationship(e){return await this.memoryRelationshipCoordinator.storeRelationship(e)}async validateCrossReferences(){return await this.memoryRelationshipCoordinator.validateCrossReferences()}async generateMemoryMap(e={}){return await this.memoryRelationshipCoordinator.generateMemoryMap(e)}async getNetworkStatistics(){return await this.memoryRelationshipCoordinator.getNetworkStatistics()}async detectConflicts(){try{let e={total_conflicts:0,conflict_types:{ENTITY_DUPLICATE:0,RELATIONSHIP_CONTRADICTION:0,CONFIDENCE_DISCREPANCY:0,TYPE_MISMATCH:0,TEMPORAL_INCONSISTENCY:0},details:[],resolution_suggestions:[],data_quality_score:1},s=await this.dbAll("SELECT * FROM relationships ORDER BY entity1, entity2, relation");console.log(`\u{1F50D} Analyzing ${s.length} relationships for conflicts...`);let i=new Map;s.forEach(a=>{[a.entity1,a.entity2].forEach(c=>{let l=c.toLowerCase();i.has(l)||i.set(l,[]),i.get(l).push(c)})}),i.forEach((a,c)=>{if(a.length>1){let l=[...new Set(a)];l.length>1&&(e.conflict_types.ENTITY_DUPLICATE++,e.details.push({type:"ENTITY_DUPLICATE",entities:l,description:`Entity variations found: ${l.join(", ")}`,severity:"medium"}),e.resolution_suggestions.push({conflict_id:`dup_${e.details.length}`,action:`Standardize entity name to: ${l[0]}`,rationale:"Normalize case and spelling variations",confidence:.8}))}});let n=new Map;s.forEach(a=>{n.has(a.entity1)||n.set(a.entity1,[]),n.get(a.entity1).push({to:a.entity2,relation:a.relation,confidence:a.confidence})}),s.forEach(a=>{a.relation==="reports_to"&&s.find(l=>l.entity1===a.entity2&&l.entity2===a.entity1&&l.relation==="reports_to")&&(e.conflict_types.RELATIONSHIP_CONTRADICTION++,e.details.push({type:"RELATIONSHIP_CONTRADICTION",entities:[a.entity1,a.entity2],description:`Circular reporting relationship: ${a.entity1} reports to ${a.entity2} and vice versa`,severity:"high"}),e.resolution_suggestions.push({conflict_id:`circ_${e.details.length}`,action:"Remove one reporting relationship based on confidence scores",rationale:"Eliminate circular hierarchy",confidence:.9}))});let r=new Map;s.forEach(a=>{let c=`${a.entity1}|${a.entity2}|${a.relation}`;r.has(c)||r.set(c,[]),r.get(c).push(a)}),r.forEach((a,c)=>{if(a.length>1){let l=a.map(p=>p.confidence),h=Math.max(...l),d=Math.min(...l),m=h-d;if(m>.4){e.conflict_types.CONFIDENCE_DISCREPANCY++;let[p,y,f]=c.split("|");e.details.push({type:"CONFIDENCE_DISCREPANCY",entities:[p,y],relation:f,confidence_difference:m,confidence_range:`${d.toFixed(2)} - ${h.toFixed(2)}`,description:`Large confidence discrepancy (${(m*100).toFixed(1)}%) for relationship: ${p} \u2192 ${f} \u2192 ${y}`,severity:"medium"}),e.resolution_suggestions.push({conflict_id:`conf_${e.details.length}`,action:`Use highest confidence value (${h.toFixed(2)}) and remove duplicates`,rationale:"Resolve confidence ambiguity with most reliable source",confidence:.7})}}}),e.total_conflicts=Object.values(e.conflict_types).reduce((a,c)=>a+c,0);let o=s.length;return o>0&&(e.data_quality_score=Math.max(0,1-e.total_conflicts/o)),console.log(`\u{1F50D} Conflict detection completed: ${e.total_conflicts} conflicts found`),e}catch(e){return console.error("Error detecting conflicts:",e.message),{total_conflicts:0,conflict_types:{ENTITY_DUPLICATE:0,RELATIONSHIP_CONTRADICTION:0,CONFIDENCE_DISCREPANCY:0,TYPE_MISMATCH:0,TEMPORAL_INCONSISTENCY:0},details:[],resolution_suggestions:[],data_quality_score:1}}}async initializeMemoryManagement(){try{return this.memoryManagement?await this.memoryManagement.initialize():!1}catch(e){return console.error("Failed to initialize memory management:",e),!1}}async getMemoryById(e){try{let s=await this.dbGet(`
        SELECT id, content, memory_type, tags, metadata, timestamp, 
               entity_key, version, previous_id, is_latest
        FROM memory_entries 
        WHERE id = ?
      `,[e]);return s?(s.tags=s.tags?JSON.parse(s.tags):[],s.metadata=s.metadata?JSON.parse(s.metadata):{},s):null}catch(t){throw console.error(`\u274C Failed to get memory by ID: ${t.message}`),t}}async updateMemory(e,t){var s,i;try{let n=await this.getMemoryById(e);if(!n)throw new Error(`Memory with ID ${e} not found`);let r={...n.metadata,edited_at:new Date().toISOString(),edit_count:(n.metadata.edit_count||0)+1,original_content:n.metadata.original_content||n.content,previous_content:n.content},o=t.preserve_metadata?n.timestamp:new Date().toISOString(),a=t.tags||n.tags,c=JSON.stringify(a),l=n.version||1;(s=this.memoryManagement)!=null&&s.versionTracker&&n.entity_key&&n.content!==t.content&&(l=n.version+1),await this.dbRun(`
        UPDATE memory_entries 
        SET content = ?,
            memory_type = ?,
            tags = ?,
            metadata = ?,
            timestamp = ?,
            version = ?
        WHERE id = ?
      `,[t.content,t.memory_type||n.memory_type,c,JSON.stringify(r),o,l,e]),(i=this.optimizations)!=null&&i.searchEngine&&await this.optimizations.searchEngine.updateDocument(e,{content:t.content,tags:a});let d=await this.getMemoryById(e);return d.version=l,d}catch(n){throw console.error(`\u274C Failed to update memory: ${n.message}`),n}}async getAllMemories(e={}){try{let t=`
        SELECT id, content, type, tags, metadata, timestamp, structured
        FROM memory_entries 
        WHERE 1=1
      `,s=[];return e.exclude_archived&&(t+=" AND (metadata IS NULL OR json_extract(metadata, '$.archived') != true)"),t+=" ORDER BY timestamp DESC",e.limit&&(t+=" LIMIT ?",s.push(e.limit)),(await this.databaseOps.db.all(t,s)).map(n=>({...n,tags:JSON.parse(n.tags||"[]"),metadata:JSON.parse(n.metadata||"{}"),structured:n.structured?JSON.parse(n.structured):{}}))}catch(t){throw console.error(`\u274C Failed to get all memories: ${t.message}`),t}}async deleteMemory(e){try{if(!await this.getMemoryById(e))throw new Error(`Memory with ID ${e} not found`);await this.databaseOps.db.run("DELETE FROM memory_entries WHERE id = ?",[e]),await this.databaseOps.db.run("DELETE FROM structured_memory WHERE memory_id = ?",[e]),await this.databaseOps.db.run("DELETE FROM entities WHERE memory_id = ?",[e]),await this.databaseOps.db.run("DELETE FROM relationships WHERE source_memory_id = ? OR target_memory_id = ?",[e,e]),console.log(`\u2705 Memory ${e} deleted successfully`)}catch(t){throw console.error(`\u274C Failed to delete memory: ${t.message}`),t}}};u(Fs,"EnhancedMemorySystem");var Ls=Fs;Ar.exports={EnhancedMemorySystem:Ls,MemoryEntry:$c}});var kr=g((Ed,Rr)=>{var Ps=class Ps{constructor(e,t){this.memorySystem=e,this.relationshipEngine=t,this.conflictTypes=new Map,this.initializeConflictTypes()}initializeConflictTypes(){this.conflictTypes.set("ENTITY_DUPLICATE",{name:"Entity Duplicate",description:"Multiple entities that might represent the same thing",severity:"medium",detector:this.detectEntityDuplicates.bind(this)}),this.conflictTypes.set("RELATIONSHIP_CONTRADICTION",{name:"Relationship Contradiction",description:"Contradictory relationships between entities",severity:"high",detector:this.detectRelationshipContradictions.bind(this)}),this.conflictTypes.set("ATTRIBUTE_INCONSISTENCY",{name:"Attribute Inconsistency",description:"Same entity with conflicting attributes",severity:"medium",detector:this.detectAttributeInconsistencies.bind(this)}),this.conflictTypes.set("TEMPORAL_VIOLATION",{name:"Temporal Violation",description:"Timeline inconsistencies",severity:"high",detector:this.detectTemporalViolations.bind(this)}),this.conflictTypes.set("CONFIDENCE_DISCREPANCY",{name:"Confidence Discrepancy",description:"High vs low confidence for similar information",severity:"low",detector:this.detectConfidenceDiscrepancies.bind(this)})}async detectConflicts(e={}){let t=[],s=e.types||Array.from(this.conflictTypes.keys());for(let i of s){let n=this.conflictTypes.get(i);if(n){let r=await n.detector(e);t.push(...r)}}return this.rankConflicts(t,e.limit)}async detectEntityDuplicates(e={}){let t=Array.from(this.relationshipEngine.relationships.values()),s=new Map;t.forEach(n=>{[n.entity1,n.entity2].forEach(r=>{let o=this.normalizeEntity(r);s.has(o)||s.set(o,[]),s.get(o).push(r)})});let i=[];for(let[n,r]of s)if(r.length>1){let o=[...new Set(r)];o.length>1&&i.push({type:"ENTITY_DUPLICATE",severity:"medium",entities:o,description:`Potential duplicate entities: ${o.join(", ")}`,confidence:this.calculateSimilarity(o),suggestion:`Consider merging these entities: ${o.join(" \u2192 ")}`,timestamp:new Date().toISOString()})}return i}async detectRelationshipContradictions(e={}){let t=Array.from(this.relationshipEngine.relationships.values()),s=[],i=new Map;t.forEach(n=>{let r=`${n.entity1}:${n.entity2}`,o=`${n.entity2}:${n.entity1}`;i.has(r)||i.set(r,[]),i.get(r).push(n),i.has(o)||i.set(o,[])});for(let[n,r]of i)if(r.length>1){let o=r.map(a=>a.relation);this.areRelationsContradictory(o)&&s.push({type:"RELATIONSHIP_CONTRADICTION",severity:"high",entities:n.split(":"),relationships:r.map(a=>({relation:a.relation,confidence:a.confidence,timestamp:a.timestamp})),description:`Contradictory relationships: ${o.join(" vs ")}`,confidence:.8,suggestion:"Review and resolve contradictory relationships",timestamp:new Date().toISOString()})}return s}async detectAttributeInconsistencies(e={}){let t=e.limit||100,s=await this.memorySystem.query({},t),i=new Map;s.forEach(r=>{this.extractEntitiesFromContent(r.content).forEach(a=>{i.has(a.name)||i.set(a.name,[]),i.get(a.name).push({attributes:a.attributes,memory_id:r.id,confidence:r.confidence_score,content:r.content.substring(0,100)})})});let n=[];for(let[r,o]of i)if(o.length>1){let a=this.findAttributeInconsistencies(o);a.length>0&&n.push({type:"ATTRIBUTE_INCONSISTENCY",severity:"medium",entity:r,inconsistencies:a,description:`Attribute inconsistencies for ${r}`,confidence:.7,suggestion:"Verify and consolidate entity attributes",timestamp:new Date().toISOString()})}return n}async detectTemporalViolations(e={}){let t=Array.from(this.relationshipEngine.relationships.values()),s=[],i=new Date;t.forEach(a=>{a.timestamp&&new Date(a.timestamp)>i&&s.push({type:"TEMPORAL_VIOLATION",severity:"high",entity1:a.entity1,relation:a.relation,entity2:a.entity2,timestamp:a.timestamp,description:`Relationship has future timestamp: ${a.timestamp}`,confidence:.95,suggestion:"Verify timestamp accuracy or update to correct date",timestamp:new Date().toISOString()})});let n=t.filter(a=>a.relation.includes("before")||a.relation.includes("after")||a.relation.includes("during")||a.relation.includes("started")||a.relation.includes("ended")||a.relation.includes("will_work_at"));if(n.length===0)return s;let r=this.buildTemporalGraph(n);return this.detectCycles(r).forEach(a=>{s.push({type:"TEMPORAL_VIOLATION",severity:"high",cycle:a,description:`Temporal cycle detected: ${a.join(" \u2192 ")}`,confidence:.9,suggestion:"Review temporal relationships for logical consistency",timestamp:new Date().toISOString()})}),s}async detectConfidenceDiscrepancies(e={}){let t=Array.from(this.relationshipEngine.relationships.values()),s=[],i=new Map;t.forEach(n=>{let r=`${n.entity1}:${n.relation}:${n.entity2}`;i.has(r)||i.set(r,[]),i.get(r).push(n)});for(let[n,r]of i)if(r.length>1){let o=r.map(l=>l.confidence),a=Math.max(...o),c=Math.min(...o);a-c>.5&&s.push({type:"CONFIDENCE_DISCREPANCY",severity:"low",relationship:n,relationships:r.map(l=>({id:l.id,confidence:l.confidence,timestamp:l.timestamp})),description:`Confidence discrepancy: ${c.toFixed(2)} vs ${a.toFixed(2)}`,confidence:a-c,suggestion:"Review and reconcile confidence scores",timestamp:new Date().toISOString()})}return s}normalizeEntity(e){return e.toLowerCase().trim().replace(/[^a-z0-9]/g,"")}calculateSimilarity(e){if(e.length<=1)return 0;let t=0,s=0;for(let i=0;i<e.length;i++)for(let n=i+1;n<e.length;n++){let r=this.stringSimilarity(e[i],e[n]);t+=r,s++}return s>0?t/s:0}stringSimilarity(e,t){let s=e.length>t.length?e:t,i=e.length>t.length?t:e;if(s.length===0)return 1;let n=this.levenshteinDistance(s,i);return(s.length-n)/s.length}levenshteinDistance(e,t){let s=[];for(let i=0;i<=t.length;i++)s[i]=[i];for(let i=0;i<=e.length;i++)s[0][i]=i;for(let i=1;i<=t.length;i++)for(let n=1;n<=e.length;n++)t.charAt(i-1)===e.charAt(n-1)?s[i][n]=s[i-1][n-1]:s[i][n]=Math.min(s[i-1][n-1]+1,s[i][n-1]+1,s[i-1][n]+1);return s[t.length][e.length]}areRelationsContradictory(e){let t=[["works_at","fired_from"],["works_at","quit_from"],["friends_with","enemies_with"],["likes","hates"],["owns","sold"],["bought","sold"],["married_to","divorced_from"],["hired","fired"],["started","ended"],["connected_to","disconnected_from"]];for(let[s,i]of t)if(e.includes(s)&&e.includes(i))return!0;return!1}extractEntitiesFromContent(e){let t=[],s=e.split(/\s+/),i=new Set(["The","This","That","These","Those","When","Where","What","Why","How","Who"]),n=5,r=0;return s.forEach((o,a)=>{if(r>=n)return;let c=o.replace(/[^a-zA-Z]/g,"");c.length>=3&&c.match(/^[A-Z][a-z]+$/)&&!i.has(c)&&(t.push({name:c.toLowerCase(),attributes:{position:a,original:o,context:s.slice(Math.max(0,a-2),a+3).join(" ")},confidence:.5}),r++)}),t}findAttributeInconsistencies(e){let t=[];for(let s=0;s<e.length;s++)for(let i=s+1;i<e.length;i++){let n=this.compareAttributes(e[s],e[i]);n.length>0&&t.push({instance1:e[s],instance2:e[i],differences:n})}return t}compareAttributes(e,t){let s=[],i=new Set([...Object.keys(e.attributes),...Object.keys(t.attributes)]);for(let n of i){let r=e.attributes[n],o=t.attributes[n];r!==o&&s.push({attribute:n,value1:r,value2:o,confidence1:e.confidence,confidence2:t.confidence})}return s}buildTemporalGraph(e){let t=new Map;return e.forEach(s=>{s.relation.includes("before")||s.relation.includes("ended")?(t.has(s.entity1)||t.set(s.entity1,[]),t.get(s.entity1).push(s.entity2)):(s.relation.includes("after")||s.relation.includes("started"))&&(t.has(s.entity2)||t.set(s.entity2,[]),t.get(s.entity2).push(s.entity1))}),t}detectCycles(e){let t=[],s=new Set,i=new Set,n=u((r,o)=>{if(i.has(r)){let c=o.indexOf(r);c!==-1&&t.push(o.slice(c));return}if(s.has(r))return;s.add(r),i.add(r);let a=e.get(r)||[];for(let c of a)n(c,[...o,r]);i.delete(r)},"dfs");for(let r of e.keys())s.has(r)||n(r,[]);return t}rankConflicts(e,t){let s={high:3,medium:2,low:1},i=e.sort((n,r)=>{let o=s[r.severity]-s[n.severity];return o!==0?o:r.confidence-n.confidence});return t?i.slice(0,t):i}getStats(){return{total_conflict_types:this.conflictTypes.size,available_detectors:Array.from(this.conflictTypes.keys()),severity_levels:["high","medium","low"],conflict_type_details:Array.from(this.conflictTypes.entries()).map(([e,t])=>({type:e,name:t.name,description:t.description,severity:t.severity}))}}};u(Ps,"ConflictDetectionEngine");var $s=Ps;Rr.exports={ConflictDetectionEngine:$s}});var Or=g((wd,xr)=>{var qs=class qs{constructor(e,t){this.memorySystem=e,this.relationshipEngine=t,this.visualFormats=new Map,this.initializeFormats()}initializeFormats(){this.visualFormats.set("ascii_graph",{name:"ASCII Graph",description:"Simple ASCII text-based graph visualization",generator:this.generateAsciiGraph.bind(this)}),this.visualFormats.set("mermaid",{name:"Mermaid Diagram",description:"Mermaid.js compatible diagram format",generator:this.generateMermaidDiagram.bind(this)}),this.visualFormats.set("dot_graph",{name:"DOT Graph",description:"Graphviz DOT format for complex visualizations",generator:this.generateDotGraph.bind(this)}),this.visualFormats.set("json_tree",{name:"JSON Tree",description:"Hierarchical JSON structure for tree visualization",generator:this.generateJsonTree.bind(this)}),this.visualFormats.set("network_summary",{name:"Network Summary",description:"Statistical summary of the memory network",generator:this.generateNetworkSummary.bind(this)})}async generateMemoryMap(e={}){let{format:t="ascii_graph",focus_entity:s=null,max_depth:i=3,min_confidence:n=0,include_memory_content:r=!1,layout:o="hierarchical",limit:a=50}=e,c=this.visualFormats.get(t);if(!c)throw new Error(`Unknown format: ${t}. Available: ${Array.from(this.visualFormats.keys()).join(", ")}`);let l=await this.gatherVisualizationData({focus_entity:s,max_depth:i,min_confidence:n,include_memory_content:r,limit:a}),h=await c.generator(l,{layout:o,...e});return{format:t,layout:o,data_summary:{entities:l.entities.length,relationships:l.relationships.length,memory_entries:l.memoryEntries.length},visualization:h,metadata:{generated_at:new Date().toISOString(),focus_entity:s,max_depth:i,min_confidence:n,total_nodes:l.entities.length,total_edges:l.relationships.length}}}async gatherVisualizationData(e){let{focus_entity:t,max_depth:s,min_confidence:i,include_memory_content:n,limit:r}=e,o;this.memorySystem.dbAll?o=await this.memorySystem.dbAll("SELECT * FROM relationships WHERE confidence >= ?",[i]):o=Array.from(this.relationshipEngine.relationships.values()).filter(h=>h.confidence>=i);let a=new Map;t&&a.set(t.toLowerCase(),t);let c=new Set;t?(c=this.getConnectedEntities(t,s,o),o=o.filter(d=>{let m=d.entity1.toLowerCase(),p=d.entity2.toLowerCase();return c.has(m)&&c.has(p)})):o.forEach(h=>{c.add(h.entity1.toLowerCase()),c.add(h.entity2.toLowerCase())}),r!=null&&(r===0?(o=[],c=new Set):o.length>r&&(o=o.sort((h,d)=>d.confidence-h.confidence).slice(0,r),c=new Set,o.forEach(h=>{c.add(h.entity1.toLowerCase()),c.add(h.entity2.toLowerCase())}))),!this.memorySystem.dbAll&&this.relationshipEngine.originalEntityNames&&this.relationshipEngine.originalEntityNames.forEach((h,d)=>{a.set(d,h)});let l=[];if(n&&this.memorySystem.query)try{l=await this.memorySystem.query({},100),l=l.filter(h=>{let d=h.content.toLowerCase();return Array.from(c).some(m=>d.includes(m))})}catch(h){console.warn("Memory system query failed:",h.message),l=[]}return{entities:Array.from(c),relationships:o,memoryEntries:l,focus_entity:t,originalEntityNames:a}}getConnectedEntities(e,t,s){let i=e.toLowerCase(),n=new Set([i]),r=[{entity:i,depth:0}];for(;r.length>0;){let{entity:o,depth:a}=r.shift();if(a>=t)continue;s.filter(l=>{let h=l.entity1.toLowerCase(),d=l.entity2.toLowerCase();return!!(h===o||d===o||h.includes(o)||d.includes(o)||o.includes(h)||o.includes(d))}).forEach(l=>{let h=l.entity1.toLowerCase(),d=l.entity2.toLowerCase(),m=null;h===o||h.includes(o)||o.includes(h)?m=d:(d===o||d.includes(o)||o.includes(d))&&(m=h),m&&!n.has(m)&&(n.add(m),r.push({entity:m,depth:a+1}))})}return n}async generateAsciiGraph(e,t){let{entities:s,relationships:i,focus_entity:n,originalEntityNames:r}=e;if(s.length===0)return"No entities to visualize";let o=`Memory Network Visualization (ASCII)
`;o+="="+"=".repeat(35)+`

`,n&&(o+=`Focus: ${n}

`);let a=new Map;s.forEach(c=>{let l=(r==null?void 0:r.get(c))||c;a.set(l,[])}),i.forEach(c=>{let l=(r==null?void 0:r.get(c.entity1.toLowerCase()))||c.entity1,h=(r==null?void 0:r.get(c.entity2.toLowerCase()))||c.entity2;a.has(l)&&a.get(l).push({target:h,relation:c.relation,confidence:c.confidence})});for(let[c,l]of a)l.length!==0&&(o+=`${c}
`,l.forEach((h,d)=>{let p=d===l.length-1?"\u2514\u2500":"\u251C\u2500",y=`(${h.confidence.toFixed(2)})`;o+=`${p} ${h.relation} \u2192 ${h.target} ${y}
`}),o+=`
`);return o}async generateMermaidDiagram(e,t){let{entities:s,relationships:i,focus_entity:n,originalEntityNames:r}=e;if(s.length===0)return`graph TD
    A[No data to visualize]`;let o=`graph TD
`;return n&&(o+=`    %% Focus entity: ${n}
`),s.forEach(a=>{let c=(r==null?void 0:r.get(a))||a,l=this.sanitizeNodeId(a);n&&a.toLowerCase()===n.toLowerCase()?o+=`    ${l}[${c}]:::focus
`:o+=`    ${l}[${c}]
`}),o+=`
`,i.forEach(a=>{let c=this.sanitizeNodeId(a.entity1.toLowerCase()),l=this.sanitizeNodeId(a.entity2.toLowerCase()),h=`${a.relation} (${a.confidence.toFixed(2)})`;o+=`    ${c} --> ${l} : ${h}
`}),n&&(o+=`
    %% CSS styling
`,o+=`    classDef focus fill:#ff9999,stroke:#ff6666,stroke-width:3px,color:#000000
`),o}async generateDotGraph(e,t){let{entities:s,relationships:i,originalEntityNames:n}=e,{layout:r="hierarchical"}=t;if(s.length===0)return`digraph G {
    label="No data to visualize";
}`;let o=`digraph MemoryNetwork {
`;return o+=`    rankdir=TB;
`,o+=`    node [shape=box, style=rounded];
`,o+=`    edge [fontsize=10];

`,s.forEach(a=>{let c=(n==null?void 0:n.get(a))||a,l=this.sanitizeNodeId(a);o+=`    ${l} [label="${c}"];
`}),o+=`
`,i.forEach(a=>{let c=this.sanitizeNodeId(a.entity1.toLowerCase()),l=this.sanitizeNodeId(a.entity2.toLowerCase()),h=`${a.relation}\\n(${a.confidence.toFixed(2)})`;o+=`    ${c} -> ${l} [label="${h}"];
`}),o+=`}
`,o}async generateJsonTree(e,t){let{entities:s,relationships:i,focus_entity:n,originalEntityNames:r}=e;if(s.length===0)return{message:"No data to visualize"};let o={name:n||"Memory Network",type:"root",children:[]},a=new Set,c=u((l,h=0)=>{let d=(r==null?void 0:r.get(l.toLowerCase()))||l;if(a.has(l)||h>2)return{name:d,type:"entity",children:[]};a.add(l);let m={name:d,type:"entity",children:[]};return i.filter(y=>y.entity1.toLowerCase()===l.toLowerCase()).forEach(y=>{let f=(r==null?void 0:r.get(y.entity2.toLowerCase()))||y.entity2,_={name:y.relation,type:"relation",confidence:y.confidence,children:[c(y.entity2,h+1)]};m.children.push(_)}),m},"buildNode");if(n)o.children.push(c(n));else{let l=new Map;i.forEach(d=>{let m=d.entity1.toLowerCase();l.set(m,(l.get(m)||0)+1)}),Array.from(l.entries()).sort((d,m)=>m[1]-d[1]).slice(0,5).map(([d])=>d).forEach(d=>{o.children.push(c(d))})}return o}async generateNetworkSummary(e,t){let{entities:s,relationships:i,memoryEntries:n}=e,r={overview:{total_entities:s.length,total_relationships:i.length,total_memory_entries:n.length,network_density:s.length>1?i.length/(s.length*(s.length-1)):0},entity_analysis:{},relationship_analysis:{},confidence_distribution:{},temporal_patterns:{}},o=new Map,a=new Map;s.forEach(d=>{o.set(d,0),a.set(d,"unknown")}),i.forEach(d=>{o.set(d.entity1,(o.get(d.entity1)||0)+1),o.set(d.entity2,(o.get(d.entity2)||0)+1)}),r.entity_analysis={most_connected:Array.from(o.entries()).sort((d,m)=>m[1]-d[1]).slice(0,5).map(([d,m])=>({entity:d,connections:m})),average_connections:o.size>0?Array.from(o.values()).reduce((d,m)=>d+m,0)/o.size:0};let c=new Map;i.forEach(d=>{c.set(d.relation,(c.get(d.relation)||0)+1)}),r.relationship_analysis={most_common_relations:Array.from(c.entries()).sort((d,m)=>m[1]-d[1]).slice(0,5).map(([d,m])=>({relation:d,count:m})),unique_relation_types:c.size};let l={high:0,medium:0,low:0};i.forEach(d=>{d.confidence>=.8?l.high++:d.confidence>=.5?l.medium++:l.low++}),r.confidence_distribution={...l,average_confidence:i.length>0?i.reduce((d,m)=>d+m.confidence,0)/i.length:0};let h=i.map(d=>new Date(d.timestamp));if(h.length>0){let d=h.sort((m,p)=>m-p);r.temporal_patterns={earliest_entry:d[0].toISOString(),latest_entry:d[d.length-1].toISOString(),total_timespan_days:Math.ceil((d[d.length-1]-d[0])/(1e3*60*60*24))}}return r}sanitizeNodeId(e){return e.toLowerCase().replace(/[^a-z0-9]/g,"_")}getAvailableFormats(){return Array.from(this.visualFormats.entries()).map(([e,t])=>({format:e,name:t.name,description:t.description}))}getStats(){return{available_formats:this.getAvailableFormats(),total_formats:this.visualFormats.size,supported_layouts:["hierarchical","circular","force_directed"]}}};u(qs,"VisualMemoryMapper");var zs=qs;xr.exports={VisualMemoryMapper:zs}});var Ir=g((Sd,Nr)=>{var Us=class Us{constructor(e,t,s){this.memorySystem=e,this.relationshipEngine=t,this.conflictEngine=s,this.validationRules=new Map,this.initializeValidationRules()}initializeValidationRules(){this.validationRules.set("ENTITY_CONSISTENCY",{name:"Entity Consistency",description:"Validate entity names are consistent across all systems",validator:this.validateEntityConsistency.bind(this),severity:"high"}),this.validationRules.set("RELATIONSHIP_INTEGRITY",{name:"Relationship Integrity",description:"Validate relationships reference valid entities",validator:this.validateRelationshipIntegrity.bind(this),severity:"high"}),this.validationRules.set("MEMORY_REFERENCES",{name:"Memory References",description:"Validate memory entries reference real entities",validator:this.validateMemoryReferences.bind(this),severity:"medium"}),this.validationRules.set("CONFIDENCE_ALIGNMENT",{name:"Confidence Alignment",description:"Validate confidence scores are logically consistent",validator:this.validateConfidenceAlignment.bind(this),severity:"medium"}),this.validationRules.set("TEMPORAL_CONSISTENCY",{name:"Temporal Consistency",description:"Validate timestamps align across related data",validator:this.validateTemporalConsistency.bind(this),severity:"low"}),this.validationRules.set("ORPHANED_DATA",{name:"Orphaned Data",description:"Find data without proper cross-references",validator:this.validateOrphanedData.bind(this),severity:"medium"})}async validateCrossReferences(e={}){let{rules:t=Array.from(this.validationRules.keys()),fix_issues:s=!1,detailed_report:i=!0}=e,n={validation_summary:{total_rules:t.length,passed:0,failed:0,warnings:0,errors:[]},rule_results:[],system_health:{overall_score:0,entity_integrity:0,relationship_integrity:0,memory_integrity:0},recommendations:[]};for(let r of t){let o=this.validationRules.get(r);if(o)try{let a=await o.validator(e),c={rule:r,name:o.name,severity:o.severity,status:a.issues.length===0?"PASSED":"FAILED",issues:a.issues,statistics:a.statistics,recommendations:a.recommendations||[]};n.rule_results.push(c),c.status==="PASSED"?n.validation_summary.passed++:(n.validation_summary.failed++,o.severity==="high"?n.validation_summary.errors.push(c):n.validation_summary.warnings++),n.recommendations.push(...c.recommendations)}catch(a){n.validation_summary.errors.push({rule:r,error:a.message})}}return n.system_health=await this.calculateSystemHealth(n),n}async validateEntityConsistency(e={}){let t=[],s={total_entities:0,inconsistent_entities:0},i=new Set;Array.from(this.relationshipEngine.relationships.values()).forEach(l=>{i.add(l.entity1),i.add(l.entity2)});let r=new Set;(await this.memorySystem.query({},1e3)).forEach(l=>{this.extractEntitiesFromText(l.content).forEach(d=>r.add(d.toLowerCase()))}),s.total_entities=new Set([...i,...r]).size;let a=new Set([...i,...r]),c=new Map;for(let l of a){let h=this.normalizeEntity(l);c.has(h)||c.set(h,[]),c.get(h).push(l)}for(let[l,h]of c)if(h.length>1){let d=[...new Set(h)];d.length>1&&(t.push({type:"ENTITY_INCONSISTENCY",description:`Entity variations found: ${d.join(", ")}`,entities:d,severity:"medium",suggestion:`Standardize to: ${d[0]}`}),s.inconsistent_entities++)}return{issues:t,statistics:s,recommendations:t.length>0?["Consider implementing entity normalization","Use consistent naming conventions","Review entity extraction algorithms"]:[]}}async validateRelationshipIntegrity(e={}){let t=[],s={total_relationships:0,invalid_relationships:0,orphaned_entities:0},i=Array.from(this.relationshipEngine.relationships.values());s.total_relationships=i.length;let n=new Set;i.forEach(r=>{n.add(r.entity1),n.add(r.entity2)});for(let r of i)r.entity1===r.entity2&&t.push({type:"SELF_REFERENCE",description:`Self-referencing relationship: ${r.entity1} ${r.relation} ${r.entity2}`,relationship:r,severity:"low",suggestion:"Review if self-reference is intentional"}),(!r.entity1||!r.entity2||!r.relation)&&(t.push({type:"EMPTY_RELATIONSHIP",description:`Relationship with empty fields: "${r.entity1}" "${r.relation}" "${r.entity2}"`,relationship:r,severity:"high",suggestion:"Remove or fix incomplete relationship"}),s.invalid_relationships++),(r.confidence<0||r.confidence>1)&&t.push({type:"INVALID_CONFIDENCE",description:`Invalid confidence score: ${r.confidence} for relationship ${r.id}`,relationship:r,severity:"medium",suggestion:"Fix confidence score to be between 0 and 1"});return{issues:t,statistics:s,recommendations:t.length>0?["Implement relationship validation before storage","Add confidence score validation","Review relationship creation logic"]:[]}}async validateMemoryReferences(e={}){let t=[],s={total_memories:0,memories_with_entity_refs:0,unlinked_memories:0},i=await this.memorySystem.query({},1e3);s.total_memories=i.length;let n=new Set;Array.from(this.relationshipEngine.relationships.values()).forEach(o=>{n.add(o.entity1),n.add(o.entity2)});for(let o of i){let a=this.extractEntitiesFromText(o.content);if(a.length>0){s.memories_with_entity_refs++;let c=a.filter(l=>!n.has(l.toLowerCase()));c.length>0&&t.push({type:"UNLINKED_ENTITY",description:`Memory ${o.id} references unknown entities: ${c.join(", ")}`,memory_id:o.id,entities:c,severity:"medium",suggestion:"Consider creating relationships for these entities"})}else s.unlinked_memories++}return{issues:t,statistics:s,recommendations:t.length>0?["Link memory entries to relationship entities","Improve entity extraction from memory content","Consider creating relationships for frequently mentioned entities"]:[]}}async validateConfidenceAlignment(e={}){let t=[],s={total_confidence_scores:0,misaligned_scores:0,average_confidence:0},i=Array.from(this.relationshipEngine.relationships.values()),n=await this.memorySystem.query({},1e3),r=[...i.map(c=>c.confidence),...n.map(c=>c.confidence_score)];s.total_confidence_scores=r.length,s.average_confidence=r.length>0?r.reduce((c,l)=>c+l,0)/r.length:0;let o=.3,a=new Map;i.forEach(c=>{[c.entity1,c.entity2].forEach(l=>{a.has(l)||a.set(l,{relationships:[],memories:[]}),a.get(l).relationships.push(c)})}),n.forEach(c=>{this.extractEntitiesFromText(c.content).forEach(h=>{let d=h.toLowerCase();a.has(d)||a.set(d,{relationships:[],memories:[]}),a.get(d).memories.push(c)})});for(let[c,l]of a)if(l.relationships.length>0&&l.memories.length>0){let h=l.relationships.map(y=>y.confidence),d=l.memories.map(y=>y.confidence_score),m=h.reduce((y,f)=>y+f,0)/h.length,p=d.reduce((y,f)=>y+f,0)/d.length;Math.abs(m-p)>o&&(t.push({type:"CONFIDENCE_MISALIGNMENT",description:`Confidence misalignment for entity "${c}": relationships=${m.toFixed(2)}, memories=${p.toFixed(2)}`,entity:c,relationship_confidence:m,memory_confidence:p,severity:"low",suggestion:"Review confidence scoring consistency"}),s.misaligned_scores++)}return{issues:t,statistics:s,recommendations:t.length>0?["Standardize confidence scoring across systems","Implement confidence calibration","Review confidence assignment logic"]:[]}}async validateTemporalConsistency(e={}){let t=[],s={total_timestamped_items:0,temporal_violations:0,timeline_gaps:0},i=Array.from(this.relationshipEngine.relationships.values()),n=await this.memorySystem.query({},1e3),r=[...i.map(a=>({type:"relationship",item:a,timestamp:new Date(a.timestamp)})),...n.map(a=>({type:"memory",item:a,timestamp:new Date(a.timestamp)}))].sort((a,c)=>a.timestamp-c.timestamp);s.total_timestamped_items=r.length;let o=new Date;for(let a=0;a<r.length;a++){let c=r[a];if(c.timestamp>o&&(t.push({type:"FUTURE_TIMESTAMP",description:`${c.type} has future timestamp: ${c.timestamp.toISOString()}`,item:c.item,severity:"high",suggestion:"Fix timestamp to current or past time"}),s.temporal_violations++),a<r.length-1){let l=r[a+1],h=l.timestamp-c.timestamp,d=365*24*60*60*1e3;h>d&&(t.push({type:"LARGE_TIME_GAP",description:`Large time gap between ${c.type} and ${l.type}: ${Math.ceil(h/(1440*60*1e3))} days`,from:c.timestamp.toISOString(),to:l.timestamp.toISOString(),severity:"low",suggestion:"Review for missing data or incorrect timestamps"}),s.timeline_gaps++)}}return{issues:t,statistics:s,recommendations:t.length>0?["Implement timestamp validation","Add temporal consistency checks","Review data entry timestamps"]:[]}}async validateOrphanedData(e={}){let t=[],s={total_items:0,orphaned_relationships:0,orphaned_memories:0},i=Array.from(this.relationshipEngine.relationships.values()),n=await this.memorySystem.query({},1e3);s.total_items=i.length+n.length;let r=new Map;i.forEach(a=>{[a.entity1,a.entity2].forEach(c=>{r.set(c,(r.get(c)||0)+1)})}),n.forEach(a=>{this.extractEntitiesFromText(a.content).forEach(l=>{let h=l.toLowerCase();r.set(h,(r.get(h)||0)+1)})});let o=Array.from(r.entries()).filter(([a,c])=>c===1).map(([a])=>a);return o.length>0&&(t.push({type:"POTENTIAL_ORPHANS",description:`Entities with minimal references: ${o.slice(0,5).join(", ")}${o.length>5?"...":""}`,entities:o,count:o.length,severity:"low",suggestion:"Review entities with single references"}),s.orphaned_relationships=o.length),{issues:t,statistics:s,recommendations:t.length>0?["Review entities with minimal cross-references","Consider consolidating related entities","Implement entity usage tracking"]:[]}}extractEntitiesFromText(e){let t=[];return e.split(/\s+/).forEach(i=>{let n=i.replace(/[^a-zA-Z]/g,"");n.match(/^[A-Z][a-z]+$/)&&t.push(n)}),[...new Set(t)]}normalizeEntity(e){return e.toLowerCase().trim().replace(/[^a-z0-9]/g,"")}async calculateSystemHealth(e){let t=e.rule_results.length,s=e.validation_summary.passed,i=t>0?s/t*100:0,n=e.rule_results.filter(h=>h.rule.includes("ENTITY")||h.rule.includes("ORPHANED")),r=e.rule_results.filter(h=>h.rule.includes("RELATIONSHIP")||h.rule.includes("TEMPORAL")),o=e.rule_results.filter(h=>h.rule.includes("MEMORY")||h.rule.includes("CONFIDENCE")),a=n.length>0?n.filter(h=>h.status==="PASSED").length/n.length*100:100,c=r.length>0?r.filter(h=>h.status==="PASSED").length/r.length*100:100,l=o.length>0?o.filter(h=>h.status==="PASSED").length/o.length*100:100;return{overall_score:Math.round(i),entity_integrity:Math.round(a),relationship_integrity:Math.round(c),memory_integrity:Math.round(l)}}getStats(){return{total_validation_rules:this.validationRules.size,available_rules:Array.from(this.validationRules.keys()),validation_categories:["entity","relationship","memory","confidence","temporal"],severity_levels:["high","medium","low"]}}};u(Us,"CrossReferenceValidator");var js=Us;Nr.exports={CrossReferenceValidator:js}});var Hs=g((vd,Dr)=>{var Ws=class Ws{constructor(){this.relationships=new Map,this.entityIndex=new Map,this.relationIndex=new Map,this.algorithms=new Map,this.counter=0,this.originalEntityNames=new Map,this.initializeAlgorithms()}initializeAlgorithms(){this.algorithms.set("exact_match",{name:"Exact Match",description:"Precise entity and relation matching",query:u((e,t)=>e.filter(s=>(!t.entity1||s.entity1===t.entity1.toLowerCase())&&(!t.relation||s.relation===t.relation.toLowerCase())&&(!t.entity2||s.entity2===t.entity2.toLowerCase())),"query")}),this.algorithms.set("fuzzy_match",{name:"Fuzzy Match",description:"Approximate entity and relation matching",query:u((e,t)=>e.filter(s=>{let i=u((n,r)=>n.includes(r)||r.includes(n),"fuzzyMatch");return(!t.entity1||i(s.entity1,t.entity1.toLowerCase())||i(s.entity2,t.entity1.toLowerCase()))&&(!t.relation||i(s.relation,t.relation.toLowerCase()))&&(!t.entity2||i(s.entity2,t.entity2.toLowerCase())||i(s.entity1,t.entity2.toLowerCase()))}),"query")}),this.algorithms.set("confidence_weighted",{name:"Confidence Weighted",description:"Results ranked by confidence and relevance",query:u((e,t)=>e.filter(i=>(!t.entity1||i.entity1.includes(t.entity1.toLowerCase())||i.entity2.includes(t.entity1.toLowerCase()))&&(!t.relation||i.relation.includes(t.relation.toLowerCase()))&&(!t.entity2||i.entity2.includes(t.entity2.toLowerCase())||i.entity1.includes(t.entity2.toLowerCase()))).sort((i,n)=>i.confidence!==n.confidence?n.confidence-i.confidence:new Date(n.timestamp)-new Date(i.timestamp)),"query")})}store(e,t,s,i={}){let n=e.toLowerCase().trim(),r=s.toLowerCase().trim();this.originalEntityNames.set(n,e),this.originalEntityNames.set(r,s);let o={id:`rel_${String(this.counter++).padStart(4,"0")}`,entity1:n,relation:t.toLowerCase().trim(),entity2:r,confidence:i.confidence||1,timestamp:new Date().toISOString(),source:i.source||"user_input",metadata:{entity1_type:i.entity1_type||"unknown",entity2_type:i.entity2_type||"unknown",relation_type:i.relation_type||"general",algorithm_version:"1.0",...i}};return this.relationships.set(o.id,o),this.updateIndexes(o),o}updateIndexes(e){[e.entity1,e.entity2].forEach(t=>{this.entityIndex.has(t)||this.entityIndex.set(t,new Set),this.entityIndex.get(t).add(e.id)}),this.relationIndex.has(e.relation)||this.relationIndex.set(e.relation,new Set),this.relationIndex.get(e.relation).add(e.id)}query(e={},t="fuzzy_match"){let i=Array.from(this.relationships.values()).filter(r=>r.confidence>=(e.min_confidence||0));return e.entity_type&&(i=i.filter(r=>r.metadata.entity1_type===e.entity_type||r.metadata.entity2_type===e.entity_type)),e.relation_type&&(i=i.filter(r=>r.metadata.relation_type===e.relation_type)),i=(this.algorithms.get(t)||this.algorithms.get("fuzzy_match")).query(i,e),i.slice(0,e.limit||20)}getAlgorithms(){return Array.from(this.algorithms.entries()).map(([e,t])=>({key:e,name:t.name,description:t.description}))}getEntityRelationships(e){let t=this.entityIndex.get(e.toLowerCase())||new Set;return Array.from(t).map(s=>this.relationships.get(s)).filter(Boolean)}calculatePathConfidence(e){let t=1;for(let s=1;s<e.length;s+=2){let n=this.getEntityRelationships(e[s-1]).find(r=>r.relation===e[s]&&(r.entity2===e[s+1]||r.entity1===e[s+1]));n&&(t*=n.confidence)}return t}traverse(e,t={}){let{maxHops:s=3,relationFilter:i=null,entityTypeFilter:n=null,algorithm:r="bfs",returnPaths:o=!1}=t,a=new Set,c=[{entity:e.toLowerCase(),path:[e.toLowerCase()],depth:0}],l=[];for(;c.length>0;){let h=r==="bfs"?c.shift():c.pop();if(h.depth>=s||a.has(h.entity))continue;a.add(h.entity);let d=this.getEntityRelationships(h.entity);for(let m of d){if(i&&!m.relation.includes(i)||n&&m.metadata.entity1_type!==n&&m.metadata.entity2_type!==n)continue;let p=m.entity1===h.entity?m.entity2:m.entity1;if(!a.has(p)){let y=[...h.path,m.relation,p];(h.depth+1===s||o)&&l.push({path:y,depth:h.depth+1,confidence:this.calculatePathConfidence(y),relationships:[...h.relationships||[],m]}),c.push({entity:p,path:y,depth:h.depth+1,relationships:[...h.relationships||[],m]})}}}return l}findPath(e,t,s={}){return this.traverse(e,{...s,maxHops:s.maxHops||6,returnPaths:!0,algorithm:"bfs"}).filter(n=>n.path[n.path.length-1]===t.toLowerCase()).sort((n,r)=>n.depth!==r.depth?n.depth-r.depth:r.confidence-n.confidence)}getStats(){return{total_relationships:this.relationships.size,unique_entities:this.entityIndex.size,unique_relations:this.relationIndex.size,available_algorithms:this.algorithms.size}}};u(Ws,"RelationshipEngine");var Bs=Ws;Dr.exports={RelationshipEngine:Bs}});var Fr=g((Md,Lr)=>{var Vs=class Vs{constructor({name:e,description:t,parameters:s,handler:i,serverId:n,category:r="general"}){this.name=e,this.description=t,this.parameters=s,this.handler=i,this.serverId=n,this.category=r}};u(Vs,"MCPTool");var Gs=Vs,Xs=class Xs{constructor(e,t,s,i={}){this.serverId=e,this.name=t,this.description=s,this.config=i,this.status="disconnected",this.tools=[],this.isRunning=!1}async initialize(){throw new Error("initialize() must be implemented by subclass")}async disconnect(){throw new Error("disconnect() must be implemented by subclass")}async discoverTools(){return this.tools}listTools(){return this.tools}async getToolsSchema(){return this.listTools().map(t=>({name:t.name,description:t.description,parameters:t.parameters,category:t.category}))}getTool(e){return this.tools.find(t=>t.name===e)||null}getToolsByCategory(e){return this.tools.filter(t=>t.category===e)}registerTool(e){if(!e||!e.name)throw new Error("Tool must have a name");if(!e.handler||typeof e.handler!="function")throw new Error("Tool must have a handler function");if(this.getTool(e.name))throw new Error(`Tool '${e.name}' already registered`);return this.tools.push(e),e}getServerInfo(){let e=[...new Set(this.tools.map(t=>t.category))];return{serverId:this.serverId,name:this.name,description:this.description,status:this.status,toolsCount:this.tools.length,categories:e}}async executeTool(e,t){let s=this.getTool(e);if(!s)throw new Error(`Tool ${e} not found`);let i=t;if(typeof t=="string")try{i=JSON.parse(t)}catch{i={}}else(typeof t!="object"||t===null)&&(i={});try{return await s.handler(i)}catch(n){throw new Error(`Tool execution failed: ${n.message}`)}}async handleMessage(e){if(!e||typeof e!="object")return{error:{code:-32600,message:"Invalid Request"}};let{method:t,params:s}=e;try{switch(t){case"tools/list":return{tools:await this.getToolsSchema()};case"tools/call":if(!s||!s.name)return{error:{code:-32602,message:"Invalid params: tool name required"}};let n=await this.executeTool(s.name,s.arguments);return n&&typeof n=="object"&&"content"in n?n:{result:n&&typeof n=="object"&&"result"in n?n.result:n};default:return{error:{code:-32601,message:"Method not found"}}}}catch(i){return{error:{code:-32603,message:i.message}}}}async start(){this.isRunning=!0,this.status="connected"}async stop(){this.isRunning=!1,this.status="disconnected"}async restart(){await this.stop(),await this.start()}updateConfig(e){typeof e=="object"&&e!==null&&(this.config={...this.config,...e})}getConfig(){return{...this.config}}validateConfig(e){if(e==null)throw new Error("Configuration cannot be null or undefined");return!0}};u(Xs,"BaseMCPServer");var ue=Xs;Lr.exports={BaseMCPServer:ue,BaseServer:ue,MCPTool:Gs}});var Pr=g((kd,$r)=>{var D=require("fs-extra"),R=require("path"),{MCPTool:U}=Fr(),{RelationshipEngine:Hc}=Hs(),Js=class Js{constructor(e,t={}){this.memorySystem=e,this.config=t,this.activeProject=t.projectPath||process.cwd(),this.fileWatcher=null,this.projects=new Map,this.relationshipEngine=new Hc}createMemoryExportTool(){return new U({name:"memory_export",description:"Export memory data in various formats (JSON, CSV, Markdown) with auto-extracted entities, relationships, and conflict resolution suggestions preserved.",parameters:{type:"object",properties:{format:{type:"string",enum:["json","csv","markdown"],description:"Export format",default:"json"},project:{type:"string",description:"Project filter (optional)"},since:{type:"string",description:"Export entries since date (ISO string)"},memory_type:{type:"string",description:"Filter by memory type",enum:["observation","action","result","error","context","general"]}}},handler:this._handleMemoryExport.bind(this),serverId:"nova-memory",category:"export"})}createProjectListTool(){return new U({name:"project_list",description:"List all discovered projects with memory statistics including entity extraction metrics, relationship counts, and data quality scores.",parameters:{type:"object",properties:{detailed:{type:"boolean",description:"Include detailed project information",default:!1},scan_workspace:{type:"boolean",description:"Scan workspace for new projects",default:!1}}},handler:this._handleProjectList.bind(this),serverId:"nova-memory",category:"project"})}createProjectSwitchTool(){return new U({name:"project_switch",description:"Switch active project context for memory operations while maintaining cross-project entity relationship tracking and data consistency.",parameters:{type:"object",properties:{project_path:{type:"string",description:"Path to the project directory"}},required:["project_path"]},handler:this._handleProjectSwitch.bind(this),serverId:"nova-memory",category:"project"})}createFileChangesTool(){return new U({name:"file_changes",description:"Get recent file changes from file watching system with intelligent memory updates and entity re-extraction for changed content.",parameters:{type:"object",properties:{since:{type:"string",description:"Show changes since timestamp (ISO string)"},limit:{type:"integer",description:"Maximum number of changes to return",default:50,minimum:1,maximum:200},file_types:{type:"array",items:{type:"string"},description:'Filter by file extensions (e.g., [".js", ".py"])'},change_types:{type:"array",items:{type:"string",enum:["added","modified","deleted","renamed"]},description:"Filter by change types"}}},handler:this._handleFileChanges.bind(this),serverId:"nova-memory",category:"files"})}async _handleMemoryExport(e){try{let{format:t="json",project:s,since:i,memory_type:n}=e,r={};if(n&&(r.memory_type=n),i){let p=new Date(i);if(isNaN(p.getTime()))return{error:'Invalid date format for "since" parameter'}}let o=await this.memorySystem.query(r,1e3),a=o;if(i){let p=new Date(i);a=o.filter(y=>new Date(y.timestamp)>=p)}let c,l,h=new Date().toISOString().replace(/[:.]/g,"-");switch(t){case"json":c=JSON.stringify(a,null,2),l=`memory-export-${h}.json`;break;case"csv":c=this._convertToCSV(a),l=`memory-export-${h}.csv`;break;case"markdown":c=this._convertToMarkdown(a),l=`memory-export-${h}.md`;break;default:return{error:`Unsupported export format: ${t}`}}let d=R.join(this.activeProject,".nova","exports");await D.ensureDir(d);let m=R.join(d,l);return await D.writeFile(m,c,"utf8"),{success:!0,format:t,filename:l,filepath:m,exported_count:a.length,file_size:c.length,timestamp:new Date().toISOString()}}catch(t){return{error:t.message}}}async _handleProjectList(e){try{let{detailed:t=!1,scan_workspace:s=!1}=e;s&&await this._scanWorkspaceForProjects();let i=Array.from(this.projects.values());if(!t)return{success:!0,projects:i.map(r=>({name:r.name,path:r.path,type:r.type,active:r.path===this.activeProject,memory_count:r.memoryCount||0})),total_projects:i.length,active_project:this.activeProject};let n=[];for(let r of i)try{let o=r.path===this.activeProject?await this.memorySystem.getStats():{total_entries:0};n.push({...r,memory_stats:o,active:r.path===this.activeProject})}catch(o){n.push({...r,error:`Failed to get stats: ${o.message}`,active:r.path===this.activeProject})}return{success:!0,projects:n,total_projects:i.length,active_project:this.activeProject}}catch(t){return{error:t.message}}}async _handleProjectSwitch(e){try{let{project_path:t}=e;if(!await D.pathExists(t))return{error:`Project path does not exist: ${t}`};let s=R.resolve(t);if(!await this._isValidProject(s))return{error:`Path is not a recognized project: ${t}`};let n=this.activeProject;this.activeProject=s;let r=await this._getProjectInfo(s);return{success:!0,previous_project:n,active_project:this.activeProject,project_info:r,message:`Switched to project: ${r.name||R.basename(s)}`}}catch(t){return{error:t.message}}}async _handleFileChanges(e){try{let{since:t,limit:s=50,file_types:i,change_types:n}=e,o=[{path:"src/index.js",type:"modified",timestamp:new Date().toISOString(),size:1024,project:this.activeProject},{path:"README.md",type:"modified",timestamp:new Date(Date.now()-300*1e3).toISOString(),size:2048,project:this.activeProject}];if(t){let a=new Date(t);isNaN(a.getTime())||(o=o.filter(c=>new Date(c.timestamp)>=a))}return i&&i.length>0&&(o=o.filter(a=>i.some(c=>a.path.endsWith(c)))),n&&n.length>0&&(o=o.filter(a=>n.includes(a.type))),o=o.slice(0,s),{success:!0,changes:o,total_found:o.length,project:this.activeProject,watching_enabled:!1,filters_applied:{since:t||null,file_types:i||null,change_types:n||null}}}catch(t){return{error:t.message}}}_convertToCSV(e){let s=[["id","content","memory_type","session_id","timestamp","tags","confidence_score"].join(",")];for(let i of e){let n=[i.id||"",`"${(i.content||"").replace(/"/g,'""')}"`,i.memory_type||"",i.session_id||"",i.timestamp?new Date(i.timestamp).toISOString():"",`"${(i.tags||[]).join(";")}"`,i.confidence_score||1];s.push(n.join(","))}return s.join(`
`)}_convertToMarkdown(e){let t=`# Memory Export

`;t+=`Generated: ${new Date().toISOString()}
`,t+=`Total Entries: ${e.length}

`;let s=e.reduce((i,n)=>{let r=n.memory_type||"general";return i[r]||(i[r]=[]),i[r].push(n),i},{});for(let[i,n]of Object.entries(s)){t+=`## ${i.charAt(0).toUpperCase()+i.slice(1)} (${n.length})

`;for(let r of n)t+=`### Entry ${r.id}

`,t+=`**Content:** ${r.content}

`,r.tags&&r.tags.length>0&&(t+=`**Tags:** ${r.tags.join(", ")}

`),t+=`**Timestamp:** ${new Date(r.timestamp).toLocaleString()}

`,t+=`**Confidence:** ${r.confidence_score}

`,t+=`---

`}return t}async _scanWorkspaceForProjects(){let e={name:R.basename(this.activeProject),path:this.activeProject,type:"unknown",detected:new Date().toISOString(),memoryCount:0};this.projects.set(this.activeProject,e)}async _isValidProject(e){let t=[".git","package.json","requirements.txt","pom.xml","Cargo.toml",".sln","go.mod","pyproject.toml"];for(let s of t)if(await D.pathExists(R.join(e,s)))return!0;return!1}async _getProjectInfo(e){let t={name:R.basename(e),path:e,type:"unknown",detected:new Date().toISOString()};if(await D.pathExists(R.join(e,"package.json"))){t.type="node.js";try{let s=await D.readJson(R.join(e,"package.json"));t.name=s.name||t.name,t.description=s.description,t.version=s.version}catch{}}else await D.pathExists(R.join(e,"requirements.txt"))?t.type="python":await D.pathExists(R.join(e,".git"))&&(t.type="git");return t}createStoreRelationshipTool(){return new U({name:"store_relationship",description:"Store structured entity-relation-entity relationships with advanced indexing, confidence scoring, temporal context, and automatic conflict detection validation.",parameters:{type:"object",properties:{entity1:{type:"string",description:'First entity (subject) - e.g., "John Smith"'},relation:{type:"string",description:'Relationship type (predicate) - e.g., "works_at", "knows", "located_in"'},entity2:{type:"string",description:'Second entity (object) - e.g., "Google"'},confidence:{type:"number",description:"Confidence score (0-1) for this relationship",default:1,minimum:0,maximum:1},entity1_type:{type:"string",description:"Type of first entity",enum:["person","company","location","concept","event","product","unknown"],default:"unknown"},entity2_type:{type:"string",description:"Type of second entity",enum:["person","company","location","concept","event","product","unknown"],default:"unknown"},relation_type:{type:"string",description:"Category of relationship",enum:["employment","social","location","ownership","temporal","causal","general"],default:"general"},source:{type:"string",description:"Source of this relationship information",default:"user_input"},metadata:{type:"object",description:"Additional metadata for the relationship",additionalProperties:!0}},required:["entity1","relation","entity2"]},handler:this._handleStoreRelationship.bind(this),serverId:"nova-memory",category:"relationships"})}createQueryRelationshipsTool(){return new U({name:"query_relationships",description:"Query stored relationships with advanced filtering and multiple algorithms (exact, fuzzy, confidence-weighted) featuring intelligent relationship inference and cross-validation with auto-extracted entities.",parameters:{type:"object",properties:{entity1:{type:"string",description:"Filter by first entity (supports partial matching with fuzzy algorithm)"},relation:{type:"string",description:"Filter by relationship type"},entity2:{type:"string",description:"Filter by second entity (supports partial matching with fuzzy algorithm)"},entity_type:{type:"string",description:"Filter by entity type (matches either entity1 or entity2)",enum:["person","company","location","concept","event","product","unknown"]},relation_type:{type:"string",description:"Filter by relationship category",enum:["employment","social","location","ownership","temporal","causal","general"]},min_confidence:{type:"number",description:"Minimum confidence threshold (0-1)",default:0,minimum:0,maximum:1},algorithm:{type:"string",description:"Query algorithm to use",enum:["exact_match","fuzzy_match","confidence_weighted"],default:"fuzzy_match"},limit:{type:"integer",description:"Maximum results to return",default:20,minimum:1,maximum:100}}},handler:this._handleQueryRelationships.bind(this),serverId:"nova-memory",category:"relationships"})}async _handleStoreRelationship(e){try{let{entity1:t,relation:s,entity2:i,confidence:n,entity1_type:r,entity2_type:o,relation_type:a,source:c,metadata:l}=e,h=this.relationshipEngine.store(t,s,i,{confidence:n,entity1_type:r,entity2_type:o,relation_type:a,source:c,...l}),d=this.relationshipEngine.getStats();return{success:!0,relationship:{id:h.id,entity1:h.entity1,relation:h.relation,entity2:h.entity2,confidence:h.confidence,timestamp:h.timestamp,metadata:h.metadata},stats:{total_relationships:d.total_relationships,unique_entities:d.unique_entities,unique_relations:d.unique_relations,available_algorithms:d.available_algorithms},message:`Successfully stored relationship: ${h.entity1} \u2192 ${h.relation} \u2192 ${h.entity2}`}}catch(t){return{error:t.message}}}async _handleQueryRelationships(e){try{let{entity1:t,relation:s,entity2:i,entity_type:n,relation_type:r,min_confidence:o=0,algorithm:a="fuzzy_match",limit:c=20}=e,l="SELECT * FROM relationships WHERE 1=1",h=[];a==="exact_match"?(t&&(l+=" AND entity1 = ?",h.push(t)),i&&(l+=" AND entity2 = ?",h.push(i)),s&&(l+=" AND relation = ?",h.push(s))):(t&&(l+=" AND (entity1 LIKE ? OR entity2 LIKE ?)",h.push(`%${t}%`,`%${t}%`)),i&&(l+=" AND (entity1 LIKE ? OR entity2 LIKE ?)",h.push(`%${i}%`,`%${i}%`)),s&&(l+=" AND relation LIKE ?",h.push(`%${s}%`))),o>0&&(l+=" AND confidence >= ?",h.push(o)),l+=" ORDER BY confidence DESC, timestamp DESC LIMIT ?",h.push(c);let d=await this.memorySystem.dbAll(l,h),m=await this.memorySystem.dbGet("SELECT COUNT(*) as total FROM relationships"),p=await this.memorySystem.dbGet("SELECT COUNT(DISTINCT entity1) as count FROM relationships"),y=await this.memorySystem.dbGet("SELECT COUNT(DISTINCT entity2) as count FROM relationships"),f=await this.memorySystem.dbGet("SELECT COUNT(DISTINCT relation) as count FROM relationships"),_=[{key:"exact_match",name:"Exact Match",description:"Precise entity and relation matching"},{key:"fuzzy_match",name:"Fuzzy Match",description:"Approximate entity and relation matching"},{key:"confidence_weighted",name:"Confidence Weighted",description:"Results ranked by confidence and relevance"}],E=_.find(b=>b.key===a);return{success:!0,query:{filters:{entity1:t,relation:s,entity2:i,entity_type:n,relation_type:r,min_confidence:o},algorithm:a,algorithm_info:E||{key:a,name:"Unknown",description:"Unknown algorithm"}},results:d.map(b=>({id:b.id,entity1:b.entity1,relation:b.relation,entity2:b.entity2,confidence:b.confidence,timestamp:b.timestamp,metadata:b.metadata?JSON.parse(b.metadata):{}})),count:d.length,stats:{total_relationships:m.total,unique_entities:p.count+y.count,unique_relations:f.count},available_algorithms:_}}catch(t){return{error:t.message}}}};u(Js,"EnhancedMCPTools");var Ys=Js;$r.exports={EnhancedMCPTools:Ys}});var qr=g((Od,zr)=>{zr.exports={name:"memory",description:`\u{1F9E0} Unified memory operations with SMART VERSIONING - CORE TOOL: Use frequently! 

\u26A1 PROACTIVE SEARCH RULES - AI MUST FOLLOW:
1. BEFORE writing code \u2192 Search for: existing implementations, patterns, conventions
2. BEFORE answering \u2192 Search for: previous discussions, decisions, context  
3. WHEN user mentions entities \u2192 Auto-search for: that entity's history & relationships
4. WHEN starting tasks \u2192 Search for: similar past tasks, learned patterns, gotchas
5. EVERY 3-5 actions \u2192 Check relevant memories to stay context-aware

\u{1F50D} AUTOMATIC TRIGGERS:
\u2022 "implement/create/build X" \u2192 search for X patterns first
\u2022 "fix/debug/error Y" \u2192 search for Y solutions/history
\u2022 Sees UserService \u2192 auto-search entity:"UserService"
\u2022 Sees file path \u2192 search for file history

NEW v0.3.0 FEATURES: (1) 'query' vs 'search' - query finds related content semantically, search does exact matching. (2) 'update' action - modify existing memories with version tracking. (3) 'delete' action - remove single or bulk memories with criteria. (4) 'structured_query' - filter by memory_type, category, entity with AND logic.

\u26A0\uFE0F SEARCH-FIRST POLICY: Always search existing memories BEFORE creating new ones or making decisions! The memory system is your external brain - use it constantly!`,triggerKeywords:["implement","create","build","fix","update","refactor","error","bug","issue","problem","how","what","where","when","why","pattern","convention","style","approach"],entityPatterns:[/([A-Z][a-zA-Z]+Service)/g,/([A-Z][a-zA-Z]+Manager)/g,/([A-Z][a-zA-Z]+Controller)/g,/(src\/[^\s]+\.(js|ts|jsx|tsx))/g,/([a-z-]+\.(js|ts|json|md))/g],proactiveSearchTemplates:{beforeCode:{description:"Search before writing code",searches:[{action:"query",query:"{task} implementation patterns"},{action:"search",structured_query:{category:"architecture%"}},{action:"search",structured_query:{memory_type:"observation"}}]},onEntity:{description:"Search when entity mentioned",searches:[{action:"search",structured_query:{entity:"{entity}"}},{action:"versions",entity_name:"{entity}"}]},onError:{description:"Search when error occurs",searches:[{action:"search",structured_query:{memory_type:"error"}},{action:"query",query:"{error} solution resolved"}]}},inputSchema:{type:"object",properties:{action:{type:"string",enum:["store","query","search","export","stats","versions","edit","update","delete"],description:"Action to perform - 'store' saves new memory, 'query' does semantic/fuzzy search (finds related content), 'search' does exact/keyword matching, 'update' modifies existing memory, 'delete' removes memories, 'versions' shows version history, 'stats' shows system metrics"},content:{type:"string",description:"Content to store - Be specific! Include: file paths (e.g., 'Found pattern in src/utils/helper.js'), code snippets, architecture decisions, performance metrics. IMPORTANT: Always include 'structured' data for automatic versioning and duplicate prevention!"},query:{type:"string",description:"Text to search for. IMPORTANT: 'query' action performs semantic/fuzzy search (finds related content even with typos), while 'search' action does exact matching. Example: query='database problems' finds memories about timeouts, connections, etc. search='DATABASE_URL' only finds exact text matches."},memory_type:{type:"string",enum:["observation","action","result","error","context","general"],description:"Type of memory entry - observation: code patterns/architecture insights, action: changes/implementations made, result: test outcomes/benchmarks, error: bugs/issues found, context: project background/decisions, general: other notes"},tags:{type:"array",items:{type:"string"},description:"Tags for categorization - Include: tech stack (react, nodejs), file names (auth-service, user-model), concepts (caching, security), areas (frontend, backend, database)"},limit:{type:"integer",default:20,description:"Maximum results to return"},silent:{type:"boolean",description:"Execute silently (AI-only response). When true, returns only _ai_* fields invisible to users. Use for: entity extraction, auto-categorization, background operations"},format:{type:"string",enum:["json","csv","markdown"],description:"Export format (for 'export' action)"},mode:{type:"string",enum:["smart","precise","fast","balanced"],description:"Search mode"},detailed:{type:"boolean",description:"Include detailed statistics (for 'stats' action)"},structured:{type:"object",description:"\u{1F916} AI Assistant: IMPORTANT - Providing structured data enables intelligent versioning! The first entity becomes the version key. Same entity + same relationships = duplicate (prevented). Same entity + different relationships = new version. This prevents duplicate memories while tracking how your system evolves over time. Always extract entities and relationships for best results!",properties:{entities:{type:"array",description:"Main entities mentioned (e.g., UserAuthService, TokenManager, PostgreSQL)",items:{type:"string"}},relationships:{type:"array",description:"Relationships between entities",items:{type:"object",properties:{subject:{type:"string"},relation:{type:"string",enum:["depends_on","uses","contains","implements","extends","connects_to","authenticates_with","stores_in","calls","does_not_use","replaces","conflicts_with"]},object:{type:"string"},context:{type:"string"}},required:["subject","relation","object"]}},contradicts:{type:"array",description:"IDs of memories this contradicts (if any)",items:{type:"integer"}},keywords:{type:"array",description:"Important keywords for search",items:{type:"string"}},category:{type:"string",description:"Category path (e.g., 'architecture/auth', 'api/endpoints')"},summary:{type:"string",description:"One-line summary of the memory"}}},structured_query:{type:"object",description:"Filter memories using structured criteria with AND logic. Use with 'search' action for precise filtering. All conditions must match. Example: { memory_type: 'error', category: 'database' } finds all database errors.",properties:{memory_type:{oneOf:[{type:"string",enum:["observation","action","result","error","context","general"]},{type:"array",items:{type:"string",enum:["observation","action","result","error","context","general"]}}],description:"Filter by memory type(s). Can be a single type or array of types. Example: 'error' or ['error', 'action']"},entity:{type:"string",description:"Search for memories containing this entity. Example: 'PostgreSQL', 'UserService'"},relation:{type:"string",description:"Search for specific relationship types",enum:["depends_on","uses","contains","implements","extends","connects_to","authenticates_with","stores_in","calls","does_not_use","replaces","conflicts_with"]},category:{type:"string",description:"Filter by category. Supports wildcards with %. Example: 'error/database' or '%database%'"},has_conflicts:{type:"boolean",description:"Find memories that have conflicts"},subject:{type:"string",description:"Subject entity in relationships"},object:{type:"string",description:"Object entity in relationships"}}},memory_id:{type:["integer","string"],description:"Memory ID (required for 'edit', 'update', and single 'delete' actions). Get IDs from search results or store responses."},metadata:{type:"object",description:"Additional metadata to store or update. For updates, this merges with existing metadata."},criteria:{type:"object",description:"Criteria for bulk delete operations. All conditions must match (AND logic).",properties:{memory_type:{oneOf:[{type:"string"},{type:"array",items:{type:"string"}}],description:"Delete memories of specific type(s)"},tags:{type:"array",items:{type:"string"},description:"Delete memories with ALL these tags"},older_than_days:{type:"integer",description:"Delete memories older than X days"},category:{type:"string",description:"Delete memories in this category"},entity:{type:"string",description:"Delete memories containing this entity"}}},dry_run:{type:"boolean",description:"Preview what would be deleted without actually deleting (for 'delete' action)"},confirm:{type:"boolean",description:"Required confirmation for bulk deletions affecting more than 10 memories"},archive:{type:"boolean",description:"Soft delete - mark as archived instead of permanent deletion"},preserve_metadata:{type:"boolean",description:"Keep original timestamp when editing (default: false)"},entity_name:{type:"string",description:"Entity name to get version history for (used with 'versions' action). Example: 'UserService', 'DatabaseConnection', etc."}},required:["action"]},examples:[{description:"\u{1F50D} PROACTIVE: Before implementing - search patterns",value:{action:"query",query:"UserService implementation patterns existing"}},{description:"\u{1F50D} PROACTIVE: When seeing entity - check history",value:{action:"search",structured_query:{entity:"UserAuthService"}}},{description:"\u{1F50D} PROACTIVE: Before fixing - search solutions",value:{action:"query",query:"timeout error resolved fixed solution"}},{description:"Semantic search (query) - finds related content",value:{action:"query",query:"database connection problems"}},{description:"Exact search - finds specific text",value:{action:"search",query:"DATABASE_URL"}},{description:"Filter by memory type",value:{action:"search",structured_query:{memory_type:"error"}}},{description:"Filter by multiple types and entity",value:{action:"search",structured_query:{memory_type:["config","action"],entity:"PostgreSQL"}}},{description:"Update existing memory",value:{action:"update",memory_id:"123",content:"Updated content",metadata:{status:"resolved"}}},{description:"Delete single memory",value:{action:"delete",memory_id:"456"}},{description:"Bulk delete with dry run",value:{action:"delete",criteria:{memory_type:"error",older_than_days:30},dry_run:!0}},{description:"Store with structured data for versioning",value:{action:"store",content:"UserService now uses Redis for caching",memory_type:"observation",structured:{entities:["UserService","Redis"],relationships:[{subject:"UserService",relation:"uses",object:"Redis"}],category:"architecture/caching"}}}]}});var Ur=g((Nd,jr)=>{jr.exports={name:"workflow",description:"\u{1F4CB} Workflow state management - Track multi-phase enhancements and maintain execution context. Use 'status' to check current enhancement, 'create' for new features, 'complete' to mark phases done. The 'short_memory' action provides quick context of recent activities.",inputSchema:{type:"object",properties:{action:{type:"string",enum:["create","complete","status","phases","connection","short_memory"],description:"Action to perform"},title:{type:"string",description:"Enhancement title (required for 'create' action)"},description:{type:"string",description:"Enhancement description"},type:{type:"string",enum:["ui","api","optimization","feature"],description:"Enhancement type"},priority:{type:"string",enum:["high","medium","low"],description:"Priority level"},phase:{type:"string",description:"Phase name (required for 'complete' action)"},value:{type:"string",description:"Connection string or command (required for 'connection' action)"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: auto-creating workflows from multi-phase tasks, background workflow updates"}},required:["action"]}}});var Wr=g((Id,Br)=>{Br.exports={name:"board",description:`\u{1F4CA} Task board management - IMPORTANT: Use this tool frequently to track progress! 

\u{1F3AF} MANDATORY BOARD USAGE:
1. START of conversation \u2192 board({ action: "status" }) 
2. NEW task mentioned \u2192 board({ action: "create", title: "...", category: "active-memory" })
3. WORKING on task \u2192 board({ action: "update", task_id: "...", status: "in_progress" })
4. TASK complete \u2192 board({ action: "move", task_id: "...", category: "completed" })
5. EVERY 5 actions \u2192 board({ action: "status", format: "simple" })

Categories: journal-reminder (daily notes), active-memory (current work), killer-features (major features), pending-tasks (todo), completed. 

\u26A1 WORKFLOW: Always check status first \u2192 create/update tasks \u2192 move to completed when done. This maintains context and progress visibility for both AI and user!`,inputSchema:{type:"object",properties:{action:{type:"string",enum:["status","create","update","move","delete"],description:"Action to perform - Start with 'status' to see current tasks, use 'create' for new tasks, 'update' to modify, 'move' to change categories (e.g., pending\u2192active\u2192completed), 'delete' to remove"},title:{type:"string",description:"Task title (required for 'create' action)"},description:{type:"string",description:"Task description"},category:{type:"string",enum:["journal-reminder","active-memory","killer-features","pending-tasks","completed"],description:"Task category - journal-reminder: daily logs/notes, active-memory: tasks you're currently working on, killer-features: major feature implementations, pending-tasks: upcoming todos, completed: finished work"},priority:{type:"string",enum:["high","medium","low"],description:"Task priority"},task_id:{type:"string",description:"Task ID (required for 'update', 'move', 'delete' actions)"},format:{type:"string",enum:["simple","detailed","task_ids"],description:"Output format for status - simple: concise overview, detailed: full task info including timestamps, task_ids: just IDs for quick reference"},tags:{type:"array",items:{type:"string"},description:"Task tags"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: auto-creating tasks from TODOs, subtasks, background task management"}},required:["action"]}}});var Gr=g((Dd,Hr)=>{Hr.exports={name:"relationships",description:"\u{1F517} Manage entity relationships and knowledge graph",inputSchema:{type:"object",properties:{action:{type:"string",enum:["store","query","traverse"],description:"Action to perform"},entity1:{type:"string",description:"First entity (required for 'store' action)"},entity2:{type:"string",description:"Second entity (required for 'store' action)"},relation:{type:"string",description:"Relationship type (required for 'store' action)"},start_entity:{type:"string",description:"Starting entity (required for 'traverse' action)"},max_hops:{type:"integer",default:3,description:"Maximum relationship hops"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: auto-storing entity relationships, background graph traversal, silent relationship queries"}},required:["action"]}}});var Xr=g((Ld,Vr)=>{Vr.exports={name:"analysis",description:"\u{1F4C8} Analyze and visualize memory data patterns",inputSchema:{type:"object",properties:{action:{type:"string",enum:["analyze","conflicts","visualize","validate"],description:"Action to perform"},algorithm:{type:"string",enum:["clustering","pagerank","community","hybrid"],description:"Analysis algorithm"},format:{type:"string",enum:["file","ascii_graph","mermaid","dot_graph","json_tree"],description:"Output format - 'file' saves full analysis to disk and returns path (best for large results), others return inline"},mode:{type:"string",enum:["summary","detailed","batch"],description:"Analysis mode - 'summary' returns concise stats (default, <1K tokens), 'detailed' performs full clustering (may use more tokens), 'batch' processes in chunks with caching"},batch:{type:"boolean",description:"Enable batch processing for large datasets (auto-enabled for >50 memories)"},days:{type:"integer",description:"Analyze memories from last N days"},category:{type:"string",description:"Filter by memory category"},limit:{type:"integer",default:100,description:"Maximum memories to analyze"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: background data analysis, silent conflict detection, automatic pattern discovery"}},required:["action"]}}});var Jr=g((Fd,Yr)=>{Yr.exports={name:"project",description:"\u{1F4C1} Project management and file tracking",inputSchema:{type:"object",properties:{action:{type:"string",enum:["list","switch","changes"],description:"Action to perform"},project_path:{type:"string",description:"Path to project directory (required for 'switch' action)"},detailed:{type:"boolean",description:"Include project statistics"},limit:{type:"integer",description:"Maximum changes to show"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: automatic project switching, background file tracking, silent change monitoring"}},required:["action"]}}});var Kr=g(($d,Qr)=>{Qr.exports={name:"settings",description:"\u2699\uFE0F Configure Nova Memory preferences",inputSchema:{type:"object",properties:{action:{type:"string",enum:["categories","algorithms","set_algorithm","cleanup","reset_database"],description:"Action to perform"},algorithm:{type:"string",enum:["tfidf","bm25","hybrid"],description:"Search algorithm to set (required for 'set_algorithm' action)"},mode:{type:"string",enum:["smart","precise","fast","balanced"],description:"Search mode to set (alternative to algorithm)"},force:{type:"boolean",description:"Force cleanup even if not due"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: automatic configuration updates, background cleanup operations, silent algorithm switching"}},required:["action"]}}});var eo=g((Pd,Zr)=>{Zr.exports={name:"quick",description:`\u26A1 Shortcuts for common operations - RECOMMENDED: Use these for speed! 

\u{1F680} PROACTIVE QUICK ACTIONS:
\u2022 See interesting code? \u2192 quick({ action: "save", content: "..." })
\u2022 Need context? \u2192 quick({ action: "find", query: "..." })  
\u2022 Starting work? \u2192 quick({ action: "task", title: "..." })
\u2022 Found insight? \u2192 quick({ action: "note", title: "..." })
\u2022 Lost context? \u2192 quick({ action: "status" })

SHORTCUTS: 'save' = quick memory store, 'find' = fast search, 'task' = create task instantly, 'note' = quick note, 'status' = combined board+workflow status. 

\u{1F4A1} USE FREQUENTLY: These shortcuts are 3x faster than full tool syntax! Perfect for staying in flow while maintaining memory context.`,inputSchema:{type:"object",properties:{action:{type:"string",enum:["save","find","task","note","status"],description:"Action to perform"},content:{type:"string",description:"Content to save (required for 'save' action)"},query:{type:"string",description:"Search query (required for 'find' action)"},title:{type:"string",description:"Task/note title (required for 'task' and 'note' actions)"},description:{type:"string",description:"Note content (required for 'note' action)"},priority:{type:"string",enum:["high","medium","low"],description:"Task priority"},tags:{type:"array",items:{type:"string"},description:"Quick tags"},silent:{type:"boolean",description:"Execute silently (AI-only response). Use for: auto-saving insights, background context finding, silent task creation"}},required:["action"]}}});var so=g((zd,to)=>{to.exports={name:"help",description:"\u2753 Interactive help and documentation. \u{1F916} AI TIP: Use help({ ai_mode: true }) to access complete schemas with proactive triggers!",inputSchema:{type:"object",properties:{topic:{type:"string",enum:["overview","memory","workflow","board","relationships","analysis","project","settings","quick","_ai_schema"],description:'Help topic to show. Use "_ai_schema" for AI-only complete schemas'},ai_mode:{type:"boolean",description:"AI Mode: Returns complete schemas with all proactive triggers, entity patterns, command detection rules, and silent operation guidelines. AI assistants should use this to understand full capabilities!"}},required:[]}}});var Qs=g((qd,uo)=>{var io=qr(),no=Ur(),ro=Wr(),oo=Gr(),ao=Xr(),co=Jr(),lo=Kr(),ho=eo(),mo=so();uo.exports={memory:io,workflow:no,board:ro,relationships:oo,analysis:ao,project:co,settings:lo,quick:ho,help:mo,getAllSchemas(){return[io,no,ro,oo,ao,co,lo,ho,mo]},getSchemaByName(T){return this[T]||null},getToolNames(){return Object.keys(this).filter(T=>typeof this[T]=="object"&&this[T].name)},validateAllSchemas(){return this.getAllSchemas().every(e=>e.name&&e.description&&e.inputSchema&&e.inputSchema.type==="object"&&e.inputSchema.properties&&e.inputSchema.required)}}});var Ks=g((jd,po)=>{po.exports={MEMORY_SCHEMAS:{store:{proactive_triggers:["User mentions code/function \u2192 auto-store with structured data","Error message shown \u2192 store as type:'error' with stack trace","Configuration mentioned \u2192 store as type:'context' with relationships","Pattern discovered \u2192 store as type:'observation' with entities","Task completed \u2192 store as type:'result' with metrics"],silent_conditions:["Entity extraction from code \u2192 silent: true","Pattern detection in files \u2192 silent: true","Auto-categorization of memories \u2192 silent: true","Relationship creation \u2192 silent: true","Version update of existing memory \u2192 silent: true"],next_actions:["After storing error \u2192 search for solutions","After storing pattern \u2192 check relationships","After storing result \u2192 update task status","After storing context \u2192 analyze dependencies"],ai_examples:{entity_detection:{trigger:"Sees 'class UserService'",action:{action:"store",content:"Found UserService in auth module",structured:{entities:["UserService"],category:"architecture/services"},silent:!0}},error_capture:{trigger:"TypeError occurs",action:{action:"store",memory_type:"error",content:"TypeError: Cannot read property X",tags:["error","javascript"],silent:!0}}}},query:{proactive_triggers:["BEFORE answering questions \u2192 query related memories first","User asks 'how/why/what' \u2192 semantic search for context","Implementation request \u2192 search existing patterns","Debugging request \u2192 query error memories","Architecture question \u2192 query context memories"],auto_params:{before_code:{limit:10,mode:"smart"},for_errors:{limit:5,memory_type:"error"},for_patterns:{limit:15,memory_type:"observation"}},next_actions:["No results \u2192 try broader search terms","Found patterns \u2192 check relationships","Found errors \u2192 search solutions","Multiple versions \u2192 get version history"]},search:{proactive_triggers:["Entity name mentioned \u2192 exact search entity:'EntityName'","File path shown \u2192 search for file history","CamelCase detected \u2192 entity search","Error message \u2192 search memory_type:'error'","TODO mentioned \u2192 search for related tasks"],auto_patterns:{entity:/([A-Z][a-zA-Z]+(?:Service|Manager|Controller|Component|Model|Repository))/g,file:/((?:src|lib|test)\/[^\s]+\.(js|ts|jsx|tsx))/g,error:/(Error|Exception|Failed|Cannot|Unable|Invalid)/gi,todo:/(TODO|FIXME|HACK|BUG|XXX):/gi}},update:{proactive_triggers:["Information changes \u2192 update existing memory","Entity relationships change \u2192 update with new version","Error resolved \u2192 update status in memory","Pattern evolved \u2192 create new version"],version_rules:["Same entity + different relationships = new version","Minor text changes = update in place","Contradicting information = flag conflict","Status change = update with timestamp"]},delete:{proactive_triggers:["Duplicate memories found \u2192 delete older ones","Obsolete information \u2192 delete with reason","Test data \u2192 bulk delete by category","Privacy concern \u2192 immediate deletion"],safety_rules:["Always dry_run first for bulk deletes","Require confirm: true for >10 memories","Archive instead of delete when uncertain","Log deletion reasons for audit"]}},BOARD_SCHEMAS:{status:{proactive_triggers:["Session start \u2192 check active tasks immediately","User asks 'what am I doing' \u2192 show board status","Task mentioned \u2192 check if it exists on board","After major action \u2192 update task progress","Every 5 tool calls \u2192 quick status check"],ai_mode_params:{include_schemas:!0,show_suggestions:!0,highlight_stale_tasks:!0,suggest_next_task:!0},response_enhancements:{no_tasks:"Suggest creating tasks from conversation",stale_tasks:"Highlight tasks not updated recently",completed_many:"Suggest archiving completed tasks"}},create:{proactive_triggers:["User mentions 'implement X' \u2192 create task automatically","Multiple steps described \u2192 create task per step","Bug reported \u2192 create bug fix task","TODO in code \u2192 create task from TODO","Feature request \u2192 create in killer-features"],auto_categorization:{"fix|bug|error":"active-memory","implement|create|build":"pending-tasks","research|investigate":"pending-tasks","feature|enhancement":"killer-features","note|remember":"journal-reminder"},silent_creation:["Subtasks from main task \u2192 silent: true","TODOs from code \u2192 silent: true","Follow-up tasks \u2192 silent: true"]},update:{proactive_triggers:["Starting work \u2192 update status: 'in_progress'","Blocked by issue \u2192 update with blocker info","Progress made \u2192 update description","Priority changes \u2192 update priority"],auto_status_transitions:{created:"in_progress",blocked:"in_progress",in_progress:"completed"}},move:{proactive_triggers:["Task complete \u2192 move to 'completed'","Task started \u2192 move to 'active-memory'","Task prioritized \u2192 move to appropriate category","Batch completion \u2192 move all related tasks"],category_flow:["pending-tasks \u2192 active-memory \u2192 completed","killer-features \u2192 active-memory \u2192 completed","journal-reminder \u2192 completed"]}},WORKFLOW_SCHEMAS:{status:{proactive_triggers:["Multi-phase task \u2192 check workflow status","Complex feature \u2192 track phase progress","User asks about progress \u2192 show workflow","Phase complete \u2192 check next phase"],phase_suggestions:{planning:["design","implementation"],design:["implementation","testing"],implementation:["testing","deployment"],testing:["deployment","documentation"]}},create:{proactive_triggers:["Feature with multiple phases \u2192 create workflow","Epic-level task \u2192 break into workflow","Refactoring project \u2192 phase-based workflow","Migration task \u2192 step-by-step workflow"],auto_phases:{feature:["design","implement","test","deploy"],refactor:["analyze","plan","refactor","test"],migration:["backup","migrate","verify","cleanup"],optimization:["profile","optimize","benchmark","deploy"]}}},QUICK_SCHEMAS:{save:{proactive_triggers:["Interesting code pattern \u2192 quick save","Important decision \u2192 quick save","Error encountered \u2192 quick save","Solution found \u2192 quick save"],auto_enhancement:["Extract entities automatically","Add context from recent actions","Tag based on content type","Link to current task"]},find:{proactive_triggers:["Need context \u2192 quick find","Forgot something \u2192 quick find","Similar problem \u2192 quick find","Pattern check \u2192 quick find"],search_strategies:["Try semantic search first","Fall back to exact match","Expand search if no results","Suggest related searches"]},task:{proactive_triggers:["User gives instruction \u2192 quick task","Found TODO \u2192 quick task","Bug discovered \u2192 quick task","Follow-up needed \u2192 quick task"],task_defaults:{priority:"medium",category:"active-memory",auto_description:!0}}},RELATIONSHIPS_SCHEMAS:{store:{proactive_triggers:["Service uses another \u2192 store relationship","Module imports \u2192 store dependencies","Class extends \u2192 store inheritance","API calls \u2192 store connections"],relationship_types:{code:["uses","imports","extends","implements","calls"],data:["stores_in","reads_from","caches_in","queries"],conflict:["conflicts_with","replaces","deprecates"]}},traverse:{proactive_triggers:["Need dependency tree \u2192 traverse relationships","Impact analysis \u2192 traverse connections","Find related code \u2192 traverse from entity","Architecture review \u2192 traverse all relationships"],traversal_hints:{max_hops:3,include_reverse:!0,group_by_type:!0}}},ANALYSIS_SCHEMAS:{analyze:{proactive_triggers:["Many memories stored \u2192 analyze patterns","Project complete \u2192 analyze learnings","Performance issue \u2192 analyze metrics","Architecture question \u2192 analyze structure"],analysis_modes:{summary:"Quick overview with key stats",detailed:"Full analysis with clustering",batch:"Large dataset processing"}},visualize:{proactive_triggers:["Complex relationships \u2192 visualize graph","Memory clusters \u2192 visualize connections","Timeline needed \u2192 visualize history","Dependencies \u2192 visualize tree"],format_selection:{small_graph:"ascii_graph",large_graph:"file",presentation:"mermaid",processing:"json_tree"}}},HELP_SCHEMAS:{ai_mode:{description:"Special mode that returns complete schemas with all AI metadata",trigger:"params.ai_mode === true",returns:{user_visible:"Standard help text",_ai_schemas:"Complete schema definitions",_ai_examples:"Usage examples for each action",_ai_triggers:"All proactive triggers",_ai_rules:"Behavioral rules and guidelines"}}},GLOBAL_RULES:{entity_detection:{description:"Automatically detect and process entities",patterns:[/([A-Z][a-zA-Z]+(?:Service|Manager|Controller|Component|Model|Repository))/g,/class\s+([A-Z][a-zA-Z]+)/g,/interface\s+([I]?[A-Z][a-zA-Z]+)/g,/implements\s+([I]?[A-Z][a-zA-Z]+)/g,/extends\s+([A-Z][a-zA-Z]+)/g,/type\s+([A-Z][a-zA-Z]+)/g,/(src\/[^\s]+\.(js|ts|jsx|tsx))/g,/(lib\/[^\s]+\.(js|ts|jsx|tsx))/g,/([a-z-]+\.(js|ts|json|md))/g],actions:["Search for entity history","Store entity occurrence","Check relationships"]},command_patterns:{description:"Detect user commands and act proactively",patterns:{"implement|create|build":"Search patterns \u2192 Create task \u2192 Store plan","fix|debug|solve":"Search errors \u2192 Find solutions \u2192 Track progress","refactor|optimize":"Analyze current \u2192 Plan changes \u2192 Track phases","test|verify":"Check existing tests \u2192 Run tests \u2192 Store results"}},continuous_learning:{description:"Learn from every interaction",rules:["Every error \u2192 Store with solution when found","Every pattern \u2192 Store with context","Every decision \u2192 Store with reasoning","Every result \u2192 Store with metrics"]},silent_by_default:{description:"Operations that should always be silent",operations:["Auto-entity extraction","Background relationship creation","Automatic categorization","Metadata enhancement","Cross-reference creation"]}}}});var k=g((Ud,yo)=>{var Zs=Ks(),ti=class ti{static format(e,t=!1){return t?{_ai_only:!0,_ai_result:e,_ai_timestamp:new Date().toISOString()}:e}static formatEnhanced(e,t,s,i={},n={}){var c;if(i.silent)return{_ai_only:!0,_ai_result:e,_ai_tool:t,_ai_action:s,_ai_next_actions:this.suggestNextActions(t,s,e,n),_ai_silent_reason:this.getSilentReason(t,s,i)};let r={...e,_ai_context:{tool:t,action:s,timestamp:new Date().toISOString(),success:!e.error}},o=t?(c=Zs[`${t.toUpperCase()}_SCHEMAS`])==null?void 0:c[s]:null;o&&(r._ai_schema={triggers:o.proactive_triggers,next_actions:o.next_actions,examples:o.ai_examples}),r._ai_next_actions=this.suggestNextActions(t,s,e,n),r._ai_proactive_hints=this.getProactiveHints(t,s,e);let a=this.detectEntities(e);return a.length>0&&(r._ai_detected_entities=a),n.startTime&&(r._ai_performance={duration_ms:Date.now()-n.startTime,tokens_used:n.tokensUsed||null}),r}static suggestNextActions(e,t,s,i){var r,o,a,c;let n=[];return e==="memory"?t==="store"&&s.id?(n.push({tool:"relationships",action:"query",reason:"Check relationships for stored entity"}),n.push({tool:"board",action:"update",reason:"Update task progress after storing memory"})):t==="query"&&((r=s.results)==null?void 0:r.length)>0?(n.push({tool:"analysis",action:"analyze",reason:"Analyze patterns in query results"}),n.push({tool:"memory",action:"versions",reason:"Check version history of found entities"})):t==="query"&&(!s.results||s.results.length===0)&&n.push({tool:"memory",action:"search",reason:"Try exact search instead of semantic"}):e==="board"?t==="create"?n.push({tool:"board",action:"move",params:{category:"active-memory"},reason:"Move task to active if starting work"}):t==="status"&&((a=(o=s.tasks)==null?void 0:o["active-memory"])==null?void 0:a.length)>3&&n.push({tool:"board",action:"move",reason:"Consider completing some active tasks"}):e==="workflow"&&t==="complete"&&s.next_phase&&(n.push({tool:"workflow",action:"status",reason:"Check status after completing phase"}),n.push({tool:"board",action:"create",reason:"Create tasks for next phase"})),i.errorDetected&&n.push({tool:"memory",action:"store",params:{memory_type:"error",silent:!0},reason:"Store error for future reference"}),((c=i.entitiesDetected)==null?void 0:c.length)>0&&n.push({tool:"memory",action:"search",params:{entity:i.entitiesDetected[0]},reason:"Search history of detected entity"}),n}static getProactiveHints(e,t,s){var n,r,o,a,c,l,h;let i=[];if(e==="memory"&&t==="query"&&((n=s.results)!=null&&n.some(d=>d.memory_type==="error")&&i.push("Found error memories - consider searching for solutions"),(r=s.results)!=null&&r.some(d=>{var m;return((m=d.conflicts)==null?void 0:m.length)>0})&&i.push("Conflicting memories detected - may need resolution")),e==="board"&&t==="status"){let d=s.tasks||{};((o=d["pending-tasks"])==null?void 0:o.length)>10&&i.push("Many pending tasks - consider prioritization"),((a=d["active-memory"])==null?void 0:a.length)===0&&((c=d["pending-tasks"])==null?void 0:c.length)>0&&i.push("No active tasks - move some from pending")}return((l=s.message)!=null&&l.includes("not found")||(h=s.message)!=null&&h.includes("no results"))&&i.push("No results - try different search terms or create new entry"),i}static detectEntities(e){var n;let t=new Set,s=Zs.GLOBAL_RULES.entity_detection.patterns,i=[e.content,e.message,e.description,...((n=e.results)==null?void 0:n.map(r=>r.content))||[]].filter(Boolean).join(" ");return s.forEach(r=>{let o=i.matchAll(r);for(let a of o)a[1]&&t.add(a[1])}),Array.from(t)}static getSilentReason(e,t,s){var n;let i=e?(n=Zs[`${e.toUpperCase()}_SCHEMAS`])==null?void 0:n[t]:null;if(i!=null&&i.silent_conditions){for(let r of i.silent_conditions)if(this.matchesCondition(r,s))return r}return"Explicitly marked as silent"}static matchesCondition(e,t){var s;return!!(e.includes("Entity extraction")&&((s=t.structured)!=null&&s.entities)||e.includes("Auto-categorization")&&t.auto_categorized||e.includes("Pattern detection")&&t.detected_pattern)}static stripAIFields(e){let t={};for(let[s,i]of Object.entries(e))s.startsWith("_ai_")||(t[s]=i);return t}static isAIOnly(e){return e._ai_only===!0}static formatError(e,t,s,i){return{error:e.message||e,_ai_error_context:{tool:t,action:s,params:i,stack:e.stack,suggestions:["Check parameter validity","Verify tool availability","Review error message for hints"]}}}};u(ti,"AIResponseFormatter");var ei=ti;yo.exports=ei});var fo=g((Wd,go)=>{var Q=k(),ii=class ii{constructor(e,t){this.memorySystem=e,this.enhancedTools=t}async handle(e){let{action:t,...s}=e;switch(t){case"store":return await this.store(s);case"query":return await this.query(s);case"search":return await this.search(s);case"export":return await this.export(s);case"stats":return await this.stats(s);case"versions":return await this.versions(s);case"update":return await this.update(s);case"edit":return await this.edit(s);case"delete":return await this.delete(s);default:return`\u274C Unknown memory action: ${t}. Use: store, query, search, export, stats, versions, edit, update, delete`}}async store(e){let s={startTime:Date.now()};try{let n={id:await this.memorySystem.store(e),success:!0};return Q.format(n,"memory","store",e,s)}catch(i){return Q.formatError(i,"memory","store",e)}}async query(e){let s={startTime:Date.now()};try{let i=await this.memorySystem.search(e.query,e.limit||20,{mode:"semantic",memory_type:e.memory_type,min_confidence:e.min_confidence||.3}),n=Array.isArray(i)?i.map(o=>({...o,search_type:"semantic",search_mode:"query",explanation:"Found through semantic similarity, not exact match"})):i,r;return Array.isArray(n)?n.length===0?r={results:[],message:`No semantically related memories found for: "${e.query}"`,search_type:"semantic",hint:'Query searches for semantic meaning. Use "search" for exact matches.'}:r={results:n,count:n.length,search_type:"semantic",query:e.query}:r=n,Q.format(r,"memory","query",e,s)}catch(i){return Q.formatError(i,"memory","query",e)}}async search(e){if(e.structured_query)try{let n=await this.memorySystem.structuredMemory.enhancedSearch(e.structured_query);return Array.isArray(n)?n.map(r=>({...r,search_type:"structured",search_mode:"exact",matched_on:{entity:e.structured_query.entity,relation:e.structured_query.relation,category:e.structured_query.category}})):n}catch(n){return console.error("Structured search error:",n),e.query?await this.memorySystem.search(e.query,e.limit||20,{mode:"exact"}):[]}let t=e.mode||"exact",s=await this.memorySystem.search(e.query,e.limit||20,{...e,mode:t,min_confidence:e.min_confidence||.7}),i=Array.isArray(s)?s.map(n=>({...n,search_type:"exact",search_mode:"search",explanation:"Found through exact/keyword matching"})):s;return Array.isArray(i)?i.length===0?{results:[],message:`No exact matches found for: "${e.query}"`,search_type:"exact",hint:'Search looks for exact matches. Use "query" for semantic/related results.'}:{results:i,count:i.length,search_type:"exact",query:e.query}:i}async export(e){return await this.enhancedTools.createMemoryExportTool().handler(e)}async stats(e){return await this.memorySystem.getStats(e.detailed)}async versions(e){var i;if(!e.entity_name)return'\u274C Entity name required for versions action. Example: { action: "versions", entity_name: "UserService" }';let t=(i=this.memorySystem.memoryManagement)==null?void 0:i.versionTracker;if(!t)return"\u274C Version tracking not available. Memory management may not be initialized.";let s=await t.getVersionHistory(e.entity_name,e.limit||10);return!s||s.length===0?`No version history found for entity: ${e.entity_name}`:{entity:e.entity_name,total_versions:s.length,versions:s.map(n=>({id:n.id,version:n.version,timestamp:n.timestamp,content:n.content,metadata:typeof n.metadata=="string"?JSON.parse(n.metadata):n.metadata}))}}async update(e){let s={startTime:Date.now()};if(!e.memory_id&&!e.id)throw new Error("memory_id is required for update action");let i=e.memory_id||e.id;try{let n=await this.memorySystem.getMemoryById(i);if(!n)throw new Error(`Memory ${i} not found`);let r=await this.memorySystem.updateMemory(i,{content:e.content||n.content,preserve_metadata:e.preserve_metadata||!1,tags:e.tags!==void 0?e.tags:n.tags,memory_type:e.memory_type||n.type,structured:e.structured!==void 0?{...n.structured,...e.structured}:n.structured}),o={success:!0,message:`Memory ${i} updated successfully`,memory_id:i,previous_content:n.content,new_content:e.content||n.content,version:r.version||2};return Q.format(o,"memory","update",e,s)}catch(n){throw n.message.includes("not found")?new Error(`Memory ${i} does not exist`):n}}async edit(e){if(!e.memory_id)return'\u274C Memory ID required for edit action. Example: { action: "edit", memory_id: 12345, content: "Updated content" }';if(!e.content)return'\u274C Content required for edit action. Example: { action: "edit", memory_id: 12345, content: "Updated content" }';try{let t=await this.memorySystem.getMemoryById(e.memory_id);if(!t)return`\u274C Memory with ID ${e.memory_id} not found`;let s=await this.memorySystem.updateMemory(e.memory_id,{content:e.content,preserve_metadata:e.preserve_metadata||!1,tags:e.tags||t.tags,memory_type:e.memory_type||t.memory_type});return{success:!0,message:`\u2705 Memory ${e.memory_id} updated successfully`,memory_id:e.memory_id,previous_content:t.content,new_content:e.content,version:s.version||1}}catch(t){return`\u274C Failed to edit memory: ${t.message}`}}async delete(e){if(!e.memory_id&&!e.criteria)throw new Error("Either memory_id or criteria is required for delete action");try{if(e.memory_id){let t=e.memory_id,s=await this.memorySystem.getMemoryById(t);if(!s)throw new Error(`Memory ${t} not found`);return e.soft_delete?(await this.memorySystem.updateMemory(t,{content:s.content,tags:[...s.tags||[],"_archived"],metadata:{...s.metadata,archived:!0,archived_at:new Date().toISOString()}}),{success:!0,message:`Memory ${t} archived successfully`,deleted_count:1,archived:!0}):(await this.memorySystem.deleteMemory(t),{success:!0,message:`Memory ${t} deleted successfully`,deleted_count:1})}else if(e.criteria){let t=e.criteria,s=await this.findMemoriesByCriteria(t);if(s.length>=50&&!e.confirm)throw new Error(`Confirmation required for deleting ${s.length} memories. Add confirm: true to proceed.`);if(e.dry_run)return{success:!0,message:`Dry run: Would delete ${s.length} memories`,would_delete:s.length,deleted_count:0,memories:s.map(n=>({id:n.id,content:n.content.substring(0,50)+"..."}))};let i=0;for(let n of s)e.soft_delete?await this.memorySystem.updateMemory(n.id,{content:n.content,tags:[...n.tags||[],"_archived"],metadata:{...n.metadata,archived:!0,archived_at:new Date().toISOString()}}):await this.memorySystem.deleteMemory(n.id),i++;return{success:!0,message:`${i} memories deleted${e.soft_delete?" (archived)":""}`,deleted_count:i,archived:e.soft_delete||!1}}}catch(t){throw t}}async findMemoriesByCriteria(e){let t=[];return t=(await this.memorySystem.getAllMemories()).filter(i=>{if(e.memory_type&&!(Array.isArray(e.memory_type)?e.memory_type:[e.memory_type]).includes(i.type))return!1;if(e.tags){let n=Array.isArray(e.tags)?e.tags:[e.tags],r=i.tags||[];if(!n.every(o=>r.includes(o)))return!1}if(e.category&&(!i.structured||!i.structured.category||i.structured.category!==e.category&&!i.structured.category.startsWith(e.category+"/")))return!1;if(e.older_than){let n=new Date(e.older_than);if(new Date(i.timestamp)>=n)return!1}return!(!e.include_archived&&i.metadata&&i.metadata.archived)}),t}};u(ii,"MemoryHandler");var si=ii;go.exports=si});var Eo=g((Gd,_o)=>{var Gc=k(),ri=class ri{constructor(e){this.workflowTool=e}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"create":n=await this.create(i);break;case"complete":n=await this.complete(i);break;case"status":n=await this.status();break;case"phases":n=await this.phases();break;case"connection":n=await this.connection(i);break;case"short_memory":n=await this.shortMemory();break;default:n=`\u274C Unknown workflow action: ${t}. Use: create, complete, status, phases, connection, short_memory`}return Gc.format(n,s)}async create(e){return e.title?await this.workflowTool.createEnhancement(e):'\u274C Title is required for creating an enhancement. Usage: { "action": "create", "title": "Enhancement title", "description": "Details" }'}async complete(e){return await this.workflowTool.completePhase(e)}async status(){return await this.workflowTool.getWorkflowState()}async phases(){return await this.workflowTool.getPhases()}async connection(e){return await this.workflowTool.saveConnection(e)}async shortMemory(){return await this.workflowTool.getShortMemory()}};u(ri,"WorkflowHandler");var ni=ri;_o.exports=ni});var wo=g((Xd,bo)=>{var Vc=k(),ai=class ai{constructor(e){this.boardTool=e}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"status":n=await this.status(i);break;case"create":n=await this.create(i);break;case"update":n=await this.update(i);break;case"move":n=await this.move(i);break;case"delete":n=await this.delete(i);break;default:n=`\u274C Unknown board action: ${t}. Use: status, create, update, move, delete`}return Vc.format(n,s)}async status(e){return await this.boardTool.getBoardStatus(e)}async create(e){return e.title?(e.category||(e.category="pending-tasks"),await this.boardTool.updateBoardTask({action:"create",...e})):'\u274C Title is required for creating a task. Usage: { "action": "create", "title": "Task title", "category": "pending-tasks", "priority": "high|medium|low" }'}async update(e){return await this.boardTool.updateBoardTask({action:"update",...e})}async move(e){return await this.boardTool.updateBoardTask({action:"move",...e})}async delete(e){return await this.boardTool.updateBoardTask({action:"delete",...e})}};u(ai,"BoardHandler");var oi=ai;bo.exports=oi});var So=g((Jd,To)=>{var Xc=k(),li=class li{constructor(e,t){this.enhancedTools=e,this.visualMapper=t}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"store":n=await this.store(i);break;case"query":n=await this.query(i);break;case"traverse":n=await this.traverse(i);break;default:n=`\u274C Unknown relationship action: ${t}. Use: store, query, traverse`}return Xc.format(n,s)}async store(e){return await this.enhancedTools.createStoreRelationshipTool().handler(e)}async query(e){return await this.enhancedTools.createQueryRelationshipsTool().handler(e)}async traverse(e){let t=await this.visualMapper.generateMemoryMap({...e,format:"json_tree",focus_entity:e.start_entity,max_depth:e.max_hops||3});return typeof t=="object"&&t.paths?`Graph Traversal Results:
${JSON.stringify(t,null,2)}`:t}};u(li,"RelationshipsHandler");var ci=li;To.exports=ci});var vo=g((Kd,Co)=>{var di=class di{constructor(e){this.db=e,this.initialized=!1}async initializeCache(){if(!this.initialized)try{await this.dbGet("SELECT 1 FROM analysis_cache LIMIT 1"),this.initialized=!0}catch(e){throw console.error("Analysis cache table not found:",e.message),new Error("Analysis cache table not initialized. Ensure enhanced-memory-system creates it.")}}dbRun(e,t=[]){return new Promise((s,i)=>{this.db.run(e,t,function(n){n?i(n):s({lastID:this.lastID,changes:this.changes})})})}dbGet(e,t=[]){return new Promise((s,i)=>{this.db.get(e,t,(n,r)=>{n?i(n):s(r)})})}dbAll(e,t=[]){return new Promise((s,i)=>{this.db.all(e,t,(n,r)=>{n?i(n):s(r||[])})})}async filterUnanalyzedMemories(e,t="1.0"){if(await this.initializeCache(),!e||e.length===0)return[];let s=e.map(a=>a.id),i=s.map(()=>"?").join(","),n=await this.dbAll(`
      SELECT memory_id, last_modified, analysis_version 
      FROM analysis_cache 
      WHERE memory_id IN (${i})
      AND analysis_version = ?
    `,[...s,t]),r=new Map(n.map(a=>[a.memory_id,a])),o=e.filter(a=>{let c=r.get(a.id);return c?new Date(a.updated_at||a.created_at).getTime()>c.last_modified:!0});return{unanalyzed:o,alreadyAnalyzed:e.length-o.length,totalMemories:e.length}}async markMemoriesAnalyzed(e,t,s="1.0"){await this.initializeCache();let i=Date.now(),n=new Map;t.forEach(r=>{r.memories&&r.memories.forEach(o=>{n.set(o.id,{clusterId:r.id||"cluster_"+t.indexOf(r),theme:r.theme||"Unknown"})})});for(let r of e){let o=n.get(r.id)||{clusterId:"unclustered",theme:"None"},a=new Date(r.updated_at||r.created_at).getTime();await this.dbRun(`
        INSERT OR REPLACE INTO analysis_cache 
        (memory_id, analysis_version, analyzed_at, cluster_id, cluster_theme, features_extracted, last_modified, metadata)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `,[r.id,s,i,o.clusterId,o.theme,1,a,JSON.stringify({tags:r.tags||[],memory_type:r.memory_type})])}}async getAnalysisStats(){await this.initializeCache();let e=await this.dbGet(`
      SELECT 
        COUNT(*) as total_analyzed,
        COUNT(DISTINCT cluster_id) as total_clusters,
        MIN(analyzed_at) as first_analysis,
        MAX(analyzed_at) as last_analysis
      FROM analysis_cache
    `)||{total_analyzed:0,total_clusters:0},t=await this.dbAll(`
      SELECT 
        cluster_id,
        cluster_theme,
        COUNT(*) as size
      FROM analysis_cache
      WHERE cluster_id != 'unclustered'
      GROUP BY cluster_id
      ORDER BY size DESC
      LIMIT 10
    `);return{...e,topClusters:t,lastAnalysis:e.last_analysis?new Date(e.last_analysis).toISOString():null}}async getCachedClusters(e){await this.initializeCache();let t=e.map(()=>"?").join(","),s=await this.dbAll(`
      SELECT memory_id, cluster_id, cluster_theme
      FROM analysis_cache
      WHERE memory_id IN (${t})
    `,e),i=new Map;return s.forEach(n=>{i.set(n.memory_id,{id:n.cluster_id,theme:n.cluster_theme})}),i}async markAsAnalyzed(e,t,s="1.0"){await this.initializeCache();let i=await this.db.prepare(`
      INSERT OR REPLACE INTO analysis_cache 
      (memory_id, cluster_id, cluster_theme, analysis_version, analyzed_at)
      VALUES (?, ?, ?, ?, datetime('now'))
    `);for(let n of e){let r=t.get(n.id);r?await this.dbRun(`INSERT OR REPLACE INTO analysis_cache 
           (memory_id, cluster_id, cluster_theme, analysis_version, analyzed_at)
           VALUES (?, ?, ?, ?, datetime('now'))`,[n.id,r.id,r.theme,s]):await this.dbRun(`INSERT OR REPLACE INTO analysis_cache 
           (memory_id, cluster_id, cluster_theme, analysis_version, analyzed_at)
           VALUES (?, ?, ?, ?, datetime('now'))`,[n.id,"unclustered","Noise",s])}}async clearCache(e=null){if(await this.initializeCache(),e){let t=Date.now()-e*24*60*60*1e3;await this.dbRun(`
        DELETE FROM analysis_cache 
        WHERE analyzed_at < ?
      `,[t])}else await this.dbRun("DELETE FROM analysis_cache")}async getAnalyzedMemories(e=100){return await this.initializeCache(),await this.dbAll(`
      SELECT * FROM analysis_cache 
      ORDER BY analyzed_at DESC 
      LIMIT ?
    `,[e])}};u(di,"AnalysisCache");var hi=di;Co.exports={AnalysisCache:hi}});var Ro=g((em,Mo)=>{var{BatchAnalysisEngine:Ao}=Y(),{AnalysisCache:mi}=vo();async function Yc(T,e,t={}){let s=new mi(T.db),i=[],n=new Ao({batchSize:t.batchSize||20,maxTokensPerBatch:t.maxTokens||15e3,analysisCache:s,progressCallback:u(E=>{i.push({timestamp:new Date().toISOString(),...E})},"progressCallback")}),r=await s.getAnalysisStats(),o=Date.now(),a=await n.analyzeBatches(e,{epsilon:t.epsilon||.5,minPoints:t.minPoints||2,analysisVersion:"1.2",distanceMetric:t.distanceMetric||"euclidean",...t}),c=require("fs-extra"),l=require("path"),h=l.join(process.cwd(),".nova","analysis");await c.ensureDir(h);let m=`batch-analysis-${new Date().toISOString().replace(/[:.]/g,"-")}.json`,p=l.join(h,m),y={timestamp:new Date().toISOString(),parameters:t,memories_analyzed:e.length,batch_results:a,cache_statistics:r,execution_time_ms:Date.now()-o};await c.writeJson(p,y,{spaces:2});let f={status:"success",mode:"batch_analysis",summary:{total_memories:e.length,processed_new:a.summary.processedMemories,used_cached:a.summary.cachedMemories,batches_processed:a.summary.batchesProcessed,total_time_ms:Date.now()-o,errors:a.summary.errors},cache_info:{total_cached:r.total_analyzed,cache_hit_rate:a.summary.cachedMemories/e.length,last_analysis:r.lastAnalysis},key_insights:{total_clusters:a.finalAnalysis.totalClusters,clustered_memories:a.finalAnalysis.stats.clusteredMemories,noise_memories:a.finalAnalysis.stats.noiseMemories,top_themes:a.finalAnalysis.clusters.sort((E,b)=>{var w,S;return(((w=b.memories)==null?void 0:w.length)||0)-(((S=E.memories)==null?void 0:S.length)||0)}).slice(0,5).map(E=>E.theme||"Unknown")},full_analysis_saved:{filepath:p,file_size_kb:Math.round((await c.stat(p)).size/1024),message:"Full analysis with all clusters and memories saved to file",how_to_read:"Use the Read tool to view the complete analysis"}},_=Math.ceil(JSON.stringify(f).length/4);return _>5e3?{status:"success",mode:"batch_analysis",summary:{total_memories:e.length,clusters_found:a.finalAnalysis.totalClusters,analysis_saved_to:p},message:"Analysis complete. Full results saved to file.",how_to_read:`Use Read tool on: ${p}`}:(f.response_tokens=_,f)}u(Yc,"performBatchAnalysis");async function*Jc(T,e,t={}){let s=new mi(T.db),i=new Ao({batchSize:t.batchSize||20,maxTokensPerBatch:t.maxTokens||15e3,analysisCache:s});yield{type:"init",total_memories:e.length,message:"Starting batch analysis..."};for await(let n of i.analyzeIncremental(e,t))n.type==="progress"?yield{type:"progress",message:`Processing batch ${n.batchNumber}/${n.totalBatches} (${n.processing} memories)...`,percent:Math.round(n.batchNumber/n.totalBatches*100)}:n.type==="batch_complete"?yield{type:"batch_result",batch:n.batchNumber,clusters:n.result.clusters,noise:n.result.noise,cumulative_clusters:n.cumulativeProgress.totalClusters,message:`Batch ${n.batchNumber} complete: Found ${n.result.clusters} clusters`}:n.type==="complete"&&(yield{type:"final",total_clusters:n.finalResults.clusters.length,processed_batches:n.finalResults.processedBatches,message:"Analysis complete!"})}u(Jc,"streamBatchAnalysis");async function Qc(T,e){let t=new mi(T.db),s=await t.getAnalysisStats(),i=await t.getCachedClusters(e);return{cached_results:!0,total_cached:s.total_analyzed,clusters_found:s.total_clusters,last_analysis:s.lastAnalysis,top_clusters:s.topClusters,memory_clusters:Array.from(i.entries()).map(([n,r])=>({memory_id:n,cluster_id:r.id,cluster_theme:r.theme}))}}u(Qc,"getCachedAnalysis");Mo.exports={performBatchAnalysis:Yc,streamBatchAnalysis:Jc,getCachedAnalysis:Qc}});var xo=g((sm,ko)=>{var Kc=k(),pi=class pi{constructor(e,t,s,i){this.memorySystem=e,this.conflictEngine=t,this.visualMapper=s,this.crossValidator=i}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"analyze":n=await this.analyze(i);break;case"conflicts":n=await this.conflicts(i);break;case"visualize":n=await this.visualize(i);break;case"validate":n=await this.validate(i);break;default:n=`\u274C Unknown analysis action: ${t}. Use: analyze, conflicts, visualize, validate`}return Kc.format(n,s)}async analyze(e){var o,a,c;let t={};if(e.days){let l=new Date;l.setDate(l.getDate()-e.days),t.since=l}e.category&&(t.memory_type=e.category);let s=await this.memorySystem.query(t,e.limit||100);if(e.algorithm==="clustering")return{message:"Clustering analysis is temporarily disabled",suggestion:"This feature is being enhanced and will be available in a future update",alternatives:["Use 'hybrid' algorithm for balanced analysis","Use 'pagerank' algorithm for importance ranking","Use 'community' algorithm for relationship grouping"],available_algorithms:["pagerank","community","hybrid"]};if(e.mode==="batch"||e.batch===!0||s.length>50)try{let{performBatchAnalysis:l}=Ro(),h=await l(this.memorySystem,s,e),d=JSON.stringify(h),m=Math.ceil(d.length/4);return m>2e4?{status:"success",mode:"batch_analysis",message:"Analysis complete but result was too large",summary:h.summary||{},cache_info:h.cache_info||{},token_limited:!0,original_tokens:m,tip:'Use format:"file" to save full analysis results'}:h}catch(l){console.error("Batch analysis failed:",l.message)}let{ClusteringEngine:i}=Y(),n=new i,r=s;if(s.length>50){r=[];let h=new Set;for(;h.size<50;)h.add(Math.floor(Math.random()*s.length));for(let d of h)r.push(s[d])}if(e.format==="file"){let l=require("fs-extra"),h=require("path"),d=h.join(process.cwd(),".nova","analysis");await l.ensureDir(d);let p=`analysis-${new Date().toISOString().replace(/[:.]/g,"-")}.json`,y=h.join(d,p),f=await n.autoClustering(r,e.options||{});return f.clusters&&(f.clusters=f.clusters.map(_=>({..._,memories:_.memories?_.memories.map(E=>({id:E.id,content:E.content,memory_type:E.memory_type,tags:E.tags,created_at:E.created_at})):[]}))),await l.writeJson(y,{timestamp:new Date().toISOString(),total_memories:s.length,analyzed_memories:r.length,parameters:e,results:f},{spaces:2}),{success:!0,message:"Analysis saved to file",filepath:y,file_size:(await l.stat(y)).size,summary:{total_memories:s.length,analyzed_memories:r.length,clusters_found:((a=(o=f.bestResult)==null?void 0:o.stats)==null?void 0:a.clusterCount)||0,algorithm_used:((c=f.comparison)==null?void 0:c.selectedAlgorithm)||"unknown"},how_to_read:"Use the Read tool to view the analysis file"}}if(!e.mode||e.mode==="summary"){let l=r.map(d=>({id:d.id,memory_type:d.memory_type,tags:d.tags||[],created_at:d.created_at})),h={total_memories:s.length,analyzed_memories:r.length,date_range:e.days?`Last ${e.days} days`:"All time",category:e.category||"all",memory_types:{},tags_frequency:{},recent_themes:[]};for(let d of l)if(h.memory_types[d.memory_type]=(h.memory_types[d.memory_type]||0)+1,d.tags&&Array.isArray(d.tags))for(let m of d.tags)h.tags_frequency[m]=(h.tags_frequency[m]||0)+1;return h.top_tags=Object.entries(h.tags_frequency).sort(([,d],[,m])=>m-d).slice(0,10).map(([d,m])=>({tag:d,count:m})),delete h.tags_frequency,h}return e.mode==="detailed"?{message:"Detailed clustering analysis is temporarily disabled",suggestion:"This feature is being enhanced and will be available in a future update",alternatives:["Use summary mode for basic statistics: analysis({ action: 'analyze' })","Use PageRank analysis: analysis({ action: 'analyze', algorithm: 'pagerank' })","Use community detection: analysis({ action: 'analyze', algorithm: 'community' })"]}:{error:"Invalid analysis mode",mode:e.mode,suggestion:"Use 'summary' (default) or 'detailed' mode"}}async conflicts(e){return await this.conflictEngine.detectConflicts(e)}async visualize(e){return await this.visualMapper.generateMemoryMap(e)}async validate(e){return await this.crossValidator.validateCrossReferences(e)}};u(pi,"AnalysisHandler");var ui=pi;ko.exports=ui});var No=g((nm,Oo)=>{var Zc=k(),gi=class gi{constructor(e){this.enhancedTools=e}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"list":n=await this.list(i);break;case"switch":n=await this.switch(i);break;case"changes":n=await this.changes(i);break;default:n=`\u274C Unknown project action: ${t}. Use: list, switch, changes`}return Zc.format(n,s)}async list(e){return await this.enhancedTools.createProjectListTool().handler(e)}async switch(e){return await this.enhancedTools.createProjectSwitchTool().handler(e)}async changes(e){return await this.enhancedTools.createFileChangesTool().handler(e)}};u(gi,"ProjectHandler");var yi=gi;Oo.exports=yi});var Do=g((om,Io)=>{var x=require("fs-extra"),A=require("path"),{ConfigurationManager:el}=K(),_i=class _i{constructor(e=null){this.configManager=new el,this.config=this.configManager.loadConfig(e),this.dbPath=this.configManager.expandPath(this.config.storage.path)}async databaseExists(){try{return await x.pathExists(this.dbPath)}catch(e){return console.error("Error checking database existence:",e),!1}}async backupDatabase(){try{if(!await this.databaseExists())return console.log("No existing database to backup"),null;let t=new Date().toISOString().replace(/[:.]/g,"-"),s=`${this.dbPath}.backup-${t}`,i=A.dirname(this.dbPath),n=A.basename(this.dbPath,".db"),r=[this.dbPath,A.join(i,`${n}.db-wal`),A.join(i,`${n}.db-shm`)];for(let o of r)if(await x.pathExists(o)){let a=o.replace(".db",`.db.backup-${t}`);await x.copy(o,a),console.log(`\u2705 Backed up: ${A.basename(o)} \u2192 ${A.basename(a)}`)}return console.log(`\u2705 Database backed up to: ${s}`),s}catch(e){throw console.error("\u274C Error creating backup:",e),e}}async deleteDatabase(){try{let e=A.dirname(this.dbPath),t=A.basename(this.dbPath,".db"),s=[this.dbPath,A.join(e,`${t}.db-wal`),A.join(e,`${t}.db-shm`),A.join(e,`${t}.db-journal`)];for(let i of s)await x.pathExists(i)&&(await x.remove(i),console.log(`\u{1F5D1}\uFE0F Deleted: ${A.basename(i)}`));console.log("\u2705 Database files deleted")}catch(e){throw console.error("\u274C Error deleting database:",e),e}}async resetDatabase(e={}){let{createBackup:t=!0,interactive:s=!0}=e;try{if(console.log("\u{1F504} Starting database reset process..."),console.log(`\u{1F4C1} Database location: ${this.dbPath}`),await this.databaseExists()){if(console.log("\u{1F4CA} Found existing database"),t&&await this.backupDatabase(),s){console.log(`
\u26A0\uFE0F  Warning: This will delete your existing database!`),console.log("   A backup has been created, but you will lose your current memory entries."),console.log(`   The database will be recreated fresh when you next use Nova Memory.
`);let r=require("readline").createInterface({input:process.stdin,output:process.stdout}),o=await new Promise(a=>{r.question("Do you want to continue? (yes/no): ",a)});if(r.close(),o.toLowerCase()!=="yes"&&o.toLowerCase()!=="y")return console.log("\u274C Database reset cancelled"),!1}await this.deleteDatabase()}else console.log("\u2139\uFE0F No existing database found");let n=A.dirname(this.dbPath);return await x.ensureDir(n),console.log(`\u2705 Database directory ready: ${n}`),console.log(`
\u2728 Database reset complete!`),console.log("\u{1F680} A fresh database will be created when you next use Nova Memory."),!0}catch(i){throw console.error(`
\u274C Database reset failed:`,i.message),i}}async listBackups(){try{let e=A.dirname(this.dbPath),t=A.basename(this.dbPath,".db"),i=(await x.readdir(e)).filter(n=>n.startsWith(`${t}.db.backup-`));return i.length===0?(console.log("No backups found"),[]):(console.log(`Found ${i.length} backup(s):`),i.forEach(n=>{console.log(`  - ${n}`)}),i)}catch(e){return console.error("Error listing backups:",e),[]}}async restoreFromBackup(e){try{let t=A.dirname(this.dbPath),s=A.join(t,e);if(!await x.pathExists(s))throw new Error(`Backup not found: ${e}`);return await this.deleteDatabase(),await x.copy(s,this.dbPath),console.log(`\u2705 Restored database from: ${e}`),!0}catch(t){throw console.error("\u274C Error restoring backup:",t),t}}};u(_i,"DatabaseReset");var fi=_i;Io.exports={DatabaseReset:fi}});var Fo=g((cm,Lo)=>{var tl=k(),bi=class bi{constructor(e){this.memorySystem=e}async handle(e){let{action:t,silent:s,...i}=e,n;switch(t){case"categories":n=await this.categories();break;case"algorithms":n=await this.algorithms();break;case"set_algorithm":n=await this.setAlgorithm(i);break;case"cleanup":n=await this.cleanup(i);break;case"reset_database":n=await this.resetDatabase(i);break;default:n=`\u274C Unknown settings action: ${t}. Use: categories, algorithms, set_algorithm, cleanup, reset_database`}return tl.format(n,s)}async categories(){return await this.memorySystem.getMemoryCategories()}async algorithms(){return{available_modes:this.memorySystem.getSearchAlgorithms().modes,current:"smart",description:"Smart search modes that automatically optimize for your queries"}}async setAlgorithm(e){var s;let t=e.algorithm;return e.mode&&(t={smart:"hybrid",precise:"tfidf",fast:"bm25",balanced:"hybrid"}[e.mode]||"hybrid"),this.memorySystem.searchEngine&&t?(this.memorySystem.searchEngine.algorithm=t,`Search mode set to: ${e.mode||((s=Object.entries({smart:"hybrid",precise:"tfidf",fast:"bm25",balanced:"hybrid"}).find(([n,r])=>r===t))==null?void 0:s[0])||"smart"}`):"\u274C Search engine not initialized"}async cleanup(e){return await this.memorySystem.cleanup(e.force)}async resetDatabase(e){let{DatabaseReset:t}=Do(),s=new t(this.memorySystem.config);if(!e.force)return`\u26A0\uFE0F Database Reset Warning:
This will delete your entire memory database and start fresh!
All memories, tasks, and relationships will be permanently deleted.

To proceed, use: settings action="reset_database" force=true

Note: A backup will be created automatically before deletion.`;try{return await s.resetDatabase({createBackup:!0,interactive:!1})?`\u2705 Database reset successful!
\u2022 Backup created with timestamp
\u2022 Old database deleted
\u2022 Fresh database will be created on next use

Please restart your AI assistant to continue using Nova Memory.`:"\u274C Database reset was cancelled"}catch(i){return`\u274C Database reset failed: ${i.message}`}}};u(bi,"SettingsHandler");var Ei=bi;Lo.exports=Ei});var zo=g((hm,Po)=>{var $o=k(),Ti=class Ti{constructor(e,t,s){this.memory=e,this.board=t,this.workflow=s}async handle(e){let t,s,i;if(e.action)({action:t,silent:s,...i}=e);else if(e.params&&e.params.action)({action:t,silent:s,...i}=e.params);else return $o.format('\u274C Invalid quick tool parameters. Usage: { "action": "find", "query": "search term" }',s);let n;switch(t){case"save":n=await this.save(i);break;case"find":n=await this.find(i);break;case"task":n=await this.task(i);break;case"note":n=await this.note(i);break;case"status":n=await this.status();break;default:n=`\u274C Unknown quick action: ${t}. Use: save, find, task, note, status`}return $o.format(n,s)}async save(e){return await this.memory({action:"store",...e})}async find(e){if(!e.query&&e.content&&(e.query=e.content,delete e.content),!e.query)return'\u274C Query is required for find. Usage: { "action": "find", "query": "search term" }';let t=String(e.query).trim();if(!t)return"\u274C Query cannot be empty. Please provide a search term.";let s={action:"search",query:t};e.limit!==void 0&&(s.limit=parseInt(e.limit)||20),e.min_confidence!==void 0&&(s.min_confidence=parseFloat(e.min_confidence)||0),e.mode&&(s.mode=String(e.mode));let i=await this.memory(s);if(typeof i=="string")return i;if(i&&i.results){let n=i.results.length;if(n===0)return`No results found for "${t}"`;let r=`Found ${n} results for "${t}":

`;return i.results.slice(0,5).forEach((o,a)=>{r+=`${a+1}. ${o.content.substring(0,100)}...
`,r+=`   \u{1F4CA} Score: ${(o.score*100).toFixed(1)}%
`,r+=`   \u{1F3F7}\uFE0F Type: ${o.memory_type||"general"}

`}),n>5&&(r+=`... and ${n-5} more results
`),r}else return JSON.stringify(i)}async task(e){return e.title?await this.board({action:"create",category:"pending-tasks",...e}):'\u274C Title is required for creating a task. Usage: { "action": "task", "title": "Task title", "priority": "high|medium|low" }'}async note(e){return e.title?await this.workflow({action:"create",type:"general",...e}):'\u274C Title is required for creating a note. Usage: { "action": "note", "title": "Note title", "description": "Note content" }'}async status(){let e=await this.board({action:"status",format:"simple"}),t=await this.workflow({action:"status"});return`${e}

${t}`}};u(Ti,"QuickHandler");var wi=Ti;Po.exports=wi});var Uo=g((mm,jo)=>{var Si=Ks(),qo=k(),sl=Qs(),vi=class vi{constructor(){this.helpTopics={overview:`
\u{1F9E0} **Nova Memory Meta-Tools**
\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501

9 simple tools that access 28 underlying functions:

1. **memory** - Store (with versioning!), query, search, export memories
2. **workflow** - Manage enhancements, phases, connections
3. **board** - Task board operations
4. **relationships** - Entity relationships
5. **analysis** - Analyze and visualize data
6. **project** - Project management
7. **settings** - Configuration
8. **quick** - Common shortcuts
9. **help** - This help system

Use: help({ topic: 'memory' }) for specific help
`,memory:`
\u{1F4DA} **Memory Tool** - WITH SMART VERSIONING! \u{1F504}

Actions:
\u2022 store - Save content (duplicates auto-prevented!)
\u2022 query - Semantic search
\u2022 search - Full-text search
\u2022 export - Export data (json/csv/markdown)
\u2022 stats - Memory statistics (includes version metrics)
\u2022 versions - Get version history for an entity

\u{1F3AF} IMPORTANT: Always include 'structured' data for versioning!

Examples:
// \u2705 BEST - With structured data (enables versioning)
memory({ 
  action: 'store', 
  content: 'UserService handles authentication',
  structured: {
    entities: ['UserService'],
    relationships: [{
      subject: 'UserService',
      relation: 'handles',
      object: 'authentication'
    }],
    category: 'auth/services'
  }
})

// Query version history
memory({ action: 'versions', entity_name: 'UserService' })

// Simple search
memory({ action: 'search', query: 'authentication' })

\u{1F4CC} Key Features:
\u2022 Automatic duplicate prevention
\u2022 Entity version tracking
\u2022 Evolution history (e.g., Redis \u2192 Memcached)
\u2022 No manual deduplication needed!
`,workflow:`
\u{1F4CB} **Workflow Tool**

Actions:
\u2022 create - Create enhancement/reminder
\u2022 complete - Complete phase with summary
\u2022 status - Current workflow state
\u2022 phases - View phase progression
\u2022 connection - Save connection string
\u2022 short_memory - Recent activity

Examples:
workflow({ action: 'create', title: 'New Feature', description: 'Details...' })
workflow({ action: 'complete', phase: 'Development' })
`,board:`
\u{1F4CA} **Board Tool**

Actions:
\u2022 status - View board (simple/detailed/task_ids)
\u2022 create - Create new task
\u2022 update - Update existing task
\u2022 move - Move task between categories
\u2022 delete - Delete task

Examples:
board({ action: 'create', title: 'Fix bug', category: 'pending-tasks' })
board({ action: 'move', task_id: 'task-123', category: 'completed' })
`,quick:`
\u26A1 **Quick Tool**

Shortcuts:
\u2022 save - Quick memory save
\u2022 find - Quick search
\u2022 task - Quick task creation
\u2022 note - Quick note/enhancement
\u2022 status - Overview of board & workflow

Examples:
quick({ action: 'task', title: 'Quick fix' })
quick({ action: 'find', query: 'optimization' })
`}}async handle(e){let{topic:t,ai_mode:s}=e,n={startTime:Date.now()};if(s||t==="_ai_schema"){let o={user_message:t?this.helpTopics[t]||this.helpTopics.overview:this.helpTopics.overview,_ai_complete_schemas:{all_tool_schemas:sl.getAllSchemas(),ai_specific_schemas:Si,proactive_rules:Si.GLOBAL_RULES,tool_triggers:this.getToolTriggers(),examples:this.getAIExamples()},_ai_guidance:{search_first_policy:"Always search before storing or making decisions",entity_detection:"Auto-search entities when detected in text",silent_operations:"Use silent: true for background operations",proactive_behavior:"Act without being asked based on triggers"}};return qo.format(o,"help","ai_mode",e,n)}let r=t&&this.helpTopics[t]?this.helpTopics[t]:this.helpTopics.overview;return qo.format({content:r},"help","view",e,n)}getToolTriggers(){let e={};for(let[t,s]of Object.entries(Si))if(t.endsWith("_SCHEMAS")){let i=t.replace("_SCHEMAS","").toLowerCase();e[i]={};for(let[n,r]of Object.entries(s))r.proactive_triggers&&(e[i][n]=r.proactive_triggers)}return e}getAIExamples(){return{entity_detection:{input:"The UserService connects to the AuthManager",actions:["memory({ action: 'search', query: 'UserService', silent: true })","memory({ action: 'search', query: 'AuthManager', silent: true })","relationships({ action: 'store', entity1: 'UserService', relation: 'connects_to', entity2: 'AuthManager' })"]},error_handling:{input:"TypeError: Cannot read property 'id' of undefined",actions:["memory({ action: 'store', memory_type: 'error', content: 'TypeError...', silent: true })","memory({ action: 'search', structured_query: { memory_type: 'error' }, limit: 5 })"]},task_creation:{input:"implement user authentication",actions:["memory({ action: 'query', query: 'authentication patterns' })","board({ action: 'create', title: 'Implement user authentication', category: 'active-memory' })"]}}}};u(vi,"HelpHandler");var Ci=vi;jo.exports=Ci});var Zo=g((pm,Ko)=>{var Bo=fo(),Wo=Eo(),Ho=wo(),Go=So(),Vo=xo(),Xo=No(),Yo=Fo(),Jo=zo(),Qo=Uo();Ko.exports={MemoryHandler:Bo,WorkflowHandler:Wo,BoardHandler:Ho,RelationshipsHandler:Go,AnalysisHandler:Vo,ProjectHandler:Xo,SettingsHandler:Yo,QuickHandler:Jo,HelpHandler:Qo,createHandlers(T,e,t,s,i,n,r){let o=new Bo(T,e),a=new Wo(s),c=new Ho(t),l=new Go(e,n),h=new Vo(T,i,n,r),d=new Xo(e),m=new Yo(T),p=new Jo(o.handle.bind(o),c.handle.bind(c),a.handle.bind(a)),y=new Qo;return{memory:o,workflow:a,board:c,relationships:l,analysis:h,project:d,settings:m,quick:p,help:y}}}});var ta=g((ym,ea)=>{var il=Qs(),nl=Zo(),Mi=class Mi{constructor(e,t,s,i,n,r,o){this.handlers=nl.createHandlers(e,t,s,i,n,r,o)}static getToolSchemas(){return il.getAllSchemas()}async memory(e){return await this.handlers.memory.handle(e)}async workflow(e){return await this.handlers.workflow.handle(e)}async board(e){return await this.handlers.board.handle(e)}async relationships(e){return await this.handlers.relationships.handle(e)}async analysis(e){return await this.handlers.analysis.handle(e)}async project(e){return await this.handlers.project.handle(e)}async settings(e){return await this.handlers.settings.handle(e)}async quick(e){return await this.handlers.quick.handle(e)}async help(e){return await this.handlers.help.handle(e)}};u(Mi,"MetaTools");var Ai=Mi;ea.exports=Ai});var ia=g((fm,sa)=>{var Ri=require("path"),ki=require("fs").promises,Oi=class Oi{constructor(e){this.memorySystem=e;let t=process.env.NOVA_MEMORY_PATH||Ri.join(process.env.APPDATA||process.env.HOME,"nova-memory");this.boardDataPath=Ri.join(t,"board-state.json")}async getBoardStatus(e={}){try{let t=await this.loadBoardState();return e.format==="simple"?this.renderSimpleStatus(t):e.format==="task_ids"?this.renderTaskIds(t):this.renderDetailedBoard(t)}catch(t){return console.error("Error getting board status:",t),"\u274C Unable to load board status"}}renderTaskIds(e){let t=e.categories||{},s=`\u{1F522} **Task ID Reference Guide**
`;return s+=`\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550

`,Object.keys(t).forEach(i=>{let n=t[i],r=n.tasks||[];r.length>0&&(s+=`## ${n.icon} ${n.title}
`,r.forEach((o,a)=>{let c={high:"\u{1F534}",medium:"\u{1F7E1}",low:"\u{1F7E2}"}[o.priority]||"\u26AA";s+=`\u{1F194} **${o.id}** - ${c} ${o.title}
`}),s+=`
`)}),s+=`\u{1F4A1} **Usage:** Copy the task ID (e.g., "task-1752913862329") to update, move, or delete tasks.
`,s}async loadBoardState(){try{let e=await ki.readFile(this.boardDataPath,"utf8");return JSON.parse(e)}catch{return this.getDefaultBoardState()}}renderSimpleStatus(e){let t=e.categories||{},s=`\u{1F9E0} **Nova Memory Board Status**
`;return s+='\u{1F4A1} Sync with Claude: `quick({action: "task", title: "your task"})`\n\n',Object.keys(t).forEach(i=>{var a,c;let n=t[i],r=((a=n.tasks)==null?void 0:a.length)||0,o=((c=n.tasks)==null?void 0:c.filter(l=>l.priority==="high").length)||0;s+=`${n.icon} **${n.title}**: ${r} tasks`,o>0&&(s+=` (\u{1F534} ${o} high priority)`),s+=`
`}),s}renderDetailedBoard(e){let t=e.categories||{},s=`\u{1F9E0} **Nova Memory Journal Board**
`;return s+=`\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550
`,s+=`\u{1F4A1} **Tip:** You can sync Claude's todo list with this board!
`,s+='   Use: `board({action: "create", title: "task from Claude", category: "pending-tasks"})`\n\n',Object.keys(t).forEach(i=>{let n=t[i],r=n.tasks||[];if(s+=`## ${n.icon} ${n.title} (${r.length})
`,r.length===0){s+=`   _No tasks_

`;return}r.forEach((o,a)=>{let c={high:"\u{1F534}",medium:"\u{1F7E1}",low:"\u{1F7E2}"}[o.priority]||"\u26AA";if(s+=`${a+1}. ${c} **${o.title}**
`,o.description&&(s+=`   \u{1F4DD} ${o.description}
`),o.tags){let l=o.tags;if(typeof l=="string")try{l=JSON.parse(l)}catch{l=[l]}Array.isArray(l)&&l.length>0&&(s+=`   \u{1F3F7}\uFE0F ${l.join(", ")}
`)}o.memory_context&&o.memory_context.length>0&&(s+=`   \u{1F9E0} Context: ${o.memory_context.join(", ")}
`),s+=`
`}),s+=`\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500

`}),s}getDefaultBoardState(){return{categories:{"journal-reminder":{title:"\u{1F4DD} Journal Reminders",icon:"\u{1F4DD}",tasks:[]},"active-memory":{title:"\u{1F9E0} Active Memory",icon:"\u{1F9E0}",tasks:[]},"killer-features":{title:"\u{1F680} Killer Features",icon:"\u{1F680}",tasks:[]},"pending-tasks":{title:"\u{1F4CB} Pending Tasks",icon:"\u{1F4CB}",tasks:[]},completed:{title:"\u2705 Completed",icon:"\u2705",tasks:[]}}}}async updateBoardState(e){try{let t=Ri.dirname(this.boardDataPath);return await ki.mkdir(t,{recursive:!0}),await ki.writeFile(this.boardDataPath,JSON.stringify(e,null,2)),await this.memorySystem.store({content:`Board state updated: ${Object.keys(e.categories).map(s=>{var i;return`${e.categories[s].title}: ${((i=e.categories[s].tasks)==null?void 0:i.length)||0} tasks`}).join(", ")}`,memory_type:"board_update",metadata:{update_timestamp:new Date().toISOString(),total_tasks:Object.values(e.categories).reduce((s,i)=>{var n;return s+(((n=i.tasks)==null?void 0:n.length)||0)},0)}}),!0}catch(t){return console.error("Error updating board state:",t),!1}}async updateBoardTask(e){try{let t=await this.loadBoardState(),{action:s,task_id:i,title:n,description:r,category:o,priority:a,tags:c}=e;switch(s){case"create":if(!n||!o)return"\u274C Title and category are required for creating tasks";let l=c;if(l&&typeof l=="string")try{l=JSON.parse(l)}catch{l=[l]}l||(l=[a||"medium","new"]);let h={id:`task-${Date.now()}`,title:n,description:r||"",priority:a||"medium",tags:l,date:new Date().toISOString(),memory_context:[]};if(!t.categories[o]){let E=Object.keys(t.categories).join(", ");return`\u274C Invalid category: ${o}
\u{1F4CB} Valid categories: ${E}`}return t.categories[o].tasks.push(h),await this.updateBoardState(t),await this.memorySystem.store({content:`Task created: ${n} - ${r}`,memory_type:"task_creation",metadata:{task_id:h.id,category:o,priority:a}}),`\u2705 Created task "${n}" in ${t.categories[o].title}`;case"update":if(!i)return"\u274C Task ID is required for updating tasks";let d=null,m=null;return Object.keys(t.categories).forEach(E=>{let b=t.categories[E].tasks.findIndex(w=>w.id===i);if(b!==-1){let w=t.categories[E].tasks[b],S=w.title;if(n&&(w.title=n),r!==void 0&&(w.description=r),a&&(w.priority=a,w.tags=w.tags.filter(v=>!["high","medium","low"].includes(v)),w.tags.push(a)),c){let v=c;if(typeof v=="string")try{v=JSON.parse(v)}catch{v=[v]}w.tags=v}d=w,m=E}}),d?(await this.updateBoardState(t),await this.memorySystem.store({content:`Task updated: ${d.title} - ${d.description}`,memory_type:"task_update",metadata:{task_id:i,category:m,changes:{title:n,description:r,priority:a,tags:c}}}),`\u2705 Updated task "${d.title}" in ${t.categories[m].title}`):`\u274C Task not found: ${i}`;case"move":if(!i||!o)return"\u274C Task ID and target category are required for moving tasks";let p=null,y=null;if(Object.keys(t.categories).forEach(E=>{let b=t.categories[E].tasks.findIndex(w=>w.id===i);b!==-1&&(p=t.categories[E].tasks[b],y=E,t.categories[E].tasks.splice(b,1))}),!p)return`\u274C Task not found: ${i}`;if(!t.categories[o]){let E=Object.keys(t.categories).join(", ");return`\u274C Invalid target category: ${o}
\u{1F4CB} Valid categories: ${E}`}return t.categories[o].tasks.push(p),await this.updateBoardState(t),`\u2705 Moved "${p.title}" from ${t.categories[y].title} to ${t.categories[o].title}`;case"delete":if(!i)return"\u274C Task ID is required for deleting tasks";let f=!1,_=null;return Object.keys(t.categories).forEach(E=>{let b=t.categories[E].tasks.findIndex(w=>w.id===i);b!==-1&&(_=t.categories[E].tasks[b],t.categories[E].tasks.splice(b,1),f=!0)}),f?(await this.updateBoardState(t),`\u2705 Deleted task "${_.title}"`):`\u274C Task not found: ${i}`;default:return`\u274C Invalid action: ${s}. Use create, update, move, or delete.`}}catch(t){return console.error("Error updating board task:",t),`\u274C Error updating board task: ${t.message}`}}};u(Oi,"BoardStatusTool");var xi=Oi;sa.exports=xi});var ra=g((Em,na)=>{var Ii=class Ii{constructor(e){this.memorySystem=e,this.currentPhase=null,this.workflowState={reminders:[],shortMemory:[],phases:{past:[],current:[],future:[]}}}async createEnhancementReminder(e){let t={id:`reminder-${Date.now()}`,type:"enhancement_reminder",title:`Enhancement: ${e.title}`,description:e.description,connectionStrings:e.connections||[],commands:e.commands||[],phase:"current",status:"active",timestamp:new Date().toISOString(),metadata:{enhancement_type:e.type,priority:e.priority||"medium",estimated_time:e.estimatedTime}};return await this.memorySystem.store({content:`Enhancement reminder created: ${t.title} - ${t.description}`,memory_type:"enhancement_reminder",metadata:{reminder_id:t.id,phase:t.phase,commands:t.commands,connections:t.connectionStrings},tags:["enhancement","reminder","workflow"]}),this.workflowState.reminders.push(t),this.addToShortMemory(`\u{1F4DD} Created enhancement reminder: ${t.title}`),t}async addToShortMemory(e){let t={id:`short-${Date.now()}`,content:e,timestamp:new Date().toISOString(),type:"short_memory"};return this.workflowState.shortMemory.unshift(t),this.workflowState.shortMemory.length>10&&(this.workflowState.shortMemory=this.workflowState.shortMemory.slice(0,10)),await this.memorySystem.store({content:e,memory_type:"short_memory",tags:["workflow","activity","short_memory"]}),t}async updatePhaseState(e){let{past:t,current:s,future:i}=e;return this.workflowState.phases={past:t,current:s,future:i},await this.memorySystem.store({content:`Phase state updated: Past(${t.length}), Current(${s.length}), Future(${i.length})`,memory_type:"phase_state",metadata:{past_tasks:t.length,current_tasks:s.length,future_tasks:i.length,current_phase_details:s},tags:["phase","workflow","state"]}),this.workflowState.phases}async completePhase(e){let t={id:`phase-completion-${Date.now()}`,phase:e.phase,summary:e.summary,achievements:e.achievements||[],timestamp:new Date().toISOString(),duration:e.duration,status:"completed"},s=await this.generatePhaseSummary(e);t.autoSummary=s;let i=this.workflowState.phases.current;return this.workflowState.phases.past.push(...i.map(n=>({...n,completed_at:t.timestamp,phase_summary:s}))),this.workflowState.phases.current=this.workflowState.phases.future.slice(0,3),this.workflowState.phases.future=this.workflowState.phases.future.slice(3),await this.memorySystem.store({content:`Phase completed: ${t.phase} - ${s}`,memory_type:"phase_completion",metadata:{completion_id:t.id,phase:t.phase,achievements:t.achievements,auto_summary:s,tasks_completed:i.length},tags:["phase","completion","workflow","summary"]}),await this.addToShortMemory(`\u2705 Phase completed: ${t.phase}`),t}async generatePhaseSummary(e){try{let t=await this.memorySystem.search(`${e.phase} task enhancement optimization`,10),s=[],i=new Set,n=[];t.forEach(o=>{(o.content.includes("\u2705")||o.content.includes("completed"))&&s.push(o.content),(o.content.includes("optimization")||o.content.includes("improvement"))&&n.push(o.content);let a=o.content.match(/\b(MCP|Nova Memory|WebSocket|API|UI|Dashboard)\b/gi);a&&a.forEach(c=>i.add(c))});let r={overview:`Phase "${e.phase}" completed with ${s.length} major achievements`,key_achievements:s.slice(0,5),technologies_used:Array.from(i),improvements_made:n.slice(0,3),completion_rate:`${s.length}/${e.totalTasks||s.length} tasks`,generated_at:new Date().toISOString()};return JSON.stringify(r,null,2)}catch(t){return console.error("Error generating phase summary:",t),`Phase "${e.phase}" completed successfully. Summary generation failed: ${t.message}`}}async getWorkflowState(){try{let e=await this.memorySystem.search("workflow phase reminder short_memory",20);await this.syncWithNovaMemory(e)}catch(e){console.error("Error syncing workflow state:",e)}return{...this.workflowState,lastUpdated:new Date().toISOString(),totalReminders:this.workflowState.reminders.length,activePhases:this.workflowState.phases.current.length}}async syncWithNovaMemory(e){let t=e.filter(n=>n.memory_type==="enhancement_reminder"),s=e.filter(n=>n.memory_type==="phase_state");if(s.length>0){let n=s[0];n.metadata&&n.metadata.current_phase_details&&(this.workflowState.phases.current=n.metadata.current_phase_details)}let i=e.filter(n=>n.memory_type==="short_memory");this.workflowState.shortMemory=i.slice(0,10).map(n=>({id:n.id,content:n.content,timestamp:n.timestamp,type:"short_memory"}))}async saveConnection(e){let t={id:`conn-${Date.now()}`,type:e.type||"general",value:e.value,description:e.description||"",commands:e.commands||[],saved_at:new Date().toISOString()};return await this.memorySystem.store({content:`Connection saved: ${t.type} - ${t.value}`,memory_type:"connection_string",metadata:{connection_id:t.id,type:t.type,commands:t.commands},tags:["connection","workflow","command"]}),await this.addToShortMemory(`\u{1F517} Saved connection: ${t.type}`),t}async executeCommand(e,t={}){let s={id:`exec-${Date.now()}`,command:e,context:t,timestamp:new Date().toISOString(),status:"executed"};return await this.memorySystem.store({content:`Command executed: ${e}`,memory_type:"command_execution",metadata:{execution_id:s.id,command:e,context:t},tags:["command","execution","workflow"]}),await this.addToShortMemory(`\u25B6\uFE0F Executed: ${e}`),s}};u(Ii,"EnhancementWorkflow");var Ni=Ii;na.exports=Ni});var aa=g((wm,Di)=>{var oa=ra();Di.exports={EnhancementWorkflow:oa};Di.exports.EnhancementWorkflow=oa});var la=g((Tm,ca)=>{var{EnhancementWorkflow:rl}=aa(),Fi=class Fi{constructor(e){this.memorySystem=e,this.workflow=new rl(e)}async getWorkflowState(){try{let e=await this.workflow.getWorkflowState();return this.formatWorkflowForUI(e)}catch(e){return console.error("Error getting workflow state:",e),"\u274C Failed to get workflow state: "+e.message}}async createEnhancement(e){try{let t=await this.workflow.createEnhancementReminder(e);return`\u2705 Enhancement reminder created: ${t.title}
\u{1F194} ID: ${t.id}
\u{1F4CB} Phase: ${t.phase}`}catch(t){return console.error("Error creating enhancement:",t),"\u274C Failed to create enhancement: "+t.message}}async completePhase(e){try{let t=await this.workflow.completePhase(e);return`\u2705 Phase completed: ${t.phase}
\u{1F4CA} Summary: ${t.autoSummary.substring(0,200)}...
\u{1F552} Duration: ${t.duration||"N/A"}`}catch(t){return console.error("Error completing phase:",t),"\u274C Failed to complete phase: "+t.message}}async saveConnection(e){try{let t=await this.workflow.saveConnection(e);return`\u2705 Connection saved: ${t.type}
\u{1F517} Value: ${t.value}
\u{1F194} ID: ${t.id}`}catch(t){return console.error("Error saving connection:",t),"\u274C Failed to save connection: "+t.message}}async executeCommand(e,t={}){try{let s=await this.workflow.executeCommand(e,t);return`\u2705 Command executed: ${e}
\u{1F194} Execution ID: ${s.id}
\u23F0 Time: ${s.timestamp}`}catch(s){return console.error("Error executing command:",s),"\u274C Failed to execute command: "+s.message}}async getShortMemory(){try{let e=await this.workflow.getWorkflowState();return this.formatShortMemoryForUI(e.shortMemory)}catch(e){return console.error("Error getting short memory:",e),"\u274C Failed to get short memory: "+e.message}}async getPhases(){try{let e=await this.workflow.getWorkflowState();return this.formatPhasesForUI(e.phases)}catch(e){return console.error("Error getting phases:",e),"\u274C Failed to get phases: "+e.message}}async updatePhases(e){try{let t=await this.workflow.updatePhaseState(e);return`\u2705 Phases updated
\u{1F4CB} Past: ${t.past.length} tasks
\u{1F504} Current: ${t.current.length} tasks
\u{1F3AF} Future: ${t.future.length} tasks`}catch(t){return console.error("Error updating phases:",t),"\u274C Failed to update phases: "+t.message}}formatWorkflowForUI(e){let{reminders:t,shortMemory:s,phases:i,lastUpdated:n,totalReminders:r,activePhases:o}=e,a=`\u{1F9E0} **Workflow State Dashboard**
`;a+=`\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550

`,a+=`\u{1F4CA} **Summary**
`,a+=`\u2022 Total Reminders: ${r}
`,a+=`\u2022 Active Phases: ${o}
`,a+=`\u2022 Short Memory: ${s.length}/10 entries
`,a+=`\u2022 Last Updated: ${new Date(n).toLocaleTimeString()}

`,a+=`\u{1F4DD} **Recent Activity**
`,s.slice(0,5).forEach((l,h)=>{a+=`${h+1}. ${l.content} (${new Date(l.timestamp).toLocaleTimeString()})
`}),a+=`
`,a+=`\u{1F514} **Active Reminders**
`;let c=t.filter(l=>l.status==="active");return c.length===0?a+=`_No active reminders_
`:c.slice(0,3).forEach((l,h)=>{a+=`${h+1}. ${l.title}
`,a+=`   \u{1F4DD} ${l.description}
`,l.commands.length>0&&(a+=`   \u{1F4BB} Commands: ${l.commands.join(", ")}
`),a+=`
`}),a}formatShortMemoryForUI(e){let t=`\u{1F9E0} **Short Memory (Recent Activity)**
`;return t+=`\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550

`,e.length===0?t+=`_No recent activity_
`:e.forEach((s,i)=>{let n=new Date(s.timestamp).toLocaleTimeString();t+=`${i+1}. **${n}** - ${s.content}
`}),t}formatPhasesForUI(e){let t=`\u{1F4CB} **Phase Tracker**
`;return t+=`\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550

`,t+=`## \u2705 Past (${e.past.length})
`,e.past.slice(-3).forEach((s,i)=>{t+=`${i+1}. ${s.title||s}
`,s.completed_at&&(t+=`   \u23F0 Completed: ${new Date(s.completed_at).toLocaleDateString()}
`)}),t+=`
`,t+=`## \u{1F504} Current (${e.current.length})
`,e.current.forEach((s,i)=>{t+=`${i+1}. ${s.title||s}
`}),t+=`
`,t+=`## \u{1F3AF} Future (${e.future.length})
`,e.future.slice(0,5).forEach((s,i)=>{t+=`${i+1}. ${s.title||s}
`}),t}};u(Fi,"WorkflowTools");var Li=Fi;ca.exports=Li});var da=g((Cm,ha)=>{var pe=require("path"),Pi=class Pi{static convertToLegacyFormat(e){if(!e)throw new Error("ConfigLoader configuration is required");if(!e.projectPath||!e.databasePath)throw new Error("ConfigLoader must provide projectPath and databasePath");let t=e.memoryConfig||{};return{storage:{type:"sqlite",path:e.databasePath,backup_enabled:!0,backup_interval:86400,max_backups:7},project:{path:this.resolvePath(e.projectPath),name:e.projectName||pe.basename(e.projectPath)},memory:{globalMaxMemories:t.globalMaxMemories||1e4,typeRetention:t.typeRetention||{},versioning:t.versioning||{enabled:!1}},search:{algorithm:"hybrid",max_results:100,similarity_threshold:.1,optimizations:{enable_caching:!0,enable_indexing:!0,enable_parallel_search:!1,enable_result_reranking:!0}},performance:{batch_size:50,cache_timeout:3e5,max_cache_size:100,connection_timeout:3e4,retry_attempts:3,enable_wal_mode:!0,enable_memory_mapping:!0}}}static resolvePath(e){return pe.isAbsolute(e)?e:pe.resolve(process.cwd(),e)}static validateLoaderConfig(e){if(!e||typeof e!="object")throw new Error("ConfigLoader configuration must be an object");let t=["projectPath","databasePath"];for(let s of t)if(!e[s])throw new Error(`ConfigLoader configuration missing required field: ${s}`);if(e.memoryConfig){let s=e.memoryConfig;if(s.globalMaxMemories!==void 0&&(typeof s.globalMaxMemories!="number"||s.globalMaxMemories<1))throw new Error("globalMaxMemories must be a positive number");if(s.typeRetention!==void 0&&typeof s.typeRetention!="object")throw new Error("typeRetention must be an object");if(s.versioning!==void 0&&typeof s.versioning!="object")throw new Error("versioning must be an object")}return!0}static createMemorySystemParams(e){return this.validateLoaderConfig(e),{projectPath:this.resolvePath(e.projectPath),databasePath:e.databasePath,projectName:e.projectName||pe.basename(e.projectPath),memoryConfig:e.memoryConfig||{}}}static isLoaderFormat(e){return e&&typeof e=="object"&&e.projectPath&&e.databasePath}static applyMemoryLimits(e,t){!e||!t||(e.globalMaxMemories&&(t.globalMaxMemories=e.globalMaxMemories),e.typeRetention&&(t.typeRetention=e.typeRetention),e.versioning&&(t.versioningEnabled=e.versioning.enabled||!1,t.maxVersionsPerEntity=e.versioning.maxVersionsPerEntity||5))}};u(Pi,"ConfigBridge");var $i=Pi;ha.exports={ConfigBridge:$i}});var{EnhancedMemorySystem:ol}=Mr(),{MemoryEntry:al}=G(),{ConflictDetectionEngine:cl}=kr(),{VisualMemoryMapper:ll}=Or(),{CrossReferenceValidator:hl}=Ir(),{RelationshipEngine:dl}=Hs(),{EnhancedMCPTools:ml}=Pr(),ul=ta(),pl=ia(),yl=la(),{ConfigLoader:gl}=Bt(),{ConfigBridge:fl}=da();module.exports={EnhancedMemorySystem:ol,MemoryEntry:al,EnhancedMCPTools:ml,ConflictDetectionEngine:cl,VisualMemoryMapper:ll,CrossReferenceValidator:hl,RelationshipEngine:dl,BoardStatusTool:pl,MetaTools:ul,WorkflowTools:yl,ConfigLoader:gl,ConfigBridge:fl};
